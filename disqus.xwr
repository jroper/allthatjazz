<rss version="2.0" xmlns:wp="http://wordpress.org/export/1.0/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dsq="http://www.disqus.com/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
      <channel>
        <item>
      <!-- title of article -->
      <title>Thailand</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2006/09/14/thailand.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
Well, today is my first day in Thailand.  I can say that I've definitely been
ripped off already, but as the day has gone along I've become more aware of how
not to be ripped off and how to bargain for a good price.  Though, if only
it wasn't on 2 tailor made suits, 4 tailor made shirts and 2 ties that I was
ripped off on.  Sure, they will be nice suits and nice shirts, Italian wool, Egyptian
cotton, and I paid a hell of a lot cheaper than I'd pay in Australia.  But I
still reckon I'm paying twice as much as I need to.  Oh well, gotta learn
somehow!  Just hope I don't run out of money....<p class="paragraph"/>The highlight of today has been riding in tuk tuks.  I love it.  This guy took
me on a tour, we agreed a price of 20 baht (60-70c), and then he took me to
some temples.  Stuff the temples.  He then took me to all these shops that sell
clothes and jewelery, which he gets money for taking me there.  He kept saying
"just one more place".  He was taking advantage of me, yes, but the fact is, I
loved screaming around dangerously in those little tricycles.  There are no
road rules in Thailand, we probably spent more time on the wrong side of the
road than anything else, and you know how when you're turning right at traffic
lights you first wait for the oncoming traffic to pass?  Nup, he just went
before they got there.  And then there were the tiny backstreets, almost
running people over as we went.  He ended up not charging me because we went to
so many places that he got money for.  I loved it.<p class="paragraph"/>I also took the sky rail, that was a good way to see Thailand, and a ferry up
the river.  The people here are really friendly, if you're standing around
looking lost, within 30 seconds someones asking if they can help you.  Very
different to Australia.<p class="paragraph"/>Anyway, I've got better things to do than blog!!<p class="paragraph"/>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2006-09-14-thailand</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2006-09-14 17:47:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Day 2</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2006/09/15/day_2.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
Well, today was kinda a laid back day.  I could have gone and visited lots of
temples or seen the sights, but the thing is, the thing I'm really here for is
to see other cultures.  Temples and touristy stuff like that is only a skewed
skim on the culture, I'd much prefer to sit on a park bench in the middle of
the city and just watch how people live.  Which is pretty close to what I've
been doing.<p class="paragraph"/>So, last night, I found a quaint little cafe with a live musician singing and
playing guitar.  I ate some Thai food and had some beer, just relaxed.  Then I
wondered up and down Khao San Road for a bit it's very exciting place.  Then I
caught a taxi back to the  hotel and got an early night.<p class="paragraph"/>This morning, after sleeping in, I checked out of my hotel.  I should say, to
start off I stayed at the Bangkok City Inn.  It's quite a reasonable hotel,
$30/night for nice comfy rooms that have pretty much everything you would
expect from a 3 to 3 1/2 star motel in Australia.  And it includes breakfast.
I stayed there because that's what my tour group booked for me for my first
night.  Much easier to get them to book something for me rather than have to
find a place at midnight when it's my first time overseas.  I then stayed there
last night because I didn't want to have to be forced to find a hotel
yesterday, and I didn't have time to go and find another one before the
checkout time.  Besides, I had no idea what to expect from my first day in
Bangkok.  Well, I didn't need to do that, because when I got to the Khao San
Road I found plenty of nice places to stay.<p class="paragraph"/>So, this morning I checked out of my hotel.  I went and sat, of all places, in
a McDonalds.  It was really hot today and I needed a long cold drink.  At
McDonalds in Thailand, they have pork burgers.  They also have a greater
variety of chicken burgers.  Something interesting that they seem to have is
home delivery.  At least, the staff were wearing badges that said "McDelivery".
They also had in the maccas tables that had ipods and headphones, so that you
could sit down and listen to music while you ate.<p class="paragraph"/>Actually, a note on fast food.  KFC seems to be huge in Bangkok, there are more
KFC's than any other fast food chain.  At least that's what I've seen.  Some
food courts you go to have a system where you get a card from a desk, and you
can put money on that card.  You then use that card to pay for your food, I
think the idea being that they don't have to worry about money and change at
the food serving places, they just have to swipe a card, making it faster and
more efficient.<p class="paragraph"/>After that I took the sky rail and then ferry to Khao San Road.  I love doing
that, the sky rail is such a great way to see Bangkok, and so is the ferry.
Once at the Khao San Road, I checked into one of the "classier" hotels that
they have there, it cost $15/night.  The room is very basic, it has air
conditioning, hot shower, tv, but not much else.  And, that price includes
breakfast.  But, seeing as I'm only sleeping in there, I don't think I'm
missing out on anything.  This hotel has a swimming pool on its roof, with a
bar next to the pool.  Pity its raining right now :(  That's why I'm writing
this very long blog post, hopefully by the time I'm finished it'll have stopped
raining.<p class="paragraph"/>I went back to the tailor for fitting this evening.  I tried to bargain the
price down, but having already paid the deposit, well, there's not much I could
do.  Though, it's not so bad.  Over the past 8 years or so, I don't think I've
made one bad major purchase.... that is to say, every time I've spent over
$500, I've always got exactly what I needed at the cheapest price possible.  I
guess I just took my Australian attitude to buying things to this place, after
all, I know a good bargain when I see one, right?  Which is exactly what they
wanted me to do.....  So one mistake in 8 years is not too bad :)  And like I
said, it's still heaps cheaper than I would pay in Australia.  And, having
looked at some of the other tailor places, this one appears to be much nicer,
very professional.  Hopefully the quality of the product matches the
appearance.<p class="paragraph"/>I then tried to catch the sky rail and ferry back to the Khao San Road.
Skyrail, easy, this time I was travelling in peak hour, which was lots of fun,
in the hustle and bustle of Bangkoks peak hour.  Got to see lots of people
travelling home.  However, I missed the last ferry.  Pity I didn't work that
out till after I'd been waiting for about 45 minutes.  So.... I thought I'd
have another go at tuk tuks.  It was quite a long way to go by tuk tuk, I got
a good price, I think, well, I think I offended the guy with my first offer,
and got half way in between his first offer and mine.  And, peak hour was
over.  So more travelling down the wrong side of the road, dodging between
cars.... the driver did have to slam on the breaks and screech to a stop at
one point.... but it's all fun.<p class="paragraph"/>So now I'm at the hotel in the internet cafe.... Haven't had dinner yet, I
think I might go and do that, hopefully I can find somewhere inside while it's
still pouring.<p class="paragraph"/>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2006-09-15-day_2</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2006-09-15 22:02:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>New friends</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2006/09/17/new_friends.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
Well, I'm now on my tour, and so finally have people to hang out with and talk
to.<p class="paragraph"/>I spent most of yesterday wandering around the malls.  I'm amazed at how
American these malls are, more American than Australia.  One particular one I
went into, nearly all the food stalls were American fast food chains.  I was
very surprised to see a Sizzler, I didn't think Thai's would be interested in
that, but obviously they are.  And yes, the Sizzler did serve the nice toast.<p class="paragraph"/>At about 4:00 I met my new room mate, Jason.  He's an American, but he's
been studying at Macquarie Uni this semester.... so he lives about 15 minutes
walk from where I work.  There's only one other person on the tour, Jennifer,
she's a Canadian, and like me, this is her first time overseas.  Apparently a
further 12 people will be joining us in Chang Mai for 6 days I think, and the
n it will be back to just us again.  It's nice having such a small group,
because we get more attention from our guide, and it's more easy going because
we only have to get 3 people to agree on what to do, rather than 15.<p class="paragraph"/>Both Jason and Jen only arrived in Bangkok less than a day before the tour
started.  So, having been there 3 days, I got to play guide last night.  I took
them to the Khao San Road by tuk tuk, where I tried a banana pancake made on a
cart on the street.  We also had a drink at one of the bars.  It then started
raining, so we decided to catch a taxi home.  The taxi driver didn't speak any
english at all, and couldn't work out where our hotel was from the map we gave
him.  He ended up dropping us off undercover at a shopping centre, by which
time it was absolutely pouring with rain.<p class="paragraph"/>When it rains in Bangkok, it really rains.  Some streets were 10cm deep with
water.  We were about 20 minutes walk from the hotel, I managed to get us
within sight of it, through shopping centres and undercover walkways, but there
was no way to get all the way undercover.  So, we ran through the rain, and got
totally drenched, arrived at the hotel all laughing and dripping wet.  We then
called it a night.<p class="paragraph"/>Today it was up early to catch a bus to Kanchanaburi.  Kanchanaburi is a town
about 2 hours by bus west of Bangkok.  It sits on the River Kwai, and is famous
for its World War 2 cemetry and Death Rail Museum.  This afternoon we will
visit those places and also the bridge over the River Kwai built by the POWs.
Our guesthouse is fantastic, floating on the river where it's very cool, quiet
and peaceful.  Overall, Kanchanaburi is much more laid back than Bangkok, and
much cleaner.  It's a nice change from the city, though that's not say that
Bangkok wasn't a great city :)<p class="paragraph"/>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2006-09-17-new_friends</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2006-09-17 14:23:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Kanchanaburi</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2006/09/18/kanchanaburi.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
Well, today I spent most of the day in the area surrounding Kanchanaburi.  To
start off with, I had a traditional Thai breakfast of rice soup with prawns.
It was quite weird to be eating rice in soup, I don't usually do that.  I've
had a rice porridge before, but this wasn't like that.  Very satisfying none
the less.  We then jumped in the back of a ute for a half hour drive to
Hellfire Pass.  One of the things that I'm really starting to notice about
Thailand is that although the people are poor, the infrastructure is good.  The
roads out here in the country have been really good, similar to Australian
country roads.<p class="paragraph"/>So anyway, Hellfire Pass was very moving and sombre.  Reading the stories in
the museum inspired in me an anger that I had never felt before towards another
race.  I can now understand why the ex servicemen are so strong about not
allowing enemy soldiers to march in the Anzac day parade, seeing the brutality
that those prisoners suffered really leaves an emotional scar that for many, is
unforgivable.  One thing though that you don't see in the old black and white
pictures of the prisoners at work is how green and lush the jungle is.  It was
really quite a lovely walk down the rail bed.<p class="paragraph"/>After Hellfire Pass we headed to the Erawan Falls, a 7 tiered waterfall about
2km long.  We hiked up to the highest tier, and swam there for a while.  The
water was a beautiful cloudy green, caused by the calcium in the water from all
the limestone in the area.  I've only ever seen water that colour in still
ponds that you would never swim in.  Behind the 7th waterfall there was a cave,
dripping with water from the roof, it was very cool inside.  We sat there for a
while and just relaxed.  There were also a lot of fish in the water, big and
small, which if you stayed still, would nibble at your toes.<p class="paragraph"/>Overall, it's been quite an exhausting day with a lot of walking.  Tonight, if
the weather holds up, we're going to the Kanchanaburi night markets, and will
probably find a nice bar to settle at and have a good time.<p class="paragraph"/>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2006-09-18-kanchanaburi</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2006-09-18 18:08:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Chiang Mai</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2006/09/20/chiang_mai.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
Well, what a cool trip this is turning out to be.  I can say that I was in a
country which was a constitutional monarchy one day, and a dictatorship the
next.  That sounds all very exciting, but really, it's not.  Here in Chiang
Mai, 12 hours train ride north of Bangkok, everything is normal.  No ones
uneasy or upset, life just continues on as normal.  The only difference is that
apparently, and I haven't seen them, there are military personel on the streets
with automatic weapons.  Unfortunately, it looks like it will have an impact on
our tour, in 3 days we were hoping to cross the border into Burma for half a
day, but the northern borders have been sealed.  My tour guide has said there
is absolutely nothing to worry about, and everyone believes that this will be
peacefully resolved.  I've seen the transmissions on tv, the military appears
to have every intention to hand control back to the people as soon as
possible.<p class="paragraph"/>Anyway, onto my trip.  Yesterday we took a 5 hour bus trip to Ayutthaya.
Ayutthaya used to be the capital of Thailand, 250 years ago.  Then the Burmese
came through and destroyed every temple.  So the king packed up and went to
Bangkok.  So, yesterday we went to the ruins of two major temples.  They were
quite amazing, these buildings were 700 years old.  All the budhas had had
their heads smashed off.<p class="paragraph"/>In the evening we boarded the overnight train to Chiang Mai.  Here we met the
rest of my tour group for the next 6 days.  Up until now it's been 3 of us, but
now it's 15.  Out of the 12 new people, 6 of them are Mexican exchange students
studying at Macquarie University.  The rest are Aussies, a young couple from
the central coast, a girl from Newcastle, and the rest from Sydney.  They're a
pretty good group, everyones easy going, so there's no disagreements in what to
do etc.<p class="paragraph"/>We stayed up reasonably late partying in the dining car, a lot of backpackers
were on this train from a large number of different countries.  I've never had
so much fun on a train before!  I had just enough alcohol to put my straight to
sleep, usually I don't sleep on trains but this time, no problems.<p class="paragraph"/>We arrived in Chiang Mai at around 9am, went to the hotel, and then we went to
the jewelery and silk factories.  We got to see them make the jewelery and
the silk, and I picked up some good bargains for presents for my family.  After
that we went to one of the temples, a big one up in the mountains.  It was very
ornate, but temples aren't really my sorta thing.
]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2006-09-20-chiang_mai</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2006-09-20 18:28:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1379957325270</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Browse around this website.</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jermaine.ologhlen@yahoo.de</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.salsaclub.lt/phpinfo.php?a[]=%3Ca+href=http://www.blacksaltrestaurant.com/member/9258/%3Eaffordablefamilymed.com%3C/a%3E</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>192.3.168.122</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-09-24 03:28:45</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Hey There. I found your blog using msn. This is a very well written article.

I will make sure to bookmark it and return to read more of your useful information.
Thanks for the post. I'll definitely comeback.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>The Thailand Coup</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2006/09/25/the_thailand_coup.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
Rather than saying bits and pieces about the Coup in my blog entries, I thought
I'd make one blog entry that I'll graduatally add to with all my thoughts on
the Coup, that way the rest of my blog can stay unpolitical.<p class="paragraph"/>I've seen a bit of what the Australian media and the Australian government has
been saying about the coup.  The official advisory said diplomats shouldn't
send their kids to school, other things have said that people should stay
indoors, keep away from busy areas and don't take any photos or do any filming.
I think the coup leaders are justified in being upset with the foreign media
for saying things like that.<p class="paragraph"/>Today, I saw on the front cover of the Bangkok Post, Thailands biggest English
newspaper, a photo of a kid dressed in kahki gear, holding a toy gun, posing in
front of one of the tanks.  If there was any issue with taking photos in public
places, a photo like that would never have made it to the front page of a local
newspaper.  Rather, I think the coup leaders are very happy for images like
that to be posted, because they want everything to be as transparent as
possible.<p class="paragraph"/>I read that a survey of 1550 random Bangkok residents, <span class="nobr"><a href="http://www.bangkokpost.net/News/25Sep2006_news02.php,">&#104;ttp://www.bangkokpost.net/News/25Sep2006_news02.php,</a></span> showed that something
like 97% of residents welcomed the coup, while around 90% were "comfortable"
with the military presence, and around 80% said it made them feel "safe".
Being here on the ground in Thailand, I completely agree.  There is nothing
intimidating about the military presence, they are all very friendly, and they
want everything to be as smooth as possible.  My impression is that they regret
that things have come to this, and so want to do everything they can to avoid
any inconvenience to residents and especially tourists.  Indeed, while we have
such a strong military presence in and around the place, and in light of the
recent terrorist attacks, I would say that Thailand is a safer place.<p class="paragraph"/>As for whether the coup is right or wrong.  I read a very interesting opinion
column in the Bangkok Post this morning: <span class="nobr"><a href="http://www.bangkokpost.com/News/25Sep2006_news15.php.">&#104;ttp://www.bangkokpost.com/News/25Sep2006_news15.php.</a></span>  The writer argued that the
reasons for the coup were all right, but morally, the coup was wrong.  I think
I have to agree with the writer.  It is however, very easy for us, knowing
nothing of Thai politics, to simply say because it is a coup, it is wrong.  One
thing I've noticed since coming to Thailand, is that Thai people are very
smart, and very friendly.  This is not a third world country, where the people
don't know what is good for them.  Many of them are educated, and they have a
very strong desire to help out others.  Anytime I was looking unsure or lost,
someone would ask me if I needed help.  And, they are definitely not a violent
group of people.  Many of them are very religious, strong Budhists, and believe
strongly that what goes around comes around.<p class="paragraph"/>So here we are in Thailand, a non violent country, with a military coup that is
welcomed.  That in my opinion is a very strong sign.  If there was any shred of
doubt in these people that a military coup was a bad thing, you would think
they wouldn't welcome it, that they would strongly oppose.  Rather, we see that
soldiers are given flowers and cold drinks on the street.<p class="paragraph"/>So, my overall opinion of this coup, is that while it is sad that it came to
this, it is not a bad thing.  I can't comment on the cause, because I am not
Thai, but I trust the Thai peoples judgment that it was necessary.  And
certainly, from what I have seen on the streets, I have every confidence in the
coup leaders will resolve it quickly and peacefully.
]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2006-09-25-the_thailand_coup</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2006-09-25 10:47:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>The Trek</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2006/09/25/the_trek.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
Well, 4 days of trekking through the hilltribes, do I have something to blog
about!
<h3 class="heading-1-1">Day 1</h3><p class="paragraph"/>The first day started with a stop off at the markets to buy food for the
journey, then we headed up into the mountains in the back of a ute.  The road
was incredibly steep and narrow, while it was sealed, there was only really
room for one car on it.  There were heaps of blind corners, everytime our
driver came up to a corner he would beep his horn to indicate to anyone coming
around the corner that he was coming.  We drove along this road for almost an
hour, before coming to a village, where we met our porters.  We then hiked to
our first village, in just over an hour.  My group was all very fit, we did the
hike in about half the time that the groups usually do it.  Our guide struggled
to keep up with us, while the porters had no problem, because they are locals
to this area and used to it.<p class="paragraph"/>In the first village, the women all dressed quite well, wearing purple and lots
of bright colours.  There were around 20 people in this village.  They all came
to us and did a tribal dance for us, where we joined in.  The interesting thing
about this dance was that the music was very simple, they had a 3 string
guitar, and only played 2 chords, with plain straight strokes the whole time.
The dancing was just holding hands in a circle around a fire, and stepping
sideways, stopping every few beats to stomp on the ground.  Our guide told us
this is the only dance and song that they do, and they will do this over and
over all night.  And they loved it.  I found that really odd that they could
get so much enjoyment out of the same simple thing over and over and over
again.<p class="paragraph"/>Our dwelling was a simple grass/bamboo hut, where all 15 of us slept.  The beds
were simply a raised floor on each side of the hut, with grass matts.  It was
very uncomfortable, I hardly slept that night.  Our guide made us a really nice
tofu green curry for dinner, I think it was the best green curry I've had since
coming to Thailand, it was very spicey.
<h3 class="heading-1-1">Day 2</h3><p class="paragraph"/>I was woken up at 5am by the roosters crowing.  All the villages we went to had
chickens, cows, pigs and dogs.  I slept in as much as I could before breakfast.
When I went outside, women from the surrounding villages had come and set up
little market stores on plastic matts in a circle to sell hats, bags, drink
holders and jewellery that they had made.  The funny thing was that every
single store was the same, each woman had made exactly the same stuff.  So,
after looking at one womans products, you had seen them all.  But, we still
felt obligated to have a look at every store.  It was quite painful, saying no
I'm not interested 10 to 12 times.<p class="paragraph"/>The toilets on the trek were probably the hardest thing to deal with.  The
toilets were squat toilets, in a little room, some of the rooms were made out
of bamboo and so if you went at night, you had to turn the torch off otherwise
everyone could see in.  There was no flush, the flush was a big bowl of water
beside the toilet with a scoop, you would scoop the water into the toilet to
flush it.  To shower, there was another bowl of water with a scoop, and you
would scoop the cold water over you.  And it was all very dirty and muddy.
Needless to say, I was very relieved to be able to use a sit down toilet when I
got back to the hotel.<p class="paragraph"/>The second day was the longest trek, though we did it in about half the time of
most groups.  I think our guide said that there are usually some older people,
50 to 60 year olds on the hike, that slow the group down.  Our oldest people
were early thirties, and they were all very fit.  For lunch we stopped near a
waterfall, and swam there.  Seeing as it was the rainy season, there was a lot
of water going down the water fall.  The bottom of the waterfall was all
pebbles, and the pebbles would be moving about in the turbulant water so that
it was a little painful to be in front of the waterfall.  But exhilarating none
the less.<p class="paragraph"/>At times the hike was very steep.  Going up hill, this was ok, I enjoy walking
up hill.  There was a really long up hill bit, usually it takes the group 90
minutes but we did it in 40.  That was great.  But the down hill was painful.
The track was very muddy and slippery, and so it was very easy to slip over.
Fortunately, I never did slip over, but I busted some pretty mad dance moves.<p class="paragraph"/>The scenary was incredibly green, mud aside, the wet season really is a good
time to go trekking in Thailand.  I got a number of very nice photos.  The
village we arrived in that evening was very basic.  There were 2 teenage girls
there that we tried to talk to in their dialect using our phrase sheet, but
they just laughed at us.  That was probably the hardest night, because it
rained a lot, the roof of the hut leaked, and everything was just very wet and
muddy.  And by that time, everyones clothes stunk.  There also wasn't as much
room in the hut.
<h3 class="heading-1-1">Day 3</h3><p class="paragraph"/>Day 3 was meant to be a fairly quick bamboo rafting trip.  Unfortunately
though, the river level was too high and moving too fast, it would have been
dangerous, because there water was flowing through fallen trees, if the raft
turned over and anyone went into the trees, they would have been dragged under
the branches, and if they got caught underneath, they would have been dead.
So, instead, it was a 4 hour hike.  The hike actually wasn't too bad, it just
followed the river, went up and down as tracks that follow rivers do, but
nothing too steep.  Everything was very wet though and a number of people,
including myself, got leaches on them.<p class="paragraph"/>Our campsite that night was not in a village, it was at a hut beside the river.
Compared to the previous 2 nights, this hut was 5 star luxury, the beers were
cold!  That afternoon we went for elephant rides.  It was kinda fun, but
elephants are big smelly and disobedient animals, they kept stopping for food.
We had a great night that night sitting around the campfire playing games and
drinking.<p class="paragraph"/>I actually had a good nights sleep that night, they had (thin) mattresses in
the hut, and it had a proper tiled roof.  The beer probably also helped.
<h3 class="heading-1-1">Day 4</h3><p class="paragraph"/>Day 4 wasn't much of a day, basically we just said goodbye to our porters, and
drove back to Chiang Mai.  Our porters were great.  Because of the language
barrier, having fun with them meant really basic jokes, mostly about being gay.
The word for lady boy in Thai is ka-toi.  So we were telling our porters they
were katoi, and they were saying no, I'm rambo, you katoi.  It was all lots of
fun.<p class="paragraph"/>After getting back to Chiang Mai, most of us ordered masseuses to our rooms.
We then went out in the evening and went and saw some Thai boxers sparring, and
drank a lot of cocktails.<p class="paragraph"/>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2006-09-25-the_trek</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2006-09-25 12:06:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Chiang Rai and the Golden Triangle</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2006/09/27/chiang_rai_and_the_golden_triangle.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
How does deep friend silk worms, bamboo worms and crickets sound?  Well, last
night I tried them all.  for about 60c I got a platter of them with chilli
sauce, mmm....  The taste was ok, but the texture&#8230;  A taste was enough, I
went and got some prawn cutlets, spring rolls and basil chicken.  That was last
night in Chiang Rai.<p class="paragraph"/>Today we took a local bus to the Golden Triangle.  The Golden Triangle is the
intersection between the borders of Thailand, Laos and Burma.  I'm told it used
to be the opium capital of South East Asia.  The Laos border is defined by the
Mekong River.  I was amazed at just how much water is flowing down this river.
It is wider than Lake Burley Griffen, looks quite deep, but it's flowing at
quite a rapid pace, too fast to swim against.  It flows down from the
Himalayas.<p class="paragraph"/>We crossed the Mekong and landed at Laos, though, it was only a large island on
the river, no border control or anything.  Nevertheless, there was a Laos post
box there, and I sent a postcard to my parents from there, therefore I was in
Laos.  Something weird there was that the people put snakes - king cobras, and
scorpians, in their whiskey.  There were all these whiskey bottles with snakes
and scorpians in them.  I didn't try it.<p class="paragraph"/>After that we went to Mae Sai, the northern most point of Thailand.  It is here
that we crossed into Burma.  This time, we did have to officially leave
Thailand, pay $13 for a visa into Burma, and then get a new visa when we came
back into Thailand.  Burma was a huge contrast to Thailand.  The streets were
covered in mud, I almost slipped over it was that muddy.  In the worst parts,
the mud had been scooped up into piles on the roads, and drivers had to weave
between the piles.  The people were very poor, there were a lot of beggars,
particularly young children, much more than in Thailand.  In Thailand, there
are little food stalls everywhere, in Burma, there were hardly any, and they
were much more dirty and run down.<p class="paragraph"/>We went shopping in the markets, the people were much more persistent in trying
to sell us things, particularly cigarettes, porn movies and viagra.  They'd
follow you all the way down the street, not like Thailand at all.  Coming back
into Thailand, I was amazed at how clean it was.  Previously I had been
thinking Thailand was quite dirty, but now that I'm back here, I look around
and it's so clean.  It just goes to show the cleanliness of a place is all
relative.
]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2006-09-27-chiang_rai_and_the_golden_triangle</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2006-09-27 06:01:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Thai Cooking</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2006/09/27/thai_cooking.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
One of the best experiences I've had so far on this trip was doing a Thai
cooking course.  No one from my tour wanted to do it, instead I ended up doing
it with an Intrepid group, there were 6 of us in all.  We started off by going
to the markets and buying most of the ingredients needed for what we were
cooking.  Our instructor explained to us what the different spices were, and
showed us different vegies, and taught us how to recognise which ones were good
and which weren't.  We also saw them make coconut cream and coconut milk fresh
for us.<p class="paragraph"/>At the cooking course, I made pad thai, thai spicy soup, green curry, and
banana in coconut milk.  The food was amazing, best Thai food I've had in
Thailand!  It was also incredibly quick to cook, I never realised it was so
quick to make Thai food properly.  When I get back to Australia I am definitely
seeking out all the ingredients to make the food, it's almost as quick as
unfreezing the frozen meals I usually make.
]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2006-09-27-thai_cooking</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2006-09-27 15:35:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Back to Bangkok</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2006/09/30/back_to_bangkok.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
My trip is now starting to come to an end.  After my last blog entry, I spent
a night in Mai Sai, took a bus to Chiang Rai, and then stayed there the night.
Chiang Rai was kinda boring, I got a 2 hour massage, and then wandered around
for a while.  The night markets were good though, I bought a few last pressies
for various people.  One big thing I've noticed is the further north you go in
Thailand, the less and less English you see.  In Bangkok, everything's in
English and Thai.  But, there were hardly any English signs in Chiang Rai or
Mai Sai.  There is also a much larger population of Chinese in the north, a
lot of the markets have chinese food in them, and a lot of the restaurants,
particularly the more western ones, are owned by Chinese.<p class="paragraph"/>The next day we took the bus to Chiang Mai, where I had one last walk around,
had lunch, and sat in a cafe reading the paper, before we took the overnight
train to Bangkok.  There were hardly any people on the train, compared to our
first train ride which was full.  So, there was nothing really much to do and
I got an early night at 7pm.  The train arrived in Bangkok at 6am, where I
took a taxi back to the Khao San Road, and checked into a hotel.  So now I'm
here, and I'm waiting for everything to open before I go out and explore.  I
think I'll take a river boat ride again, seeing as I missed out on my last
one.<p class="paragraph"/>Tomorrow I'll be departing from the new international airport in Bangkok.  It
is said to have the largest terminal in the world, and once all its extensions
are finished, will be the biggest airport in the world, handling 100 million
passengers a year.  There have been big problems with its opening 2 days ago
though.  People were waiting for hours for their baggage, and apparently 200
items got sent to the wrong destination.  The problem was due to the fact that
they didn't transfer enough baggage wagons from the old airport to the new.
There were also computer problems for Thai Airways, but seeing as I'm
traveling with British Airways, that won't be a problem.<p class="paragraph"/>Haven't seen any tanks, or any soldiers for that matter, since coming into
Bangkok.  Maybe, just as the coup appeared overnight when I was on the train
to Chiang May, disappeared overnight on the way to Bangkok.  Or maybe it just
never happened.  Hopefully I can find some tanks today to have my picture
taken with.
]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2006-09-30-back_to_bangkok</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2006-09-30 07:59:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>A new blog</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/03/16/a_new_blog.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
Welcome to my new blog.  This blog is going to contain everything from personal posts about my life (which probably won't interest many people) to technical articles about Java, and related Java frameworks.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-03-16-a_new_blog</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-03-16 16:15:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1206098649305</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anton</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://artof2.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.171.76.40</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-03-21 22:24:09</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[I made you a cookie.... but I eated it. :(<br />
Site looks cool but it could do with more pictures of me in it :)]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1206244528259</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>122.107.33.125</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-03-23 14:55:28</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I like your new blog. It has interesting articles about interesting topics. I just wish i knew what it all meant. </p>
<p>Youve got my vote,</p>
<p>Beth.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1206098649305</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1206674348976</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Scott</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>20.139.226.50</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-03-28 14:19:08</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[woohoo - i get to be your very first troll!<br />
<br />
Impeach Bush! <br />
I h8 emos!<br />
CSC is Fail <br />
<br />
<a href="http://www.youtube.com/watch?v=eBGIQ7ZuuiU" target="_blank"> now your blog is complete!</a>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1206098649305</wp:comment_parent>
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Facebook authentication in Java</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/03/19/facebook_authentication_in_java.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>If you're a web developer who likes writing practical, quick, and simple utility applications for yourself and others to use, then Facebook is the dream platform.  You don't have to write any user management, sign in, password change pages etc, it comes complete with advanced user management, including friends lists.  There's a high chance that your target users already use it, which makes them more likely to adopt your application because they don't need to go and create yet another username/password on yet another website.  It already has a theme and style sheets, and will present your application surrounded in menus and title bars.  And it provides a large number of ways to publish content and send notifications when events occur.  All these features mean that you, the developer, can spend more time doing what you wanted to do, that is, writing your application.</p>

<p>If Java is your chosen platform however, you may encounter some difficulties.  Java developers tend to like following well established design patterns.  We like to think of things as beans that have distinct purposes.  We like to use frameworks such as Spring to manage the beans that contain logic, to glue our application together.  We like our data to be stored in beans, and we access that data using getters and setters.  The Facebook client API makes this difficult, for the following reasons:</p>

<ol>
<li>Its instantiation is dependent on parameters in an HTTP request.  This means we can't use it as a typical Spring bean.</li>
<li>Depending on which flavour you of client you use, it returns JSON objects, or DOM documents, not the Java beans we like to use.</li>
</ol>

<p>This article will address the first issue, and in doing so make the second issue less of a worry.</p>

<h3>Instantiation of the client</h3>

<p>Our first task is to gracefully handle the instantiation of the Facebook client.  This will usually be required by most requests, hence, it is an ideal opportunity to use a ServletFilter.  The guys at <a href="http://www.theliveweb.net">TheLiveWeb</a> have already <a href="http://www.theliveweb.net/blog/2007/10/31/facebook-authentication-using-java/">provided</a> a very good article on how to do this, so I won't go into too much detail.  The servlet filter basically intercepts every request, checks to see if there is already a client in the session, and if not, uses the fb_session parameter if it's an embedded fbml app, or auth_token parameter if it's not an fbml app, to instantiate the client.  If neither of those parameters exist, it redirects the user to the login page.  The ServletFilter I've written is very different to theirs, but both follow the same concept and achieve the same goal.</p>

<h3>Using a ThreadLocal to access the client</h3>

<p>Our next task is to make the client available to the backend service beans that have no knowledge of the HTTP session.  We do this using a ThreadLocal.  We start by creating a wrapper class, UserClientBean, to wrap all calls to the client.  The client itself is stored in a private static ThreadLocal field:</p>

<pre class="prettyprint"><code class="language-java">public class UserClientBean
{
    public static void setClient(FacebookXmlRestClient aClient)
    {
        client.set(aClient);
    }
    public static void remove()
    {
        client.remove();
    }
    private static final ThreadLocal<FacebookXmlRestClient> client
        = new ThreadLocal<FacebookXmlRestClient>();
    ...
}
</code></pre>

<p>So calling UserClientBean.set() will bind a facebook client to the current thread, and UserClientBean.remove() will remove it.  We make these calls from the servlet filter:</p>

<pre class="prettyprint"><code class="language-java">public void doFilter(ServletRequest aRequest, ServletResponse aResponse,
        FilterChain aChain) throws IOException, ServletException
{
    if (aRequest instanceof HttpServletRequest)
    {
        HttpServletRequest request = (HttpServletRequest) aRequest;
        HttpServletResponse response = (HttpServletResponse) aResponse;
        HttpSession session = request.getSession();
        FacebookXmlRestClient client = (FacebookXmlRestClient) session
                    .getAttribute("facebookClient");
        if (client == null)
        {
            String sessionKey = request
                    .getParameter(FacebookParam.SESSION_KEY.toString());
            String authToken = request.getParameter("auth_token");
            if (sessionKey == null && authToken == null)
            {
                response.sendRedirect(loginPage);
                return;
            }
            else
            {
                try
                {
                    if (sessionKey != null)
                    {
                        client = new FacebookXmlRestClient(apiKey, secret,
                                sessionKey);
                    }
                    else
                    {
                        client = new FacebookXmlRestClient(apiKey, secret);
                        client.auth_getSession(authToken);
                    }
                    client.setIsDesktop(false);
                    session.setAttribute("facebookClient", client);
                }
                catch (FacebookException fe)
                {
                    log.error("Unable to log into facebook", fe);
                }
            }
        }
        // Store the client in the thread
        UserClientBean.setClient(client);
    }
    aChain.doFilter(aRequest, aResponse);
    // Remove the client from the thread
    UserClientBean.remove();
}
</code></pre>

<p>If you've never come across ThreadLocal's before, a ThreadLocal is a class that binds the object passed to its set() method to the current thread.  Calling the get() method will retrieve that object from the current thread, if it exists.  ThreadLocal's are usually declared as static final, so that they can be accessed statically from anywhere in the application.</p>

<h3>Using the client</h3>

<p>Now that we can access the client as a service, we can add calls as desired to UserClientBean to run on the FaceBookRestClient, and extract the data out in a way that's nice to return to our application.  For example:</p>

<pre class="prettyprint"><code class="language-java">public List<Long> getAppFriends()
{
    List<Long> result = new ArrayList<Long>();
    try
    {
        Document d = client.get().friends_getAppUsers();
        Node n = d.getFirstChild();
        while (n != null)
        {
            result.add(Long.parseLong(n.getTextContent()));
            n = n.getNextSibling();
        }
    }
    catch (Exception e)
    {
        log.error("Error retrieving logged in facebook user", e);
    }
    return result;
}

public boolean isFriend(long aFriendId)
{
    try
    {
        FacebookXmlRestClient c = client.get();
        long user = c.users_getLoggedInUser();
        if (user == aFriendId)
        {
            return true;
        }
        else
        {
            Document d = c.friends_areFriends((int) user, (int) aFriendId);
            Node n = d.getElementsByTagName("are_friends").item(0);
            if (n.getTextContent().equals("1"))
            {
                return true;
            }
        }
        return false;
    }
    catch (Exception e)
    {
        log.error("Error determining if users are friends", e);
        return false;
    }
}
</code></pre>

<p>As you may have noticed, the FaceBookRestClient uses ints, while Facebook recommends user ids being stored as longs.  Not very smart huh?  At least using this client, our apps will be ready for that bug fix.</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-03-19-facebook_authentication_in_java</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-03-19 22:48:43</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1360443675585</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>ncchaudhary24@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>117.211.86.74</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-02-10 08:01:15</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;hii ,</p>
<p>thanx for this useful blog ..</p>
<p>i was searching for this since many days , thanx a lot again .</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Sun on JPA</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/03/20/sun_on_jpa.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>A few weeks ago I attended the Sun Tech Days in Sydney.  I was pretty impressed with the breakfast they provided.  In fact, all the food was great.  The whole place had a really geeky feel to it, and I really liked that too.  However, the presentations left me feeling that the whole thing was a waste of time.  To be fair, some of the presentations were good.  It was excellent to hear James Gosling.  But the majority of the presentations I went to were terrible.</p>

<p>I don't think my standards are too high in having this gripe, at one level, Sun provided me with free food and a day where I could mix with like minded people, I shouldn't be complaining.  But it just frustrated me so much because Sun could have done so much more for not only me, but also themselves at this event.  The whole event is one gigantic sales pitch, and I'm ok with that.  I want Sun to get me excited about their products, I want Sun to get me excited about Java development, I want Sun to pitch their best sales pitch at me, do their best to make me want to drop everything that is not Sun, and follow them.  Not that I would necessarily do that, but I at least want Sun to sell themselves to me if I go to an event like this.  But I think they failed to do that.  I'm going to use one particular session, the session on JPA, as an example of how they missed the mark, but most of the sessions I felt were the same.</p>

<p>My expectations from the JPA session were that Sun would sell me JPA.  I love Hibernate, I use it for all my database access, I know how it works intimately, and I am very quick to recommend it as the best tool for ORM to every man and his dog.  The big problem for me is that part of my reason for loving it is based in my ignorance, I've only briefly touched JPA, and I've never used Toplink or JDO, they could all be miles ahead of Hibernate, but I wouldn't know.  This is why I went to JPA session.  I wanted to be given reasons why I should try it, I wanted to be given insights into the future of JPA that will make it the best ORM API to use.  So when the session ended up being JPA101 - This is how to map an entity with annotations, this is how to do inheritance, this is how to write a query in JPAQL, you can imagine my disappointment.</p>

<p>I'm not sure who Sun is expecting to come to their tech days.  But I'll take a guess at the sort of people that do come.  For a start, they are people that take an interest in modern Java frameworks, if they weren't, they wouldn't be at the days.  They are developers, if they aren't developers then they definitely wouldn't be interested in JPA101 anyway.  And they're people that take the initiative to do research and learn about new technologies themselves, otherwise they wouldn't have found out about the tech days to start with.  So, I would expect the people described above to have all had experience with at least one of the leading ORM tools.  A JPA101 would have been way too simple for almost the entire audience.</p>

<p>In want of more meat on JPA, I asked a question about the future of JPA.  "Is it likely that in the future JPA will support collections of basic types, eg Strings, Integers, Dates?".  I was shocked by the presenters response.  It wasn't that he didn't know the answer to the question, he didn't understand the question.  After asking me to repeat the question, he said "well, it does support it".  I said no it doesn't, and someone else in the audience piped up and agreed with me, adding that you could map collections of basic types using TopLink or Hibernate extensions.  To which the presenter replied "there's your answer".  The presenter had no idea.  Anyone with real world experience in an ORM tool would have encountered a time when they would have wanted a collection of basic types, and an expert in JPA would know that JPA doesn't support this.  I wanted to know why it doesn't support it, maybe there's a good reason, maybe they felt there were difficulties in how to specify it and so left it for the next release.  This guy clearly was not an expert in JPA, and clearly had never used JPA in the real world.  I doubt if he had any experience beyond learning enough to give the presentation, it's likely that someone else wrote the presentation and he just went off that persons notes.</p>

<p>So I was very disappointed overall with the Sun Tech Days.  It was marketed at professionals, but most of the sessions were targeted at newbies.  I hope there's someone at Sun that understands JPA, if they can't get that person to give a presentation, maybe they should look into getting local respected industry professionals to give the presentations, that would be a lot more helpful.  Until Sun does that, I don't think I'll return.</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-03-20-sun_on_jpa</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-03-20 18:25:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1214348841788</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Matt Ryall</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>matt@mattryall.net</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.mattryall.net</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>124.170.92.93</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-06-25 09:07:21</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[I suspect one of the reasons that JPA doesn't support persistent collections of objects like Strings is because where bytecode manipulation isn't available, JPA implementations can use subclassing to add the transparent persistence to the objects. This isn't possible with a final class like String or Integer.

Still doesn't justify Sun not having sufficient technical staff at their Tech Days. I found the one I went to very disappointing as well.

]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>JPA 2.0 - New features - Part 1</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/03/24/jpa_2_0_new_features_part_1.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[
In my previous blog post I wrote about asking the JPA presenter at the Sun Tech Days if JPA will support collections of basic types.  I've now done some research of my own and found that most of the features that I miss most in JPA, compared to Hibernate, will be in JPA.<p class="paragraph"/>Let me start by saying that the first version of the Java Persistence API is excellent.  Standardising three major competing vendors of ORM technologies, Hibernate, JDO and Toplink, into one standard would have been by no means an easy task.  It certainly would have been an easy way out for the expert group to produce an API that included only the features they could agree on, but did not include many of the fundamental features of an ORM framework.  I feel however that all the core aspects of ORM concepts have been addressed, the things that were left out were not essential.  This is where JPA 2.0 comes in.  Now that JPA has gained industry acceptance, it is time to fill the standard out, include all those nice to have features and clean it up around the edges.<p class="paragraph"/>The JPA 2.0 specification has yet to be proposed as a JSR, so nothing that I'm about to mention is definitely going to be in there.  All of the information I'm providing is based on presentations that I've read given by the people who will be involved in specifying JPA 2.0.
<h3 class="heading-1-1">Collections of basic and embedded types</h3><p class="paragraph"/>This is the feature that I most miss whenever I use JPA.  I can understand why it may not have been seen as essential to be included in JPA initially, collections of basic types is not strictly an object oriented concept, because basic types are not objects.  Nevertheless, in practice it is data structure frequently used both in relational databases and in object oriented models.<p class="paragraph"/>An example might be tags in a blog.  A tag would not be considered an object, it is simply a keyword used to index blog entries.  The same tag may be applied to multiple blog entries, but if it were removed from all of these blog entries, it would no longer exist in any form.  The concept of a tag is therefore not an object, and hence it would not make sense to map tags as entities in themselves.  Rather, each blog entry would have a set of Strings.  Using hibernate extensions, this is currently how it's done:<p class="paragraph"/>
<pre class="prettyprint"><code class="language-java">@CollectionOfElements
private Set<String> tags;
</code></pre>
<p class="paragraph"/>This can similarly be mapped in TopLink using @BasicCollection.
<h3 class="heading-1-1">Unidirectional one to many</h3><p class="paragraph"/>A feature that follows on from collections of basic types, and would also be very helpful in collections of entities, is unidirectional one to many associations.  JPA currently only supports one to many associations as the inverse end of a many to one association, so the owning side of the association is the many side, and never the one side.  What this means, is if you have a BlogEntry entity, and it has a list of Comment entities, you can't add or remove comments from the blog by operating on the comment list, you have to do it by setting or nullifying the blog property on each comment.<p class="paragraph"/>For example, the following code can't be used to add or remove comments from the blog entry:<p class="paragraph"/>
<pre class="prettyprint"><code class="language-java">blogEntry.getComments().add(comment1);
blogEntry.getComments().remove(comment2);
</code></pre>
<p class="paragraph"/>Rather, it has to be done as follows:<p class="paragraph"/>
<pre class="prettyprint"><code class="language-java">comment1.setBlogEntry(blogEntry);
comment2.setBlogEntry(null);
</code></pre>
<p class="paragraph"/>This is definitely the easier feature to map to databases, as relationships in a database are always owned by the many table.  The many table will have a column, say blog_entry_id, that is a foreign key to the primary key of the blog_entry table.  However, this is not how we like to view things in an object oriented world.  A blog entry is composed of, among other things, comments.  Without a blog entry instance, a comment instance does not conceptually exist, nor does it make sense to ever use the comment outside of the context of using the blog entry.  In this situation, the sensible mapping is to have the blog entry as the owning side, with no reference from the comment to the blog entry.  Comments then only ever get accessed through accessing the entry first, and get created and removed from the blog entry via operating on the comment list.<p class="paragraph"/>A related question I have that is not clear from my research is whether JPA 2.0 will support Hibernate's delete orphan cascade type, or TopLink's private ownership feature, or something different.  Both achieve the same goal but through quite different methods.
<h3 class="heading-1-1">Indexed lists</h3><p class="paragraph"/>A further feature that follows on from the above two is indexed lists.  Seeing as JPA can only support the many side being the owner of an association, the many side also has to be where order is lists is managed.  This means adding a property to our Comment entity, we'll call it index.  If it's a bidirectional relationship, the order of the returned list can be set by specifying index as the property to order the comments by.  Now, if I wanted to move the fifth comment to the top of the comment list, if the one side was the owning side, it would be as simple as:<p class="paragraph"/>
<pre class="prettyprint"><code class="language-java">comments.add(0, comments.remove(4));
</code></pre>
<p class="paragraph"/>However, because the owning side is the many side, it has to be done like this:<p class="paragraph"/>
<pre class="prettyprint"><code class="language-java">for (int i = 0; i < 4; i++)
{
    comments.get(i).setIndex(i + 1);
}
comments.get(4).setIndex(0);
comments.add(0, comments.remove(4));
</code></pre>
<p class="paragraph"/>Note that the last line there is not absolutely necessary, but keeps the comments list is sync with the index properties, should the list want to be continued to be used.<p class="paragraph"/>If JPA 2.0 can support unidirectional one to many associations, it will need to also be able to manage the index of the list on the one side, meaning that it will persist any changes made to the list order to the database, so that the first example above will be all that's needed to move the fifth comment to the top of the list.<p class="paragraph"/>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-03-24-jpa_2_0_new_features_part_1</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-03-24 12:16:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1267796956356</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>a@b.de</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>213.61.69.130</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-03-06 00:49:16</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[in my case DELETE_ORPHAN works on unidirectional OneToMany with EntitxManager.merge() operation, not with saveOrUpdate-<br />
-&gt; total JPA copnform, gread work to hibenate Team !]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1319275056123</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Raúl Raja Martínez</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.facebook.com/raulraja</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>67.160.84.109</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2011-10-22 20:17:36</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;I believe the final name for the annotation is&nbsp;@ElementCollection</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1267796956356</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1381165864655</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>lapdancefactory.com</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>genevavigano@arcor.de</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.lapdancefactory.com/best_sellers.php?a=ldf&amp;attr_id[]=1551</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>50.115.175.120</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-10-08 04:11:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Wrjte more, thats all I have to say. Literally, it seems as 
though you relied on the video to mske your point.
You obviokusly know what youre talking about, why waste your intelligence on just posting videos too your weblog when you could be giving us 
something informatve to read?]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>JSR-666 Extension: Significant whitespace</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/04/08/jsr_666_extension_significant_whitespace.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
In many software development teams that I've worked on, code reviews are done by printing out the code to be reviewed.  This is in turn read and scribbled on with red ink by developers suffering from a delusion that their coding standard is better than mine.  An example of some such code:
</p>

<pre class="prettyprint"><code class="language-java">public boolean equals(Object o)
{
   try
   {
      if (Calendar.getInstance().get(Calendar.MONTH) == 1
            && Calendar.getInstance().get(Calendar.DATE) == 29)
      {
         return true;
      }
      else
      {
         Thread.sleep(10000);
         return new Random().nextBoolean();
      }
   }
   catch (Throwable t)
   {
      // Something must have gone wrong, try again
      return new Random().nextBoolean();
   }
}
</code></pre>

<p>
When reading the above code, the obvious problem that jumps out is that it contains no less than ten curly braces.  When printed for a code review, this is a waste of valuable ink.  The squids of the world have been working overtime to provide the ink needed to print out all the code that needs to be reviewed, it is about time we gave them a break.  I'd therefore like to propose to the <a href="http://fishbowl.pastiche.org/2003/02/03/jsr666">JSR-666 </a> expert group an extension that curly braces be replaced with significant whitespace.
<p>

<p>
The previous code example would become:
</p>

<pre class="prettyprint"><code class="language-java">public boolean equals(Object o)
   try
      if (Calendar.getInstance().get(Calendar.MONTH) == 1
            && Calendar.getInstance().get(Calendar.DATE) == 29)
         return true;
      else
         Thread.sleep(10000);
         return new Random().nextBoolean();
   catch (Throwable t)
      // Something must have gone wrong, try again
      return new Random().nextBoolean();
</code></pre>

<p>
A fine piece of code that would pass any code review.
</p>

<p>
This feature will also solve a number of other problems, for example, it will eliminate the age old argument over whether braces belong on a newline or not.  It will also force developers to write neatly structured code.
</p>

<p>
This feature will not require any JVM changes, but will require compiler changes.  Existing code may need to be changed, however, if the existing code was well formatted to begin with, it should suffice to simply run the following command in vim:
</p>

<pre>
:%s/\{|\}//g
</pre>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-04-08-jsr_666_extension_significant_whitespace</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-04-08 00:20:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1208979082210</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Chris</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>chris@bennettscash.id.au</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.bennettscash.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>202.168.21.107</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-04-24 05:31:22</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[I can't believe you're suggesting Java join the fascist ranks of Python in removing the artist's ability to instil beauty into his/her creations in whatever way they see fit.

Shocked and outraged! Shocked and outraged I say!!]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1209050932810</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>220.233.29.18</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-04-25 01:28:52</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Save the artistic formatting for Perl, it never gets printed out for code reviews anyway because no one can actually read it.&nbsp; But when it comes to a choice between saving the squids of the world, or letting a Java developer live in a fantasy world where he or she is a penniless pauper under the guise of an artist, I say save the squids!!]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1208979082021</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1212205783750</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Alexander Zagniotov</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://javabeans.asia/</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>122.252.14.162</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-05-31 13:49:43</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Hi James,<br />
First of all - well done for keeping the fight alive for the poor little squids!<br />
<br />
But still I want to say that Java needs curly brackets, although in your example here they were really redundant. <br />
<br />
I am afraid that the squids will have to keep on squeezing :(<br />
<br />
cheers]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1209050932810</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1214348521482</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Matt Ryall</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>matt@mattryall.net</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.mattryall.net</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>124.170.92.93</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-06-25 09:02:01</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[As Alexander, points out there are still semantically significant curly braces in Java. Anonymous inner classes are one example.

Good idea, though. Applying the cleanliness ideals of Python to Java would not be a bad idea. :-)]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Fair Trade Coffee in the Sydney CBD</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/04/29/fair_trade_coffee_in_the_sydney_cbd.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
I've chosen the title of this blog post very deliberately because I want people who are looking for fair trade coffee in the Sydney CBD to be able to find something when they search Google for it.
</p>

<img src="./images/blogs/fairtrade.png" align="right"  style="padding-left: 4px; padding-bottom: 4px;" alt="Fair Trade Logo"/>
<p>
I started working in the city a week ago, and one of my first tasks has been to find a coffee shop that sells fair trade coffee.  Of course, there are the big chains, including Starbucks, which incidentally is participating in <a href="http://www.starbucks.com.au/en-AU/_Social+Responsibility/2008+Fair+Trade+Fortnight+Activities.htm">fair trade fortnight</a> in May, and Jamaica Blue, with its <a href="http://www.jamaicablue.com.au/Organic-Fairtrade-Blend/default.aspx">fair trade blend</a>.  But neither of those is really that close to my office, and I've never really liked the coffee from the big chains as much as I do from the small cafes.  So I did a search in Google to see what I could find.
</p>

<p>
I was quite disappointed.  I couldn't find any lists of cafes anywhere, apart from the Oxfam website, and the Fair Trade Association website.  And the only cafes in the CBD they had were Starbucks and Jamaica Blue.
</p>

<p>
After searching a little harder, I found the <a href="http://www.voodooespresso.com/index.php">voodoo coffee company</a>, which supplies a number of cafes in the Sydney CBD, and they have a fair trade blend.  I've emailed them asking them which stores they sell fair trade coffee to, but I <a href="http://www.zondar.com/blog/?p=32">read</a> that on occasion, Pulse Cafe on Kent Street (right near my work) has sold the fair trade blend.
</p>

<p>
Does anyone know of any other cafes in the Sydney CBD that sell fair trade coffee?
</p>

<h3>Update</h3>

I tried out Pulse this morning, and found that they only sell fair trade coffee.  Not only that, but the coffee was really good, and only $2.50.  So my mission is accomplished.  However feel free to add comments of other fair trade coffee places you know of so we can make a comprehensive list.]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-04-29-fair_trade_coffee_in_the_sydney_cbd</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-04-29 01:02:46</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1209447309826</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>indifferent</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>203.11.225.5</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-04-29 15:35:09</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Who cares, really!]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1209457388200</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>220.233.29.18</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-04-29 18:23:08</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Clearly lots of people do, otherwise you would have had no problem leaving your real name with that comment ;)<br />
<br />
From <a href="http://www.worldvision.com.au/wvconnect/content.asp?topicID=97">World Visions website</a>:<br />
<br />
<em>Often their children, even those as young as eight or nine, can be forced to go to work on the plantations to help their families produce a larger crop to make more money. <br />
<br />
The situation is predicted to affect 125 million people, who may already be living below the poverty level, through unemployment, hunger and migration.<br />
</em><br />
I guess when it comes down to it, I would never go out to coffee and not pay my bill, I would never shoplift from a store, I would never try and con anyone out of their money, it's just not right.&nbsp; And so I also won't support third world farmers being ripped off by the western world markets, it's just not right.&nbsp; It's that simple, really.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1209447309826</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1209736389570</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Michael Studman</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>195.137.109.82</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-05-02 23:53:09</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[What you may actually be supporting is the subsidisation of farmers who farm crops which are no longer profitable because of a glut of supply (for coffee, the current oversupply is massive) and who thus use their arable land for the satisfaction of your wealthy tastes rather than more eco-friendly or directly beneficial crops.<br />
<br />
By choosing fair trade goods you may also be enriching supermarkets and vendors who often tap into your desire for doing good by whacking on huge premiums for these products and then sharing only the tiniest fraction of that with the farmers.<br />
<br />
I'm all for ethical choices around food but the merits of fair trade are not as clear or simple as you seem to believe and there are plenty of questionable players getting fat off this gravy train.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1209457388200</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1209740224612</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>220.233.29.18</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-05-03 00:57:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[I totally agree with the caution that needs to be taken when it comes to schemes like fair trade, I did first and second year economics at uni, and its definitely not as simple as people think.&nbsp; However I have read a lot about how fair trade works, and I am satisfied that it is giving the farmers a better deal.<br />
<br />
The reason why fair trade works is because at its heart, it is putting western buyers into direct contact with farming cooperatives, so that the farmers have the chance to negotiate a fair price for their goods.&nbsp; Also as part of the scheme, a &quot;premium&quot; is added to the price of the coffee, and this premium is put back into community projects.<br />
<br />
Fair trade farmers are randomly auditted to ensure that they aren't employing slave labour, or abusing the system in anyway, and so are the community projects.<br />
<br />
As far as the over supply is concerned, I'm don't think fair trade will negatively impact it.&nbsp; What fair trade does effectively is to stop farmers from squeezing their pickers, or their own wages, in order to move the supply curve.&nbsp; Hence the cost of producing coffee increases, and thus supply decreases, because if there is not enough demand to meet the supply, then some farmers will be forced to put their land to other uses.&nbsp; It also should be noted that fair trade doesn't set a fixed price, just a price floor, which affects things roughly in a equivalent way to the minimum wage in Australia.&nbsp; If demand for coffee goes up, because the buyers are in direct contact with the farmers, the farmers are able to sell the coffee at a higher rate, and they receive the profits.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1209736389570</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1282947701518</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Kylie</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>115.128.26.132</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-08-28 08:21:41</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I've had coffee at Pulse a few times (think it has a different name now) and although it is $2.50 and fair-trade i find it pretty inconsistent in quality - i've had a few where they've just re-boiled the milk and left the coffee watery.</p>
<p>BUT on Clarence St (155) near Erskine I have found Opia which sells Toby's Estate.&nbsp; There are no signs up announcing Fairtrade but if you check out the Toby's estate website it explains the concept of Direct Trade as a fairer method than FairTrade.&nbsp; I'm interested to hear others' thoughts on this as it could just be a PR exercise to explain continuing to treat&nbsp;supliers badly?&nbsp; <a href="http://www.tobysestate.com.au/page/sustainability_project.html">http://www.tobysestate.com.au/page/sustainability_project.html</a></p>
<p>&nbsp; And it is a consistently good coffee (say my melburnite taste-buds).&nbsp;</p>
<p>Give it a go and see if we can't all pressure them to put up some DirectTrade/Fairtrade signs to better advertise the issue as for the first few weeks in Sydney I ignored this place assuming the coffee was unfairly purchased:</p>
<p>!<a href="http://www.opia.com.au">www.opia.com.au</a></p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1209447309826</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1282982046311</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>115.70.140.214</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-08-28 17:54:06</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi Kylie,</p>
<p>Yes, the original owners sold the Kent St cafe, but kept the original cafe (which is in Pyrmont), because they found running two too draining on their time.&nbsp; They've switched blends, but according to their website, it's a Toby's Estate Fairtrade blend.&nbsp; It seems at least some of Toby's Estates blends are Fairtrade, and they do boast the Fairtrade logo on their website.</p>
<p>I agree that since the Kent St cafe changed owners, the consistency has gone down.&nbsp; I still go there every day because it's close and convenient to my work.</p>
<p>My opinion on coffees that claim to be ethical is that although there is no guarantee, as long as they are a small boutique roaster, they are probably ok.&nbsp; &nbsp;On the other hand, if it's a mass supplier, then I'd be suspicious, as trading direct with many small farms is going to be very difficult to manage, that is, to ensure that they aren't being taken for a ride by the producers.&nbsp; The larger the roaster, the more small farms they'll have to deal with, and therefore the easier it will be for those farms to use unethical practices like underpaying pickers or using forced child labor.&nbsp; Fairtrade has an audit system, that while it's not perfect, it does give us some confidence, like minimum wage and employment laws in Australia give us confidence about products made in Australia.</p>
<p>Toby's Estate is not a small boutique roaster, so it would be interesting to see what if any processes they have in place to ensure that their producers are acting ethically too.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1282947701518</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1286918470640</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>owenh</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>owenhollands@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>202.124.74.117</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-10-13 08:21:10</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Toby' estate have at least one blend that is fair trade, and put the logo on their about page&nbsp;</p>
<p>http://www.tobysestate.com.au/page/about_us.html</p>
<p>Some of their blends are fair trade certified, although they do make statements about souring coffee beens ethically, only the fair trade ones are audited.</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1282982046311</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1218407964977</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Shane</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>shanefairhall@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>203.97.171.77</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-08-11 08:39:24</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[James, <br />
<br />
<strong>Thank you</strong>. I searched google for &quot;fair trade coffee Sydney&quot;, as I'm heading to Sydney later this week from Wellington and like you want to be able to choose to support a trading system that seeks give consumers the option to support more ethically traded goods.<br />
<br />
Obviously at $2.50 for a coffee, retailers are not making a killing selling this&nbsp; 'premium' product.<br />
<br />
If one wants to look at the issue of the oversupply of coffee, perhaps the focus should be more on the the investment the world's four largest coffee roasters made in establishing the coffee industry in Vietnam, (a climate suitable for growing only cheap low-grade beans to make inferior coffees)<br />
<a href="http://www.coffeehabitat.com/2006/02/the_coffee_cris.html">http://www.coffeehabitat.com/2006/02/the_coffee_cris.html</a><br />
<br />
I will be visiting pulse and if I find any more FT cafes will let you know....]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1284024165486</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Mike</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>oby@live.com.au</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>110.33.101.70</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-09-09 19:22:45</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi All</p>
<p>Cafe Pacific at North Sydney (between Walker and Arthur Sts) sells only Fair Trade coffee, roasted by Newcastle based gourmet coffee company, PeaBerrys.</p>
<p>In response to James' comment above - I&nbsp;agree wholeheartedly.&nbsp; Its important to go for a roasting company that actually has ISO quality certified systems in place and are accredited Fair Trade suppliers.&nbsp; Dan at PeaBerrys can give more info for anyone interested.</p>
<p>Cheers</p>
<p>Mike</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1303348427105</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Suzanne</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>203.3.187.11</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2011-04-21 11:13:47</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Thanks for this - I&nbsp; googled followng a program on ABC about the coffee growers (and a bunch of&nbsp;privileged pommy kids&nbsp;who were &quot;experiencing&quot; their way of life for 5 minutes) - anyway&nbsp;it&nbsp;woke me up (ahem) to the issue.&nbsp; The little church cafe on Queens Square (between Philip and Macquarie) does&nbsp;Tobys Estate and&nbsp;the barista told me&nbsp;it's Fair Trade&nbsp;- $3.00 mind you, but you get a free biscuit along with your appeased conscience.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1303353123999</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Owen</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>owenhollands@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>61.68.127.33</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2011-04-21 12:32:03</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I forgot to mention this earlier. &nbsp;There is a place called &quot;Organic Produce&quot; I think in the Hunter Arcade that sells Toby's Estate Fair Trade certified coffee. &nbsp;If you come in off Pitt st they are on the right as you go up the stairs into the food court.</p>
<p>&nbsp;Owen.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1326333906984</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Brendon</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>brendon.baker@transport.nsw.gov.au</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>147.200.199.39</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-01-12 13:05:06</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>This is still second hit on a Google search for &quot;fair trade coffee in Sydney CBD&quot;, so I thought I'd add a cafe that makes a good fair trade latte.</p>
<p>Live Organics in the MLC&nbsp;Centre (Martin Place) uses only fair trade coffee. They do a fine vege burger too.</p>
<p>Cheers</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>JPA 2.0 - Early Review</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/05/06/jpa_2_0_early_review.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
A few days ago, <a href="http://jcp.org/en/jsr/detail?id=317">JSR-317</a>, the specification request for JPA 2.0, released an <a href="http://jcp.org/aboutJava/communityprocess/edr/jsr317/index.html">early draft review</a> of the specification.  Today I had the chance to skim through it to see what new things it had to offer.
</p>

<p>
Something I commented on in an <a href="2008/03/24/jpa_2_0_new_features_part_1.html">earlier</a> blog post was how they might implement deleting orphan members of an association.  Would they follow TopLink's private collection mapping, or use Hibernate's additional delete orphan cascade type?  It turns out, they chose neither... or rather, they met half way.  The EDR specifies the addition of a boolean <tt>orphanRemoval</tt> attribute on the <tt>@OneToMany</tt> and <tt>@OneToOne</tt> annotations.  So the terminology follows the Hibernate orphan terminology, however hibernate uses a <tt>DELETE_ORPHAN</tt> cascade type.  The method though is more similar to TopLink, which has private ownership as a property of a collection mapping.
</p>

<p>
I don't think that I like this way of doing it.  I don't think it's consistent, if I want a new entity to be persisted just by adding it to a collection, then I specify <tt>cascade=PERSIST</tt>.  But if I want an existing entity to be deleted just by removing it from a collection, then I specify <tt>orphanRemoval=true</tt>.  Cascading persistence to members added to collections and removing orphaned elements are both similar operations, in that they indirectly change the life cycle state of an entity, that occur at flush time, in a cascade like manner.  I think it would be more consistent to say <tt>cascade=ORPHAN_REMOVE</tt>.  The expert group has made a note in the EDR asking for input on which strategy they should use.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-05-06-jpa_2_0_early_review</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-05-06 22:15:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1210096654251</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>sud</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>64.215.87.3</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-05-07 03:57:34</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Consistency is important to keep a reasonable learning curve. Else developers will frequently be going on wild-goose hunts.<br />
<br />
Thanks for pointing this out. Now we hope the EG will take note.&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  <br />]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1210160693703</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>220.233.29.18</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-05-07 21:44:53</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Well, I've let them know, I wrote <a href="pages/jsr_317_edr_feedback.html">this</a> email to them tonight.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1210096654251</wp:comment_parent>
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>RIP #herring</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/05/10/rip_herring.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
#herring, the long standing meeting place for many of ANU's 2004 software engineering graduates, has passed away.  Born in 2002, on the Australian IRC network oz.org, #herring has been a lively channel for keeping in contact, arguing about meaningless topics, and a nice distraction from a busy days work.  #herring, the solid backbone of a friendship group, you will be missed.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-05-10-rip_herring</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-05-10 17:45:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1213182498345</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anton</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>anton@artof2.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://artof2.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.171.76.40</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-06-11 21:08:18</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Maybe they just told you that so you would stop posting to the chat room.<br />
What I'm trying to say is that anouncement could be a red herring<br />
<br />
<br />
Bwa ha ha ha ha<br />
:)]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Google Chrome</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/09/02/google_chrome.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
When I first heard about Google Chrome, I was very skeptical.  Why does this world need another browser to contend with in producing cross browser websites?  If open source is what you want, what's wrong with Firefox?  So I had to read the <a href="http://books.google.com/books?id=8UsqHohwwVYC">Google Chrome comic</a>, and I must admit, it has got me excited.  But there is one feature in there that has got me concerned.
</p>

<p>
Google has suffered a large amount of criticism over the years in relation to privacy.  From <a href="http://www.google-watch.org/krane.html">keeping information on your searches indefinitely</a>, to <a href="http://news.bbc.co.uk/2/hi/business/3602745.stm">reading your email</a>, and most recently, <a href="http://www.nytimes.com/2007/06/01/technology/01private.html">getting too close for some with Street View</a>.
</p>

<p>
One feature that intrigued me in Google Chrome is its location bar searching.  It's very cool, it goes above and beyond the recent trend of other browsers to offer past url's based on title searches, it supports full text searching of pages you've visited.  But, it also offers suggestions of popular pages that you've never visited.  This is cool and convenient, but what does it mean?  Everytime you type something into your address bar in Google Chrome, those words get sent to Google.  This means that even without using Google's search directly, they can still see what you are typing into your address bar, and most users won't realise it.  While that scares me a little, I'm more interested in seeing how the critics will respond to that, are Google up for another onslaught of bad publicity over privacy?
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-09-02-google_chrome</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-09-02 13:57:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Chrome - a new rich client platform?</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/09/03/chrome_a_new_rich_client_platform.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
Just when I finally got a mobile device that was (just) powerful enough to use most websites without pain, what does Google do?  They bring out a new browser, which raises the bar for the minimum requirements needed to run websites.  Ok, sure, there doesn't currently exist any websites that take advantage of Chromes performance.  But I think you'll find that Google will start releasing enhanced versions of their apps targeted at Chrome, and, if Google are lucky and play their cards right, people will flock to switch to Chrome in order to use the cool new features of the Chrome version of their apps.  And then what use will my the browser on my iPhone be?
</p>

<p>
But the thing to note about what Google have done here, is that they have created an <strike>improved</strike> new rich client platform for the web.  As a response to the difficulties of using JavaScript and HTML to create rich client interfaces on the web, Adobe released Flex and Sun released JavaFX.  These technologies have a chance at success due to the existing widespread availability of Flash and Java, respectively.  But what they have against them is that they don't play well with the existing web ecosystem.  For example, a search engine can't index a Flex or JavaFX site.  However, it can index a well written AJAX site.  The back button doesn't work on Flex and JavaFX sites, but again, can work in a well written AJAX site.  Copying and pasting URL's is a similar issue.
</p>

<p>
Google have addressed the exact same problem that Adobe and Sun have tried to address, but Google has taken the opposite approach.  Rather than rewrite the protocols and standards used in web based applications, they've beefed up the client to make better use of the existing protocols and standards.  If V8 is really up to standard performance wise, who knows, you may find soon when visiting YouTube with Chrome, that you don't need a flash player, the videos are rendered by JavaScript<sup>1</sup>.  You may also find something similar for Google Street View.
</p>

<p>
<sup>1</sup> Maybe this is a little far fetched, but, if they were to write some JavaScript extensions, which they can do now, and everyone would love because then they can ditch Adobe and Flash, it just may be possible.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-09-03-chrome_a_new_rich_client_platform</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-09-03 13:30:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1223590613541</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Pete</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>pdroper@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>152.91.9.133</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-10-10 09:16:53</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>James,</p>
<p>You should set up a chat/forum section on this page for those who visit more often....</p>
<p>Pete</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>List of SuppressWarnings arguments</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/10/30/list_of_suppresswarnings_arguments.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>I hate compiler warnings showing in my IDE.  It's messy, and it usually indicates that something is bad.  But not always.  Sometimes, when working with third party libraries, you can't avoid warnings like unchecked assignments.  These are easy to get around though, by using the @SuppressWarnings annotation.  The unchecked assignment warning is a standard Java compiler warning.  A quick Google will reveal that the name of the unchecked assignment warning to pass to @SuppressWarnings is "unchecked".</p>

<p>IDE's however tend to flag warnings for much more than what the Java compiler flags warnings for.  An example that I encountered today is in unit tests, if you have no assertions in your unit test, IDEA will flag a warning telling you so.  In my case however, I was using mockito, and my assertions were in the form of verify calls.  IDEA does not yet understand mockito, so I am faced with compiler warnings in my code, which, as I said before, I hate.  Surely I can use @SuppressWarnings to suppress this warning, but what's its name?  Google didn't help me at all here, so I decided to do a little investigation.</p>

<p>After writing a quick shell script that unpacked IDEAs jar files and grepped for the description of the warning, I found that the code that generates these warnings is an IDEA plugin called <a href="http://plugins.intellij.net/plugin/?id=94">InspectionGadgets</a>.  I found that each warning was checked for by sub classes of <tt>com.siyeh.ig.BaseInspection</tt>, and that the name of the warning, and its description, can be obtained by instantiating each sub class, and calling methods on them.  In the case of my test method with no assertions warning, the class that flagged this was <tt>com.siyeh.ig.junit.TestMethodWithoutAssertionInspection</tt>, and the name of the warning was <tt>JUnitTestMethodWithNoAssertions</tt>.  I can now suppress my warning.</p>

<p>All that work was probably too much to do for each time that I want to suppress an IDEA warning.  So I decided to find every warning, and store it in a table.  Obviously I wasn't going to do this manually, so using <a href="http://www.velocityreviews.com/forums/t137693-find-all-implementing-classes-in-classpath.html">this</a> neat utility for finding all the classes on the classpath, with a few modifications to limit where it searched, I was able to generate a table of every warning that IDEA can flag.  Here it is, sorted in alphabetical order of the description:</p>

<table width="99%" cellspacing="0" cellpadding="4">
<thead>
<tr><th>Warning Description</th><th>Warning Name</th></tr>
</thead>
<tbody>
<tr class="odd small"><td>"Magic character"</td><td>MagicCharacter</td></tr>
<tr class="even small"><td>"Magic number"</td><td>MagicNumber</td></tr>
<tr class="odd small"><td>'Comparator.compare()' method does not use parameter</td><td>ComparatorMethodParameterNotUsed</td></tr>
<tr class="even small"><td>'Connection.prepare*()' call with non-constant string</td><td>JDBCPrepareStatementWithNonConstantString</td></tr>
<tr class="odd small"><td>'Iterator.hasNext()' which calls 'next()'</td><td>IteratorHasNextCallsIteratorNext</td></tr>
<tr class="even small"><td>'Iterator.next()' which can't throw 'NoSuchElementException'</td><td>IteratorNextCanNotThrowNoSuchElementException</td></tr>
<tr class="odd small"><td>'Statement.execute()' call with non-constant string</td><td>JDBCExecuteWithNonConstantString</td></tr>
<tr class="even small"><td>'String.equals("")'</td><td>StringEqualsEmptyString</td></tr>
<tr class="odd small"><td>'StringBuffer' may be 'StringBuilder' (JDK 5.0 only)</td><td>StringBufferMayBeStringBuilder</td></tr>
<tr class="even small"><td>'StringBuffer.toString()' in concatenation</td><td>StringBufferToStringInConcatenation</td></tr>
<tr class="odd small"><td>'assert' statement</td><td>AssertStatement</td></tr>
<tr class="even small"><td>'assertEquals()' between objects of inconvertible types</td><td>AssertEqualsBetweenInconvertibleTypes</td></tr>
<tr class="odd small"><td>'await()' not in loop</td><td>AwaitNotInLoop</td></tr>
<tr class="even small"><td>'await()' without corresponding 'signal()'</td><td>AwaitWithoutCorrespondingSignal</td></tr>
<tr class="odd small"><td>'break' statement</td><td>BreakStatement</td></tr>
<tr class="even small"><td>'break' statement with label</td><td>BreakStatementWithLabel</td></tr>
<tr class="odd small"><td>'catch' generic class</td><td>CatchGenericClass</td></tr>
<tr class="even small"><td>'clone()' does not call 'super.clone()'</td><td>CloneDoesntCallSuperClone</td></tr>
<tr class="odd small"><td>'clone()' does not declare 'CloneNotSupportedException'</td><td>CloneDoesntDeclareCloneNotSupportedException</td></tr>
<tr class="even small"><td>'clone()' instantiates objects with constructor</td><td>CloneCallsConstructors</td></tr>
<tr class="odd small"><td>'clone()' method in non-Cloneable class</td><td>CloneInNonCloneableClass</td></tr>
<tr class="even small"><td>'compareto()' instead of 'compareTo()'</td><td>MisspelledCompareTo</td></tr>
<tr class="odd small"><td>'continue' or 'break' inside 'finally' block</td><td>ContinueOrBreakFromFinallyBlock</td></tr>
<tr class="even small"><td>'continue' statement</td><td>ContinueStatement</td></tr>
<tr class="odd small"><td>'continue' statement with label</td><td>ContinueStatementWithLabel</td></tr>
<tr class="even small"><td>'default' not last case in 'switch'</td><td>DefaultNotLastCaseInSwitch</td></tr>
<tr class="odd small"><td>'equal()' instead of 'equals()'</td><td>MisspelledEquals</td></tr>
<tr class="even small"><td>'equals()' between objects of inconvertible types</td><td>EqualsBetweenInconvertibleTypes</td></tr>
<tr class="odd small"><td>'equals()' called on array type</td><td>ArrayEquals</td></tr>
<tr class="even small"><td>'equals()' called on java.math.BigDecimal</td><td>BigDecimalEquals</td></tr>
<tr class="odd small"><td>'equals()' method which does not check class of parameter</td><td>EqualsWhichDoesntCheckParameterClass</td></tr>
<tr class="even small"><td>'equals()' or 'hashCode()' called on java.net.URL object</td><td>EqualsHashCodeCalledOnUrl</td></tr>
<tr class="odd small"><td>'final' class</td><td>FinalClass</td></tr>
<tr class="even small"><td>'final' method</td><td>FinalMethod</td></tr>
<tr class="odd small"><td>'final' method in 'final' class</td><td>FinalMethodInFinalClass</td></tr>
<tr class="even small"><td>'finalize()' called explicitly</td><td>FinalizeCalledExplicitly</td></tr>
<tr class="odd small"><td>'finalize()' declaration</td><td>FinalizeDeclaration</td></tr>
<tr class="even small"><td>'finalize()' does not call 'super.finalize()'</td><td>FinalizeDoesntCallSuperFinalize</td></tr>
<tr class="odd small"><td>'finalize()' not declared 'protected'</td><td>FinalizeNotProtected</td></tr>
<tr class="even small"><td>'finally' block which can not complete normally</td><td>finally</td></tr>
<tr class="odd small"><td>'for' loop may be replaced by 'while' loop</td><td>ForLoopReplaceableByWhile</td></tr>
<tr class="even small"><td>'for' loop replaceable by 'for each'</td><td>ForLoopReplaceableByForEach</td></tr>
<tr class="odd small"><td>'for' loop where update or condition does not use loop variable</td><td>ForLoopThatDoesntUseLoopVariable</td></tr>
<tr class="even small"><td>'for' loop with missing components</td><td>ForLoopWithMissingComponent</td></tr>
<tr class="odd small"><td>'hashcode()' instead of 'hashCode()'</td><td>MisspelledHashcode</td></tr>
<tr class="even small"><td>'if' statement with identical branches</td><td>IfStatementWithIdenticalBranches</td></tr>
<tr class="odd small"><td>'if' statement with negated condition</td><td>IfStatementWithNegatedCondition</td></tr>
<tr class="even small"><td>'if' statement with too many branches</td><td>IfStatementWithTooManyBranches</td></tr>
<tr class="odd small"><td>'indexOf()' expression is replaceable by 'contains()'</td><td>ListIndexOfReplaceableByContains</td></tr>
<tr class="even small"><td>'instanceof' a concrete class</td><td>InstanceofInterfaces</td></tr>
<tr class="odd small"><td>'instanceof' check for 'this'</td><td>InstanceofThis</td></tr>
<tr class="even small"><td>'instanceof' on 'catch' parameter</td><td>InstanceofCatchParameter</td></tr>
<tr class="odd small"><td>'instanceof' with incompatible interface</td><td>InstanceofIncompatibleInterface</td></tr>
<tr class="even small"><td>'notify()'  or 'notifyAll()' called on java.util.concurrent.locks.Condition object</td><td>NotifyCalledOnCondition</td></tr>
<tr class="odd small"><td>'notify()' or 'notifyAll()' while not synced</td><td>NotifyNotInSynchronizedContext</td></tr>
<tr class="even small"><td>'notify()' or 'notifyAll()' without corresponding state change</td><td>NakedNotify</td></tr>
<tr class="odd small"><td>'notify()' without corresponding 'wait()'</td><td>NotifyWithoutCorrespondingWait</td></tr>
<tr class="even small"><td>'private' method declared 'final'</td><td>FinalPrivateMethod</td></tr>
<tr class="odd small"><td>'protected' member in 'final' class</td><td>ProtectedMemberInFinalClass</td></tr>
<tr class="even small"><td>'public' constructor in non-public class</td><td>PublicConstructorInNonPublicClass</td></tr>
<tr class="odd small"><td>'readObject()' or 'writeObject()' not declared 'private'</td><td>NonPrivateSerializationMethod</td></tr>
<tr class="even small"><td>'readResolve()' or 'writeReplace()' not declared 'protected'</td><td>ReadResolveAndWriteReplaceProtected</td></tr>
<tr class="odd small"><td>'return' inside 'finally' block</td><td>ReturnInsideFinallyBlock</td></tr>
<tr class="even small"><td>'serialPersistentFields' field not declared 'private static final ObjectStreamField[]'</td><td>SerialPersistentFieldsWithWrongSignature</td></tr>
<tr class="odd small"><td>'serialVersionUID' field not declared 'private static final long'</td><td>SerialVersionUIDWithWrongSignature</td></tr>
<tr class="even small"><td>'setUp()' does not call 'super.setUp()'</td><td>SetUpDoesntCallSuperSetUp</td></tr>
<tr class="odd small"><td>'setUp()' with incorrect signature</td><td>SetUpWithIncorrectSignature</td></tr>
<tr class="even small"><td>'setup()' instead of 'setUp()'</td><td>MisspelledSetUp</td></tr>
<tr class="odd small"><td>'signal()' without corresponding 'await()'</td><td>SignalWithoutCorrespondingAwait</td></tr>
<tr class="even small"><td>'size() == 0' replaceable by 'isEmpty()'</td><td>SizeReplaceableByIsEmpty</td></tr>
<tr class="odd small"><td>'static' method declared 'final'</td><td>FinalStaticMethod</td></tr>
<tr class="even small"><td>'static', non-'final' field</td><td>StaticNonFinalField</td></tr>
<tr class="odd small"><td>'suite()' method not declared 'static'</td><td>SuiteNotDeclaredStatic</td></tr>
<tr class="even small"><td>'switch' statement</td><td>SwitchStatement</td></tr>
<tr class="odd small"><td>'switch' statement with too few branches</td><td>SwitchStatementWithTooFewBranches</td></tr>
<tr class="even small"><td>'switch' statement with too low of a branch density</td><td>SwitchStatementDensity</td></tr>
<tr class="odd small"><td>'switch' statement with too many branches</td><td>SwitchStatementWithTooManyBranches</td></tr>
<tr class="even small"><td>'switch' statement without 'default' branch</td><td>SwitchStatementWithoutDefaultBranch</td></tr>
<tr class="odd small"><td>'synchronized' method</td><td>SynchronizedMethod</td></tr>
<tr class="even small"><td>'tearDown()' does not call 'super.tearDown()'</td><td>TearDownDoesntCallSuperTearDown</td></tr>
<tr class="odd small"><td>'tearDown()' with incorrect signature</td><td>TearDownWithIncorrectSignature</td></tr>
<tr class="even small"><td>'teardown()' instead of 'tearDown()'</td><td>MisspelledTearDown</td></tr>
<tr class="odd small"><td>'this' reference escaped in object construction</td><td>ThisEscapedInObjectConstruction</td></tr>
<tr class="even small"><td>'throw' caught by containing 'try' statement</td><td>ThrowCaughtLocally</td></tr>
<tr class="odd small"><td>'throw' inside 'catch' block which ignores the caught exception</td><td>ThrowInsideCatchBlockWhichIgnoresCaughtException</td></tr>
<tr class="even small"><td>'throw' inside 'finally' block</td><td>ThrowFromFinallyBlock</td></tr>
<tr class="odd small"><td>'tostring()' instead of 'toString()'</td><td>MisspelledToString</td></tr>
<tr class="even small"><td>'wait()' called on java.util.concurrent.locks.Condition object</td><td>WaitCalledOnCondition</td></tr>
<tr class="odd small"><td>'wait()' not in loop</td><td>WaitNotInLoop</td></tr>
<tr class="even small"><td>'wait()' or 'await()' without timeout</td><td>WaitOrAwaitWithoutTimeout</td></tr>
<tr class="odd small"><td>'wait()' while holding two locks</td><td>WaitWhileHoldingTwoLocks</td></tr>
<tr class="even small"><td>'wait()' while not synced</td><td>WaitWhileNotSynced</td></tr>
<tr class="odd small"><td>'wait()' without corresponding 'notify()'</td><td>WaitWithoutCorrespondingNotify</td></tr>
<tr class="even small"><td>'while' loop replaceable by 'for each'</td><td>WhileLoopReplaceableByForEach</td></tr>
<tr class="odd small"><td>* import</td><td>OnDemandImport</td></tr>
<tr class="even small"><td>Abstract class extends concrete class</td><td>AbstractClassExtendsConcreteClass</td></tr>
<tr class="odd small"><td>Abstract class which has no concrete subclass</td><td>AbstractClassNeverImplemented</td></tr>
<tr class="even small"><td>Abstract class which has only one direct inheritor</td><td>AbstractClassWithOnlyOneDirectInheritor</td></tr>
<tr class="odd small"><td>Abstract class without abstract methods</td><td>AbstractClassWithoutAbstractMethods</td></tr>
<tr class="even small"><td>Abstract method call in constructor</td><td>AbstractMethodCallInConstructor</td></tr>
<tr class="odd small"><td>Abstract method overrides abstract method</td><td>AbstractMethodOverridesAbstractMethod</td></tr>
<tr class="even small"><td>Abstract method overrides concrete method</td><td>AbstractMethodOverridesConcreteMethod</td></tr>
<tr class="odd small"><td>Abstract method with missing implementations</td><td>AbstractMethodWithMissingImplementations</td></tr>
<tr class="even small"><td>Access of system properties</td><td>AccessOfSystemProperties</td></tr>
<tr class="odd small"><td>Access to non thread-safe static field from instance</td><td>AccessToNonThreadSafeStaticFieldFromInstance</td></tr>
<tr class="even small"><td>Access to static field locked on instance data</td><td>AccessToStaticFieldLockedOnInstance</td></tr>
<tr class="odd small"><td>Accessing a non-public field of another object</td><td>AccessingNonPublicFieldOfAnotherObject</td></tr>
<tr class="even small"><td>Annotation</td><td>Annotation</td></tr>
<tr class="odd small"><td>Annotation class</td><td>AnnotationClass</td></tr>
<tr class="even small"><td>Annotation naming convention</td><td>AnnotationNamingConvention</td></tr>
<tr class="odd small"><td>Anonymous class variable hides variable in containing method</td><td>AnonymousClassVariableHidesContainingMethodVariable</td></tr>
<tr class="even small"><td>Anonymous inner class</td><td>AnonymousInnerClass</td></tr>
<tr class="odd small"><td>Anonymous inner class may be a named static inner class</td><td>AnonymousInnerClassMayBeStatic</td></tr>
<tr class="even small"><td>Anonymous inner class with too many methods</td><td>AnonymousInnerClassWithTooManyMethods</td></tr>
<tr class="odd small"><td>Arithmetic operation on volatile field</td><td>ArithmeticOnVolatileField</td></tr>
<tr class="even small"><td>Array.length in loop condition</td><td>ArrayLengthInLoopCondition</td></tr>
<tr class="odd small"><td>Assignment replaceable with operator assignment</td><td>AssignmentReplaceableWithOperatorAssignment</td></tr>
<tr class="even small"><td>Assignment to 'for' loop parameter</td><td>AssignmentToForLoopParameter</td></tr>
<tr class="odd small"><td>Assignment to 'null'</td><td>AssignmentToNull</td></tr>
<tr class="even small"><td>Assignment to Collection or array field from parameter</td><td>AssignmentToCollectionOrArrayFieldFromParameter</td></tr>
<tr class="odd small"><td>Assignment to Date or Calendar field from parameter</td><td>AssignmentToDateFieldFromParameter</td></tr>
<tr class="even small"><td>Assignment to catch block parameter</td><td>AssignmentToCatchBlockParameter</td></tr>
<tr class="odd small"><td>Assignment to method parameter</td><td>AssignmentToMethodParameter</td></tr>
<tr class="even small"><td>Assignment to static field from instance method</td><td>AssignmentToStaticFieldFromInstanceMethod</td></tr>
<tr class="odd small"><td>Assignment used as condition</td><td>AssignmentUsedAsCondition</td></tr>
<tr class="even small"><td>Auto-boxing</td><td>AutoBoxing</td></tr>
<tr class="odd small"><td>Auto-unboxing</td><td>AutoUnboxing</td></tr>
<tr class="even small"><td>Boolean constructor call</td><td>BooleanConstructorCall</td></tr>
<tr class="odd small"><td>Boolean method name must start with question word</td><td>BooleanMethodNameMustStartWithQuestion</td></tr>
<tr class="even small"><td>Busy wait</td><td>BusyWait</td></tr>
<tr class="odd small"><td>C-style array declaration</td><td>CStyleArrayDeclaration</td></tr>
<tr class="even small"><td>Call to 'Collection.toArray()' with zero-length array argument</td><td>ToArrayCallWithZeroLengthArrayArgument</td></tr>
<tr class="odd small"><td>Call to 'Date.toString()'</td><td>CallToDateToString</td></tr>
<tr class="even small"><td>Call to 'Runtime.exec()'</td><td>CallToRuntimeExecWithNonConstantString</td></tr>
<tr class="odd small"><td>Call to 'String.compareTo()'</td><td>CallToStringCompareTo</td></tr>
<tr class="even small"><td>Call to 'String.concat()' can be replaced by '+'</td><td>CallToStringConcatCanBeReplacedByOperator</td></tr>
<tr class="odd small"><td>Call to 'String.equals()'</td><td>CallToStringEquals</td></tr>
<tr class="even small"><td>Call to 'String.equalsIgnoreCase()'</td><td>CallToStringEqualsIgnoreCase</td></tr>
<tr class="odd small"><td>Call to 'String.toUpperCase()' or 'toLowerCase()' without a Locale</td><td>StringToUpperCaseOrToLowerCaseWithoutLocale</td></tr>
<tr class="even small"><td>Call to 'System.exit()' or related methods</td><td>CallToSystemExit</td></tr>
<tr class="odd small"><td>Call to 'System.getenv()'</td><td>CallToSystemGetenv</td></tr>
<tr class="even small"><td>Call to 'System.loadLibrary()' with non-constant string</td><td>LoadLibraryWithNonConstantString</td></tr>
<tr class="odd small"><td>Call to 'System.runFinalizersOnExit()'</td><td>CallToSystemRunFinalizersOnExit</td></tr>
<tr class="even small"><td>Call to 'System.setSecurityManager()'</td><td>CallToSystemSetSecurityManager</td></tr>
<tr class="odd small"><td>Call to 'Thread.dumpStack()'</td><td>CallToThreadDumpStack</td></tr>
<tr class="even small"><td>Call to 'Thread.run()'</td><td>CallToThreadRun</td></tr>
<tr class="odd small"><td>Call to 'Thread.setPriority()'</td><td>CallToThreadSetPriority</td></tr>
<tr class="even small"><td>Call to 'Thread.sleep()' while synchronized</td><td>SleepWhileHoldingLock</td></tr>
<tr class="odd small"><td>Call to 'Thread.start()' during object construction</td><td>CallToThreadStartDuringObjectConstruction</td></tr>
<tr class="even small"><td>Call to 'Thread.stop()', 'suspend()' or 'resume()'</td><td>CallToThreadStopSuspendOrResumeManager</td></tr>
<tr class="odd small"><td>Call to 'Thread.yield()'</td><td>CallToThreadYield</td></tr>
<tr class="even small"><td>Call to 'Time.toString()'</td><td>CallToTimeToString</td></tr>
<tr class="odd small"><td>Call to 'intern()' on String constant</td><td>ConstantStringIntern</td></tr>
<tr class="even small"><td>Call to 'notify()' instead of 'notifyAll()'</td><td>CallToNotifyInsteadOfNotifyAll</td></tr>
<tr class="odd small"><td>Call to 'printStackTrace()'</td><td>CallToPrintStackTrace</td></tr>
<tr class="even small"><td>Call to 'signal()' instead of 'signalAll()'</td><td>CallToSignalInsteadOfSignalAll</td></tr>
<tr class="odd small"><td>Call to Numeric 'toString()'</td><td>CallToNumericToString</td></tr>
<tr class="even small"><td>Call to String.replaceAll(".", ...)</td><td>ReplaceAllDot</td></tr>
<tr class="odd small"><td>Call to a native method while locked</td><td>CallToNativeMethodWhileLocked</td></tr>
<tr class="even small"><td>Call to default 'toString()'</td><td>ObjectToString</td></tr>
<tr class="odd small"><td>Call to simple getter from within class</td><td>CallToSimpleGetterFromWithinClass</td></tr>
<tr class="even small"><td>Call to simple setter from within class</td><td>CallToSimpleSetterFromWithinClass</td></tr>
<tr class="odd small"><td>Calls to 'System.gc()' or 'Runtime.gc()'</td><td>CallToSystemGC</td></tr>
<tr class="even small"><td>Cast conflicts with 'instanceof'</td><td>CastConflictsWithInstanceof</td></tr>
<tr class="odd small"><td>Cast to a concrete class</td><td>CastToConcreteClass</td></tr>
<tr class="even small"><td>Casting to incompatible interface</td><td>CastToIncompatibleInterface</td></tr>
<tr class="odd small"><td>Caught exception is immediately rethrown</td><td>CaughtExceptionImmediatelyRethrown</td></tr>
<tr class="even small"><td>Chain of 'instanceof' checks</td><td>ChainOfInstanceofChecks</td></tr>
<tr class="odd small"><td>Chained equality comparisons</td><td>ChainedEqualityComparisons</td></tr>
<tr class="even small"><td>Chained method calls</td><td>ChainedMethodCall</td></tr>
<tr class="odd small"><td>Channel opened but not safely closed</td><td>ChannelOpenedButNotSafelyClosed</td></tr>
<tr class="even small"><td>Character comparison</td><td>CharacterComparison</td></tr>
<tr class="odd small"><td>Checked exception class</td><td>CheckedExceptionClass</td></tr>
<tr class="even small"><td>Class escapes defined scope</td><td>ClassEscapesDefinedScope</td></tr>
<tr class="odd small"><td>Class explicitly extends a Collection class</td><td>ClassExtendsConcreteCollection</td></tr>
<tr class="even small"><td>Class explicitly extends java.lang.Object</td><td>ClassExplicitlyExtendsObject</td></tr>
<tr class="odd small"><td>Class explicitly extends java.lang.Thread</td><td>ClassExplicitlyExtendsThread</td></tr>
<tr class="even small"><td>Class extends annotation interface</td><td>ClassExplicitlyAnnotation</td></tr>
<tr class="odd small"><td>Class extends utility class</td><td>ExtendsUtilityClass</td></tr>
<tr class="even small"><td>Class may be interface</td><td>ClassMayBeInterface</td></tr>
<tr class="odd small"><td>Class name differs from file name</td><td>ClassNameDiffersFromFileName</td></tr>
<tr class="even small"><td>Class name prefixed with package name</td><td>ClassNamePrefixedWithPackageName</td></tr>
<tr class="odd small"><td>Class name same as ancestor name</td><td>ClassNameSameAsAncestorName</td></tr>
<tr class="even small"><td>Class naming convention</td><td>ClassNamingConvention</td></tr>
<tr class="odd small"><td>Class references one of its subclasses</td><td>ClassReferencesSubclass</td></tr>
<tr class="even small"><td>Class too deep in inheritance tree</td><td>ClassTooDeepInInheritanceTree</td></tr>
<tr class="odd small"><td>Class with multiple loggers</td><td>ClassWithMultipleLoggers</td></tr>
<tr class="even small"><td>Class with too many constructors</td><td>ClassWithTooManyConstructors</td></tr>
<tr class="odd small"><td>Class with too many fields</td><td>ClassWithTooManyFields</td></tr>
<tr class="even small"><td>Class with too many methods</td><td>ClassWithTooManyMethods</td></tr>
<tr class="odd small"><td>Class without 'toString()'</td><td>ClassWithoutToString</td></tr>
<tr class="even small"><td>Class without constructor</td><td>ClassWithoutConstructor</td></tr>
<tr class="odd small"><td>Class without logger</td><td>ClassWithoutLogger</td></tr>
<tr class="even small"><td>Class without no-arg constructor</td><td>ClassWithoutNoArgConstructor</td></tr>
<tr class="odd small"><td>Class without package statement</td><td>ClassWithoutPackageStatement</td></tr>
<tr class="even small"><td>ClassLoader instantiation</td><td>ClassLoaderInstantiation</td></tr>
<tr class="odd small"><td>Cloneable class in secure context</td><td>CloneableClassInSecureContext</td></tr>
<tr class="even small"><td>Cloneable class without 'clone()'</td><td>CloneableClassWithoutClone</td></tr>
<tr class="odd small"><td>Collection added to self</td><td>CollectionAddedToSelf</td></tr>
<tr class="even small"><td>Collection declared by class, not interface</td><td>CollectionDeclaredAsConcreteClass</td></tr>
<tr class="odd small"><td>Collection without initial capacity</td><td>CollectionWithoutInitialCapacity</td></tr>
<tr class="even small"><td>Comparable implemented but 'equals()' not overridden</td><td>ComparableImplementedButEqualsNotOverridden</td></tr>
<tr class="odd small"><td>Comparator class not declared Serializable</td><td>ComparatorNotSerializable</td></tr>
<tr class="even small"><td>Comparison of 'short' and 'char' values</td><td>ComparisonOfShortAndChar</td></tr>
<tr class="odd small"><td>Comparison to Double.NaN or Float.NaN</td><td>ComparisonToNaN</td></tr>
<tr class="even small"><td>Concatenation with empty string</td><td>ConcatenationWithEmptyString</td></tr>
<tr class="odd small"><td>Conditional expression (?:)</td><td>ConditionalExpression</td></tr>
<tr class="even small"><td>Conditional expression with identical branches</td><td>ConditionalExpressionWithIdenticalBranches</td></tr>
<tr class="odd small"><td>Conditional expression with negated condition</td><td>ConditionalExpressionWithNegatedCondition</td></tr>
<tr class="even small"><td>Conditional that can be simplified to && or ||</td><td>SimplifiableConditionalExpression</td></tr>
<tr class="odd small"><td>Confusing 'else' branch</td><td>ConfusingElseBranch</td></tr>
<tr class="even small"><td>Confusing 'main()' method</td><td>ConfusingMainMethod</td></tr>
<tr class="odd small"><td>Confusing 'null' argument to var-arg method</td><td>NullArgumentToVariableArgMethod</td></tr>
<tr class="even small"><td>Confusing floating-point literal</td><td>ConfusingFloatingPointLiteral</td></tr>
<tr class="odd small"><td>Confusing octal escape sequence</td><td>ConfusingOctalEscapeSequence</td></tr>
<tr class="even small"><td>Confusing primitive array argument to var-arg method</td><td>PrimitiveArrayArgumentToVariableArgMethod</td></tr>
<tr class="odd small"><td>Connection opened but not safely closed</td><td>ConnectionOpenedButNotSafelyClosed</td></tr>
<tr class="even small"><td>Constant StringBuffer may be String</td><td>StringBufferReplaceableByString</td></tr>
<tr class="odd small"><td>Constant call to java.lang.Math or StrictMath</td><td>ConstantMathCall</td></tr>
<tr class="even small"><td>Constant conditional expression</td><td>ConstantConditionalExpression</td></tr>
<tr class="odd small"><td>Constant declared in abstract class</td><td>ConstantDeclaredInAbstractClass</td></tr>
<tr class="even small"><td>Constant declared in interface</td><td>ConstantDeclaredInInterface</td></tr>
<tr class="odd small"><td>Constant if statement</td><td>ConstantIfStatement</td></tr>
<tr class="even small"><td>Constant naming convention</td><td>ConstantNamingConvention</td></tr>
<tr class="odd small"><td>Constant on left side of comparison</td><td>ConstantOnLeftSideOfComparison</td></tr>
<tr class="even small"><td>Constant on right side of comparison</td><td>ConstantOnRightSideOfComparison</td></tr>
<tr class="odd small"><td>Constructor not 'protected' in 'abstract' class</td><td>ConstructorNotProtectedInAbstractClass</td></tr>
<tr class="even small"><td>Constructor with too many parameters</td><td>ConstructorWithTooManyParameters</td></tr>
<tr class="odd small"><td>Control flow statement without braces</td><td>ControlFlowStatementWithoutBraces</td></tr>
<tr class="even small"><td>Covariant 'compareTo()'</td><td>CovariantCompareTo</td></tr>
<tr class="odd small"><td>Covariant 'equals()'</td><td>CovariantEquals</td></tr>
<tr class="even small"><td>Custom ClassLoader</td><td>CustomClassloader</td></tr>
<tr class="odd small"><td>Custom SecurityManager</td><td>CustomSecurityManager</td></tr>
<tr class="even small"><td>Deserializable class in secure context</td><td>DeserializableClassInSecureContext</td></tr>
<tr class="odd small"><td>Design for extension</td><td>DesignForExtension</td></tr>
<tr class="even small"><td>Division by zero</td><td>divzero</td></tr>
<tr class="odd small"><td>Double negation</td><td>DoubleNegation</td></tr>
<tr class="even small"><td>Double-checked locking</td><td>DoubleCheckedLocking</td></tr>
<tr class="odd small"><td>Duplicate condition in 'if' statement</td><td>DuplicateCondition</td></tr>
<tr class="even small"><td>Duplicate condition on '&&' or '||'</td><td>DuplicateBooleanBranch</td></tr>
<tr class="odd small"><td>Empty 'catch' block</td><td>EmptyCatchBlock</td></tr>
<tr class="even small"><td>Empty 'finally' block</td><td>EmptyFinallyBlock</td></tr>
<tr class="odd small"><td>Empty 'synchronized' statement</td><td>EmptySynchronizedStatement</td></tr>
<tr class="even small"><td>Empty 'try' block</td><td>EmptyTryBlock</td></tr>
<tr class="odd small"><td>Empty class</td><td>EmptyClass</td></tr>
<tr class="even small"><td>Empty class initializer</td><td>EmptyClassInitializer</td></tr>
<tr class="odd small"><td>Enum 'switch' statement that misses case</td><td>EnumSwitchStatementWhichMissesCases</td></tr>
<tr class="even small"><td>Enumerated class</td><td>EnumClass</td></tr>
<tr class="odd small"><td>Enumerated class naming convention</td><td>EnumeratedClassNamingConvention</td></tr>
<tr class="even small"><td>Enumerated constant naming convention</td><td>EnumeratedConstantNamingConvention</td></tr>
<tr class="odd small"><td>Enumeration can be iteration</td><td>EnumerationCanBeIteration</td></tr>
<tr class="even small"><td>Exception class name does not end with 'Exception'</td><td>ExceptionClassNameDoesntEndWithException</td></tr>
<tr class="odd small"><td>Extended 'for' statement</td><td>ForeachStatement</td></tr>
<tr class="even small"><td>Externalizable class with 'readObject()' or 'writeObject()'</td><td>ExternalizableClassWithSerializationMethods</td></tr>
<tr class="odd small"><td>Fallthrough in 'switch' statement</td><td>fallthrough</td></tr>
<tr class="even small"><td>Feature envy</td><td>FeatureEnvy</td></tr>
<tr class="odd small"><td>Field accessed in both synchronized and unsynchronized contexts</td><td>FieldAccessedSynchronizedAndUnsynchronized</td></tr>
<tr class="even small"><td>Field has setter but no getter</td><td>FieldHasSetterButNoGetter</td></tr>
<tr class="odd small"><td>Field may be 'static'</td><td>FieldMayBeStatic</td></tr>
<tr class="even small"><td>Field name hides field in superclass</td><td>FieldNameHidesFieldInSuperclass</td></tr>
<tr class="odd small"><td>Field repeatedly accessed in method</td><td>FieldRepeatedlyAccessedInMethod</td></tr>
<tr class="even small"><td>Floating point equality comparison</td><td>FloatingPointEquality</td></tr>
<tr class="odd small"><td>Hardcoded file separator</td><td>HardcodedFileSeparator</td></tr>
<tr class="even small"><td>Hardcoded line separator</td><td>HardcodedLineSeparator</td></tr>
<tr class="odd small"><td>Hibernate resource opened but not safely closed</td><td>HibernateResourceOpenedButNotSafelyClosed</td></tr>
<tr class="even small"><td>I/O resource opened but not safely closed</td><td>IOResourceOpenedButNotSafelyClosed</td></tr>
<tr class="odd small"><td>If statement may be replaced by && or || expression</td><td>SimplifiableIfStatement</td></tr>
<tr class="even small"><td>Implicit call to 'super()'</td><td>ImplicitCallToSuper</td></tr>
<tr class="odd small"><td>Implicit call to array '.toString()'</td><td>ImplicitArrayToString</td></tr>
<tr class="even small"><td>Implicit numeric conversion</td><td>ImplicitNumericConversion</td></tr>
<tr class="odd small"><td>Import from same package</td><td>SamePackageImport</td></tr>
<tr class="even small"><td>Incompatible bitwise mask operation</td><td>IncompatibleBitwiseMaskOperation</td></tr>
<tr class="odd small"><td>Infinite loop statement</td><td>InfiniteLoopStatement</td></tr>
<tr class="even small"><td>Infinite recursion</td><td>InfiniteRecursion</td></tr>
<tr class="odd small"><td>Inner class field hides outer class field</td><td>InnerClassFieldHidesOuterClassField</td></tr>
<tr class="even small"><td>Inner class may be 'static'</td><td>InnerClassMayBeStatic</td></tr>
<tr class="odd small"><td>Inner class of interface</td><td>InnerClassOfInterface</td></tr>
<tr class="even small"><td>Inner class too deeply nested</td><td>InnerClassTooDeeplyNested</td></tr>
<tr class="odd small"><td>Insecure random number generation</td><td>UnsecureRandomNumberGeneration</td></tr>
<tr class="even small"><td>Inspection suppression annotation</td><td>SuppressionAnnotation</td></tr>
<tr class="odd small"><td>Instance method naming convention</td><td>InstanceMethodNamingConvention</td></tr>
<tr class="even small"><td>Instance variable may not be initialized</td><td>InstanceVariableMayNotBeInitialized</td></tr>
<tr class="odd small"><td>Instance variable may not be initialized by 'readObject()'</td><td>InstanceVariableMayNotBeInitializedByReadObject</td></tr>
<tr class="even small"><td>Instance variable naming convention</td><td>InstanceVariableNamingConvention</td></tr>
<tr class="odd small"><td>Instance variable of concrete class</td><td>InstanceVariableOfConcreteClass</td></tr>
<tr class="even small"><td>Instance variable used before initialized</td><td>InstanceVariableUsedBeforeInitialized</td></tr>
<tr class="odd small"><td>Instantiating a SimpleDateFormat without a Locale</td><td>SimpleDateFormatWithoutLocale</td></tr>
<tr class="even small"><td>Instantiating a Thread with default 'run()' method</td><td>InstantiatingAThreadWithDefaultRunMethod</td></tr>
<tr class="odd small"><td>Instantiating object to get Class object</td><td>InstantiatingObjectToGetClassObject</td></tr>
<tr class="even small"><td>Instantiation of utility class</td><td>InstantiationOfUtilityClass</td></tr>
<tr class="odd small"><td>Integer division in floating point context</td><td>IntegerDivisionInFloatingPointContext</td></tr>
<tr class="even small"><td>Integer multiplication or shift implicitly cast to long</td><td>IntegerMultiplicationImplicitCastToLong</td></tr>
<tr class="odd small"><td>Interface naming convention</td><td>InterfaceNamingConvention</td></tr>
<tr class="even small"><td>Interface which has no concrete subclass</td><td>InterfaceNeverImplemented</td></tr>
<tr class="odd small"><td>Interface which has only one direct inheritor</td><td>InterfaceWithOnlyOneDirectInheritor</td></tr>
<tr class="even small"><td>JDBC resource opened but not safely closed</td><td>JDBCResourceOpenedButNotSafelyClosed</td></tr>
<tr class="odd small"><td>JNDI resource opened but not safely closed</td><td>JNDIResourceOpenedButNotSafelyClosed</td></tr>
<tr class="even small"><td>JUnit TestCase in product source</td><td>JUnitTestCaseInProductSource</td></tr>
<tr class="odd small"><td>JUnit TestCase with non-trivial constructors</td><td>JUnitTestCaseWithNonTrivialConstructors</td></tr>
<tr class="even small"><td>JUnit abstract test class naming convention</td><td>JUnitAbstractTestClassNamingConvention</td></tr>
<tr class="odd small"><td>JUnit test case with no tests</td><td>JUnitTestCaseWithNoTests</td></tr>
<tr class="even small"><td>JUnit test class naming convention</td><td>JUnitTestClassNamingConvention</td></tr>
<tr class="odd small"><td>JUnit test method in product source</td><td>JUnitTestMethodInProductSource</td></tr>
<tr class="even small"><td>JUnit test method without any assertions</td><td>JUnitTestMethodWithNoAssertions</td></tr>
<tr class="odd small"><td>Labeled statement</td><td>LabeledStatement</td></tr>
<tr class="even small"><td>Large array allocation with no OutOfMemoryError check</td><td>CheckForOutOfMemoryOnLargeArrayAllocation</td></tr>
<tr class="odd small"><td>Limited-scope inner class</td><td>LimitedScopeInnerClass</td></tr>
<tr class="even small"><td>Local variable hides member variable</td><td>LocalVariableHidesMemberVariable</td></tr>
<tr class="odd small"><td>Local variable naming convention</td><td>LocalVariableNamingConvention</td></tr>
<tr class="even small"><td>Local variable of concrete class</td><td>LocalVariableOfConcreteClass</td></tr>
<tr class="odd small"><td>Local variable used and declared in different 'switch' branches</td><td>LocalVariableUsedAndDeclaredInDifferentSwitchBranches</td></tr>
<tr class="even small"><td>Lock acquired but not safely unlocked</td><td>LockAcquiredButNotSafelyReleased</td></tr>
<tr class="odd small"><td>Long literal ending with 'l' instead of 'L'</td><td>LongLiteralEndingWithLowercaseL</td></tr>
<tr class="even small"><td>Loop statement that does not loop</td><td>LoopStatementThatDoesntLoop</td></tr>
<tr class="odd small"><td>Loop variable not updated inside loop</td><td>LoopConditionNotUpdatedInsideLoop</td></tr>
<tr class="even small"><td>Loop with implicit termination condition</td><td>LoopWithImplicitTerminationCondition</td></tr>
<tr class="odd small"><td>Malformed @Before or @After method</td><td>BeforeOrAfterWithIncorrectSignature</td></tr>
<tr class="even small"><td>Malformed @BeforeClass or @AfterClass method</td><td>BeforeOrAfterWithIncorrectSignature</td></tr>
<tr class="odd small"><td>Malformed XPath expression</td><td>MalformedXPath</td></tr>
<tr class="even small"><td>Malformed format string</td><td>MalformedFormatString</td></tr>
<tr class="odd small"><td>Malformed regular expression</td><td>MalformedRegex</td></tr>
<tr class="even small"><td>Manual array copy</td><td>ManualArrayCopy</td></tr>
<tr class="odd small"><td>Manual array to collection copy</td><td>ManualArrayToCollectionCopy</td></tr>
<tr class="even small"><td>Map or Set may contain java.net.URL objects</td><td>CollectionContainsUrl</td></tr>
<tr class="odd small"><td>Map replaceable by EnumMap</td><td>MapReplaceableByEnumMap</td></tr>
<tr class="even small"><td>Marker interface</td><td>MarkerInterface</td></tr>
<tr class="odd small"><td>Message missing on JUnit assertion</td><td>MessageMissingOnJUnitAssertion</td></tr>
<tr class="even small"><td>Method call in loop condition</td><td>MethodCallInLoopCondition</td></tr>
<tr class="odd small"><td>Method call violates Law of Demeter</td><td>LawOfDemeter</td></tr>
<tr class="even small"><td>Method is identical to its super method</td><td>RedundantMethodOverride</td></tr>
<tr class="odd small"><td>Method may be 'static'</td><td>MethodMayBeStatic</td></tr>
<tr class="even small"><td>Method name same as class name</td><td>MethodNameSameAsClassName</td></tr>
<tr class="odd small"><td>Method name same as parent class name</td><td>MethodNameSameAsParentName</td></tr>
<tr class="even small"><td>Method names differing only by case</td><td>MethodNamesDifferingOnlyByCase</td></tr>
<tr class="odd small"><td>Method overloads method of superclass</td><td>MethodOverloadsMethodOfSuperclass</td></tr>
<tr class="even small"><td>Method overrides package local method of superclass located in other package</td><td>MethodOverridesPrivateMethodOfSuperclass</td></tr>
<tr class="odd small"><td>Method overrides private method of superclass</td><td>MethodOverridesPrivateMethodOfSuperclass</td></tr>
<tr class="even small"><td>Method overrides static method of superclass</td><td>MethodOverridesStaticMethodOfSuperclass</td></tr>
<tr class="odd small"><td>Method parameter naming convention</td><td>MethodParameterNamingConvention</td></tr>
<tr class="even small"><td>Method parameter of concrete class</td><td>MethodParameterOfConcreteClass</td></tr>
<tr class="odd small"><td>Method return of concrete class</td><td>MethodReturnOfConcreteClass</td></tr>
<tr class="even small"><td>Method with more than three negations</td><td>MethodWithMoreThanThreeNegations</td></tr>
<tr class="odd small"><td>Method with multiple loops</td><td>MethodWithMultipleLoops</td></tr>
<tr class="even small"><td>Method with multiple return points.</td><td>MethodWithMultipleReturnPoints</td></tr>
<tr class="odd small"><td>Method with synchronized block could be synchronized method</td><td>MethodMayBeSynchronized</td></tr>
<tr class="even small"><td>Method with too many exceptions declared</td><td>MethodWithTooExceptionsDeclared</td></tr>
<tr class="odd small"><td>Method with too many parameters</td><td>MethodWithTooManyParameters</td></tr>
<tr class="even small"><td>Mismatched query and update of collection</td><td>MismatchedQueryAndUpdateOfCollection</td></tr>
<tr class="odd small"><td>Mismatched read and write of array</td><td>MismatchedReadAndWriteOfArray</td></tr>
<tr class="even small"><td>Misordered 'assertEquals()' parameters</td><td>MisorderedAssertEqualsParameters</td></tr>
<tr class="odd small"><td>Missing @Deprecated annotation</td><td>MissingDeprecatedAnnotation</td></tr>
<tr class="even small"><td>Missing @Override annotation</td><td>override</td></tr>
<tr class="odd small"><td>Missorted modifers</td><td>MissortedModifiers</td></tr>
<tr class="even small"><td>Multiple top level classes in single file</td><td>MultipleTopLevelClassesInFile</td></tr>
<tr class="odd small"><td>Multiple variables in one declaration</td><td>MultipleVariablesInDeclaration</td></tr>
<tr class="even small"><td>Multiply or divide by power of two</td><td>MultiplyOrDivideByPowerOfTwo</td></tr>
<tr class="odd small"><td>Native method</td><td>NativeMethod</td></tr>
<tr class="even small"><td>Nested 'switch' statement</td><td>NestedSwitchStatement</td></tr>
<tr class="odd small"><td>Nested 'synchronized' statement</td><td>NestedSynchronizedStatement</td></tr>
<tr class="even small"><td>Nested 'try' statement</td><td>NestedTryStatement</td></tr>
<tr class="odd small"><td>Nested assignment</td><td>NestedAssignment</td></tr>
<tr class="even small"><td>Nested conditional expression</td><td>NestedConditionalExpression</td></tr>
<tr class="odd small"><td>Nested method call</td><td>NestedMethodCall</td></tr>
<tr class="even small"><td>No-op method in abstract class</td><td>NoopMethodInAbstractClass</td></tr>
<tr class="odd small"><td>Non-boolean method name must not start with question word</td><td>NonBooleanMethodNameMayNotStartWithQuestion</td></tr>
<tr class="even small"><td>Non-constant String should be StringBuffer</td><td>NonConstantStringShouldBeStringBuffer</td></tr>
<tr class="odd small"><td>Non-constant field with upper-case name</td><td>NonConstantFieldWithUpperCaseName</td></tr>
<tr class="even small"><td>Non-constant logger</td><td>NonConstantLogger</td></tr>
<tr class="odd small"><td>Non-exception class name ends with 'Exception'</td><td>NonExceptionNameEndsWithException</td></tr>
<tr class="even small"><td>Non-final 'clone()' in secure context</td><td>NonFinalClone</td></tr>
<tr class="odd small"><td>Non-final field of exception class</td><td>NonFinalFieldOfException</td></tr>
<tr class="even small"><td>Non-final field referenced in 'compareTo()'</td><td>CompareToUsesNonFinalVariable</td></tr>
<tr class="odd small"><td>Non-final field referenced in 'equals()'</td><td>NonFinalFieldReferenceInEquals</td></tr>
<tr class="even small"><td>Non-final field referenced in 'hashCode()'</td><td>NonFinalFieldReferencedInHashCode</td></tr>
<tr class="odd small"><td>Non-final static variable is used during class initialization</td><td>NonFinalStaticVariableUsedInClassInitialization</td></tr>
<tr class="even small"><td>Non-private field accessed in synchronized context</td><td>NonPrivateFieldAccessedInSynchronizedContext</td></tr>
<tr class="odd small"><td>Non-reproducible call to java.lang.Math</td><td>NonReproducibleMathCall</td></tr>
<tr class="even small"><td>Non-serializable class with 'readObject()' or 'writeObject()'</td><td>NonSerializableClassWithSerializationMethods</td></tr>
<tr class="odd small"><td>Non-serializable class with 'serialVersionUID'</td><td>NonSerializableClassWithSerialVersionUID</td></tr>
<tr class="even small"><td>Non-serializable field in a Serializable class</td><td>NonSerializableFieldInSerializableClass</td></tr>
<tr class="odd small"><td>Non-serializable object bound to HttpSession</td><td>NonSerializableObjectBoundToHttpSession</td></tr>
<tr class="even small"><td>Non-serializable object passed to ObjectOutputStream</td><td>NonSerializableObjectPassedToObjectStream</td></tr>
<tr class="odd small"><td>Non-short-circuit boolean expression</td><td>NonShortCircuitBooleanExpression</td></tr>
<tr class="even small"><td>Non-static initializer</td><td>NonStaticInitializer</td></tr>
<tr class="odd small"><td>Non-static inner class in secure context</td><td>NonStaticInnerClassInSecureContext</td></tr>
<tr class="even small"><td>Non-synchronized method overrides synchronized method</td><td>NonSynchronizedMethodOverridesSynchronizedMethod</td></tr>
<tr class="odd small"><td>Number comparison using '==', instead of 'equals()'</td><td>NumberEquality</td></tr>
<tr class="even small"><td>Number constructor call with primitive argument</td><td>CachedNumberConstructorCall</td></tr>
<tr class="odd small"><td>Numeric cast that loses precision</td><td>NumericCastThatLosesPrecision</td></tr>
<tr class="even small"><td>Object allocation in loop</td><td>ObjectAllocationInLoop</td></tr>
<tr class="odd small"><td>Object comparison using ==, instead of 'equals()'</td><td>ObjectEquality</td></tr>
<tr class="even small"><td>Object.equals(null)</td><td>ObjectEqualsNull</td></tr>
<tr class="odd small"><td>Octal and decimal integers in same array</td><td>OctalAndDecimalIntegersInSameArray</td></tr>
<tr class="even small"><td>Octal integer</td><td>OctalInteger</td></tr>
<tr class="odd small"><td>Overloaded methods with same number of parameters</td><td>OverloadedMethodsWithSameNumberOfParameters</td></tr>
<tr class="even small"><td>Overloaded variable argument method</td><td>OverloadedVarargsMethod</td></tr>
<tr class="odd small"><td>Overly broad 'catch' block</td><td>OverlyBroadCatchBlock</td></tr>
<tr class="even small"><td>Overly complex anonymous inner class</td><td>OverlyComplexAnonymousInnerClass</td></tr>
<tr class="odd small"><td>Overly complex arithmetic expression</td><td>OverlyComplexArithmeticExpression</td></tr>
<tr class="even small"><td>Overly complex boolean expression</td><td>OverlyComplexBooleanExpression</td></tr>
<tr class="odd small"><td>Overly complex class</td><td>OverlyComplexClass</td></tr>
<tr class="even small"><td>Overly complex method</td><td>OverlyComplexMethod</td></tr>
<tr class="odd small"><td>Overly coupled class</td><td>OverlyCoupledClass</td></tr>
<tr class="even small"><td>Overly coupled method</td><td>OverlyCoupledMethod</td></tr>
<tr class="odd small"><td>Overly large initializer for array of primitive type</td><td>OverlyLargePrimitiveArrayInitializer</td></tr>
<tr class="even small"><td>Overly long method</td><td>OverlyLongMethod</td></tr>
<tr class="odd small"><td>Overly nested method</td><td>OverlyNestedMethod</td></tr>
<tr class="even small"><td>Overly-strong type cast</td><td>OverlyStrongTypeCast</td></tr>
<tr class="odd small"><td>Overridable method call during object construction</td><td>OverridableMethodCallDuringObjectConstruction</td></tr>
<tr class="even small"><td>Overridden method call during object construction</td><td>OverriddenMethodCallDuringObjectConstruction</td></tr>
<tr class="odd small"><td>Package-visible field</td><td>PackageVisibleField</td></tr>
<tr class="even small"><td>Package-visible inner class</td><td>PackageVisibleInnerClass</td></tr>
<tr class="odd small"><td>Parameter hides member variable</td><td>ParameterHidesMemberVariable</td></tr>
<tr class="even small"><td>Parameter name differs from parameter in overridden method</td><td>ParameterNameDiffersFromOverriddenParameter</td></tr>
<tr class="odd small"><td>Pointless 'indexOf()' comparison</td><td>PointlessIndexOfComparison</td></tr>
<tr class="even small"><td>Pointless arithmetic expression</td><td>PointlessArithmeticExpression</td></tr>
<tr class="odd small"><td>Pointless bitwise expression</td><td>PointlessBitwiseExpression</td></tr>
<tr class="even small"><td>Pointless boolean expression</td><td>PointlessBooleanExpression</td></tr>
<tr class="odd small"><td>Private member access between outer and inner classes</td><td>PrivateMemberAccessBetweenOuterAndInnerClass</td></tr>
<tr class="even small"><td>Private method only used from inner class</td><td>MethodOnlyUsedFromInnerClass</td></tr>
<tr class="odd small"><td>Prohibited exception caught</td><td>ProhibitedExceptionCaught</td></tr>
<tr class="even small"><td>Prohibited exception declared</td><td>ProhibitedExceptionDeclared</td></tr>
<tr class="odd small"><td>Prohibited exception thrown</td><td>ProhibitedExceptionThrown</td></tr>
<tr class="even small"><td>Protected field</td><td>ProtectedField</td></tr>
<tr class="odd small"><td>Protected inner class</td><td>ProtectedInnerClass</td></tr>
<tr class="even small"><td>Public field</td><td>PublicField</td></tr>
<tr class="odd small"><td>Public inner class</td><td>PublicInnerClass</td></tr>
<tr class="even small"><td>Public method not exposed in interface</td><td>PublicMethodNotExposedInInterface</td></tr>
<tr class="odd small"><td>Public method without logging</td><td>PublicMethodWithoutLogging</td></tr>
<tr class="even small"><td>Public static array field</td><td>PublicStaticArrayField</td></tr>
<tr class="odd small"><td>Public static collection field</td><td>PublicStaticCollectionField</td></tr>
<tr class="even small"><td>Questionable name</td><td>QuestionableName</td></tr>
<tr class="odd small"><td>Raw use of parameterized class</td><td>RawUseOfParameterizedType</td></tr>
<tr class="even small"><td>RecordStore opened but not safely closed</td><td>RecordStoreOpenedButNotSafelyClosed</td></tr>
<tr class="odd small"><td>Redundant '.substring(0)'</td><td>SubstringZero</td></tr>
<tr class="even small"><td>Redundant 'String.toString()'</td><td>RedundantStringToString</td></tr>
<tr class="odd small"><td>Redundant 'if' statement</td><td>RedundantIfStatement</td></tr>
<tr class="even small"><td>Redundant String constructor call</td><td>RedundantStringConstructorCall</td></tr>
<tr class="odd small"><td>Redundant conditional expression</td><td>RedundantConditionalExpression</td></tr>
<tr class="even small"><td>Redundant field initialization</td><td>RedundantFieldInitialization</td></tr>
<tr class="odd small"><td>Redundant import</td><td>RedundantImport</td></tr>
<tr class="even small"><td>Redundant interface declaration</td><td>RedundantInterfaceDeclaration</td></tr>
<tr class="odd small"><td>Redundant local variable</td><td>UnnecessaryLocalVariable</td></tr>
<tr class="even small"><td>Redundant no-arg constructor</td><td>RedundantNoArgConstructor</td></tr>
<tr class="odd small"><td>Reflective access to a source-only annotation</td><td>ReflectionForUnavailableAnnotation</td></tr>
<tr class="even small"><td>Refused bequest</td><td>RefusedBequest</td></tr>
<tr class="odd small"><td>Result of method call ignored</td><td>ResultOfMethodCallIgnored</td></tr>
<tr class="even small"><td>Result of object allocation ignored</td><td>ResultOfObjectAllocationIgnored</td></tr>
<tr class="odd small"><td>Return of 'null'</td><td>ReturnOfNull</td></tr>
<tr class="even small"><td>Return of 'this'</td><td>ReturnOfThis</td></tr>
<tr class="odd small"><td>Return of Collection or array field</td><td>ReturnOfCollectionOrArrayField</td></tr>
<tr class="even small"><td>Return of Date or Calendar field</td><td>ReturnOfDateField</td></tr>
<tr class="odd small"><td>Reuse of local variable</td><td>ReuseOfLocalVariable</td></tr>
<tr class="even small"><td>Scope of variable is too broad</td><td>TooBroadScope</td></tr>
<tr class="odd small"><td>Serializable class in secure context</td><td>SerializableClassInSecureContext</td></tr>
<tr class="even small"><td>Serializable class with unconstructable ancestor</td><td>SerializableClassWithUnconstructableAncestor</td></tr>
<tr class="odd small"><td>Serializable class without 'readObject()' and 'writeObject()'</td><td>SerializableHasSerializationMethods</td></tr>
<tr class="even small"><td>Serializable class without 'serialVersionUID'</td><td>serial</td></tr>
<tr class="odd small"><td>Serializable non-static inner class with non-Serializable outer class</td><td>SerializableInnerClassWithNonSerializableOuterClass</td></tr>
<tr class="even small"><td>Serializable non-static inner class without 'serialVersionUID'</td><td>SerializableNonStaticInnerClassWithoutSerialVersionUID</td></tr>
<tr class="odd small"><td>Set replaceable by EnumSet</td><td>SetReplaceableByEnumSet</td></tr>
<tr class="even small"><td>Shift operation by inappropriate constant</td><td>ShiftOutOfRange</td></tr>
<tr class="odd small"><td>Simplifiable JUnit assertion</td><td>SimplifiableJUnitAssertion</td></tr>
<tr class="even small"><td>Single character 'startsWith()' or 'endsWith()'</td><td>SingleCharacterStartsWith</td></tr>
<tr class="odd small"><td>Single character string concatenation</td><td>SingleCharacterStringConcatenation</td></tr>
<tr class="even small"><td>Single character string parameter in 'String.indexOf()' call</td><td>SingleCharacterStringConcatenation</td></tr>
<tr class="odd small"><td>Single class import</td><td>SingleClassImport</td></tr>
<tr class="even small"><td>Singleton</td><td>Singleton</td></tr>
<tr class="odd small"><td>Socket opened but not safely closed</td><td>SocketOpenedButNotSafelyClosed</td></tr>
<tr class="even small"><td>Standard variable names</td><td>StandardVariableNames</td></tr>
<tr class="odd small"><td>Statement with empty body</td><td>StatementWithEmptyBody</td></tr>
<tr class="even small"><td>Static collection</td><td>StaticCollection</td></tr>
<tr class="odd small"><td>Static field referenced via subclass</td><td>StaticFieldReferencedViaSubclass</td></tr>
<tr class="even small"><td>Static import</td><td>StaticImport</td></tr>
<tr class="odd small"><td>Static inheritance</td><td>StaticInheritance</td></tr>
<tr class="even small"><td>Static method naming convention</td><td>StaticMethodNamingConvention</td></tr>
<tr class="odd small"><td>Static method only used from one other class</td><td>StaticMethodOnlyUsedInOneClass</td></tr>
<tr class="even small"><td>Static method referenced via subclass</td><td>StaticMethodReferencedViaSubclass</td></tr>
<tr class="odd small"><td>Static variable may not be initialized</td><td>StaticVariableMayNotBeInitialized</td></tr>
<tr class="even small"><td>Static variable naming convention</td><td>StaticVariableNamingConvention</td></tr>
<tr class="odd small"><td>Static variable of concrete class</td><td>StaticVariableOfConcreteClass</td></tr>
<tr class="even small"><td>Static variable used before initialization</td><td>StaticVariableUsedBeforeInitialization</td></tr>
<tr class="odd small"><td>String comparison using '==', instead of 'equals()'</td><td>StringEquality</td></tr>
<tr class="even small"><td>String concatenation</td><td>StringConcatenation</td></tr>
<tr class="odd small"><td>String concatenation in loop</td><td>StringContatenationInLoop</td></tr>
<tr class="even small"><td>String concatenation inside 'StringBuffer.append()'</td><td>StringConcatenationInsideStringBufferAppend</td></tr>
<tr class="odd small"><td>StringBuffer constructor call with 'char' argument</td><td>NewStringBufferWithCharArgument</td></tr>
<tr class="even small"><td>StringBuffer field</td><td>StringBufferField</td></tr>
<tr class="odd small"><td>StringBuffer or StringBuilder without initial capacity</td><td>StringBufferWithoutInitialCapacity</td></tr>
<tr class="even small"><td>Subtraction in compareTo()</td><td>SubtractionInCompareTo</td></tr>
<tr class="odd small"><td>Suspicious 'Collections.toArray()' call</td><td>SuspiciousToArrayCall</td></tr>
<tr class="even small"><td>Suspicious 'System.arraycopy()' call</td><td>SuspiciousSystemArraycopy</td></tr>
<tr class="odd small"><td>Suspicious indentation after control statement without braces</td><td>SuspiciousIndentAfterControlStatement</td></tr>
<tr class="even small"><td>Suspicious test for oddness</td><td>BadOddness</td></tr>
<tr class="odd small"><td>Synchronization on 'this'</td><td>SynchronizeOnThis</td></tr>
<tr class="even small"><td>Synchronization on a Lock object</td><td>SynchroniziationOnLockObject</td></tr>
<tr class="odd small"><td>Synchronization on a non-final field</td><td>SynchronizeOnNonFinalField</td></tr>
<tr class="even small"><td>Synchronization on an object initialized with a literal</td><td>SynchronizedOnLiteralObject</td></tr>
<tr class="odd small"><td>TODO comment</td><td>TodoComment</td></tr>
<tr class="even small"><td>Tail recursion</td><td>TailRecursion</td></tr>
<tr class="odd small"><td>Test method with incorrect signature</td><td>TestMethodWithIncorrectSignature</td></tr>
<tr class="even small"><td>Text label in 'switch' statement</td><td>TextLabelInSwitchStatement</td></tr>
<tr class="odd small"><td>Throwable instance not thrown</td><td>ThrowableInstanceNeverThrown</td></tr>
<tr class="even small"><td>Transient field in non-serializable class</td><td>TransientFieldInNonSerializableClass</td></tr>
<tr class="odd small"><td>Transient field is not initialized on deserialization</td><td>TransientFieldNotInitialized</td></tr>
<tr class="even small"><td>Type may be weakened</td><td>TypeMayBeWeakened</td></tr>
<tr class="odd small"><td>Type parameter explicitly extends 'java.lang.Object'</td><td>TypeParameterExplicitlyExtendsObject</td></tr>
<tr class="even small"><td>Type parameter extends final class</td><td>TypeParameterExtendsFinalClass</td></tr>
<tr class="odd small"><td>Type parameter hides visible type</td><td>TypeParameterHidesVisibleType</td></tr>
<tr class="even small"><td>Type parameter naming convention</td><td>TypeParameterNamingConvention</td></tr>
<tr class="odd small"><td>Unary plus</td><td>UnaryPlus</td></tr>
<tr class="even small"><td>Unchecked exception class</td><td>UncheckedExceptionClass</td></tr>
<tr class="odd small"><td>Unconditional 'wait()' call</td><td>UnconditionalWait</td></tr>
<tr class="even small"><td>Unconstructable JUnit TestCase</td><td>UnconstructableJUnitTestCase</td></tr>
<tr class="odd small"><td>Unnecessarily qualified static usage</td><td>UnnecessarilyQualifiedStaticUsage</td></tr>
<tr class="even small"><td>Unnecessary 'continue' statement</td><td>UnnecessaryContinue</td></tr>
<tr class="odd small"><td>Unnecessary 'default' for enum switch statement</td><td>UnnecessaryDefault</td></tr>
<tr class="even small"><td>Unnecessary 'final' for local variable</td><td>UnnecessaryFinalOnLocalVariable</td></tr>
<tr class="odd small"><td>Unnecessary 'final' for method parameter</td><td>UnnecessaryFinalForMethodParameter</td></tr>
<tr class="even small"><td>Unnecessary 'return' statement</td><td>UnnecessaryReturnStatement</td></tr>
<tr class="odd small"><td>Unnecessary 'this' qualifier</td><td>UnnecessaryThis</td></tr>
<tr class="even small"><td>Unnecessary boxing</td><td>UnnecessaryBoxing</td></tr>
<tr class="odd small"><td>Unnecessary call to 'super()'</td><td>UnnecessaryCallToSuper</td></tr>
<tr class="even small"><td>Unnecessary code block</td><td>UnnecessaryCodeBlock</td></tr>
<tr class="odd small"><td>Unnecessary enum modifier</td><td>UnnecessaryEnumModifier</td></tr>
<tr class="even small"><td>Unnecessary fully qualified name</td><td>UnnecessaryFullyQualifiedName</td></tr>
<tr class="odd small"><td>Unnecessary interface modifier</td><td>UnnecessaryInterfaceModifier</td></tr>
<tr class="even small"><td>Unnecessary label on 'break' statement</td><td>UnnecessaryLabelOnBreakStatement</td></tr>
<tr class="odd small"><td>Unnecessary label on 'continue' statement</td><td>UnnecessaryLabelOnContinueStatement</td></tr>
<tr class="even small"><td>Unnecessary parentheses</td><td>UnnecessaryParentheses</td></tr>
<tr class="odd small"><td>Unnecessary qualifier for 'this'</td><td>UnnecessaryQualifierForThis</td></tr>
<tr class="even small"><td>Unnecessary semicolon</td><td>UnnecessarySemicolon</td></tr>
<tr class="odd small"><td>Unnecessary temporary object in conversion from String</td><td>UnnecessaryTemporaryOnConversionFromString</td></tr>
<tr class="even small"><td>Unnecessary temporary object in conversion to String</td><td>UnnecessaryTemporaryOnConversionToString</td></tr>
<tr class="odd small"><td>Unnecessary unary minus</td><td>UnnecessaryUnaryMinus</td></tr>
<tr class="even small"><td>Unnecessary unboxing</td><td>UnnecessaryUnboxing</td></tr>
<tr class="odd small"><td>Unpredictable BigDecimal constructor call</td><td>UnpredictableBigDecimalConstructorCall</td></tr>
<tr class="even small"><td>Unqualified instance field access</td><td>UnqualifiedFieldAccess</td></tr>
<tr class="odd small"><td>Unqualified static usage</td><td>UnqualifiedStaticUsage</td></tr>
<tr class="even small"><td>Unsafe lazy initialization of static field</td><td>NonThreadSafeLazyInitialization</td></tr>
<tr class="odd small"><td>Unused 'catch' parameter</td><td>UnusedCatchParameter</td></tr>
<tr class="even small"><td>Unused import</td><td>UnusedImport</td></tr>
<tr class="odd small"><td>Unused label</td><td>UnusedLabel</td></tr>
<tr class="even small"><td>Use of '$' in identifier</td><td>DollarSignInName</td></tr>
<tr class="odd small"><td>Use of 'assert' as identifier</td><td>AssertAsIdentifier</td></tr>
<tr class="even small"><td>Use of 'enum' as identifier</td><td>EnumAsIdentifier</td></tr>
<tr class="odd small"><td>Use of AWT peer class</td><td>UseOfAWTPeerClass</td></tr>
<tr class="even small"><td>Use of DriverManager to get JDBC connection</td><td>CallToDriverManagerGetConnection</td></tr>
<tr class="odd small"><td>Use of Properties object as a Hashtable</td><td>UseOfPropertiesAsHashtable</td></tr>
<tr class="even small"><td>Use of StringTokenizer</td><td>UseOfStringTokenizer</td></tr>
<tr class="odd small"><td>Use of System.out or System.err</td><td>UseOfSystemOutOrSystemErr</td></tr>
<tr class="even small"><td>Use of archaic system property accessors</td><td>UseOfArchaicSystemPropertyAccessors</td></tr>
<tr class="odd small"><td>Use of concrete JDBC driver class</td><td>UseOfJDBCDriverClass</td></tr>
<tr class="even small"><td>Use of index 0 in JDBC ResultSet</td><td>UseOfIndexZeroInJDBCResultSet</td></tr>
<tr class="odd small"><td>Use of java.lang.ProcessBuilder class</td><td>UseOfProcessBuilder</td></tr>
<tr class="even small"><td>Use of java.lang.reflect</td><td>JavaLangReflect</td></tr>
<tr class="odd small"><td>Use of obsolete collection type</td><td>UseOfObsoleteCollectionType</td></tr>
<tr class="even small"><td>Use of sun.* classes</td><td>UseOfSunClasses</td></tr>
<tr class="odd small"><td>Using 'Random.nextDouble()' to get random integer</td><td>UsingRandomNextDoubleForRandomInteger</td></tr>
<tr class="even small"><td>Utility class</td><td>UtilityClass</td></tr>
<tr class="odd small"><td>Utility class with public constructor</td><td>UtilityClassWithPublicConstructor</td></tr>
<tr class="even small"><td>Utility class without private constructor</td><td>UtilityClassWithoutPrivateConstructor</td></tr>
<tr class="odd small"><td>Value of ++ or -- used</td><td>ValueOfIncrementOrDecrementUsed</td></tr>
<tr class="even small"><td>Variable argument method</td><td>VariableArgumentMethod</td></tr>
<tr class="odd small"><td>Variables of different types in one declaration</td><td>VariablesOfDifferentTypesInDeclaration</td></tr>
<tr class="even small"><td>Volatile array field</td><td>VolatileArrayField</td></tr>
<tr class="odd small"><td>Volatile long or double field</td><td>VolatileLongOrDoubleField</td></tr>
<tr class="even small"><td>While loop spins on field</td><td>WhileLoopSpinsOnField</td></tr>
<tr class="odd small"><td>Zero-length array allocation</td><td>ZeroLengthArrayAllocation</td></tr>
<tr class="even small"><td>expression.equals("literal") rather than "literal".equals(expression)</td><td>LiteralAsArgToStringEquals</td></tr>
<tr class="odd small"><td>java.lang import</td><td>JavaLangImport</td></tr>
<tr class="even small"><td>java.lang.Error not rethrown</td><td>ErrorNotRethrown</td></tr>
<tr class="odd small"><td>java.lang.ThreadDeath not rethrown</td><td>ThreadDeathNotRethrown</td></tr>
</tbody>
</table>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-10-30-list_of_suppresswarnings_arguments</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-10-30 15:56:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1225409840557</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>202.53.199.75</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-10-31 10:37:20</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hmm, IDEA doesn't have an option on the GUI to control the compiler errors/warnings?</p>
<p>In Eclipse you can select the severity of some optional compiler problems - Ignore, Warning or Error.</p>
<p>I can only see this being useful if you want to turn the warning off for a particular block of code..?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1225413961359</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.63.130.33</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-10-31 11:46:01</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Yes, IDEA does allow you to configure what warnings display on a global and per project basis, but it's the per block warnings that I want to turn off, many of the warnings I think are very good to have, generally I want a test that doesn't have assertions to be flagged, because a test without assertions is a very bad thing.&nbsp; Using SuppressWarnings means that I have explicitly acknowledged the problem and have deemed it acceptable.&nbsp; Another example I found is on a generated equals() method, IDEA flagged it as overly complex, but clearly I don't care because it's generated, when I want to change it I will delete and regenerate it.&nbsp; However, I don't want the overly complex inspection turned off altogether, because it's good at flagging methods that should be refactored for readablities sake.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1225409840557</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1262988363315</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>159.182.1.4</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-01-09 09:06:03</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[thank you, very useful as the place I work have some ridiculous inspection rules and i have to use suppresswarning alot.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1338409696276</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>RustyTheBoyRobot</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>207.224.213.179</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-05-31 06:28:16</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Dude, this is an incredibly helpful table. Thanks for compiling it!</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1370595969625</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>seoul metro application</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>cedricfarley@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.windowswebspace.eu/phpinfo.php?a[]=%3Ca+href=http://www.articlesyahoo.com/How-To-Use-A-SEARCH-ENGINE-OPTIMIZATION-Composing-Support-To-Create-Visitors.htm%3Ewgm+seohyun+and+yonghwa+ep+27+eng+sub%3C/a%3E</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-07 19:06:09</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Hey! I simply wish to give a huge thumbs up for 
the great information you could have here on this post.

I shall be coming again to your weblog for more soon.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1373308319430</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Lawyer Neehal Patel</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>martha-burke@t-online.de</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.swayhacks.com/?a[]=%3Ca+href=http://vimeo.com/37140356%3ENeehal+Patel+Solicitor%3C/a%3E</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>64.120.9.14</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-09 04:31:59</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Hurrah, that's what I was searching for, what a information! present here at this weblog, thanks admin of this web page.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1379553774294</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Helaine</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>helaineredfern@inbox.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://anders-grimmer.com/cgi-bin/info.php?a[]=%3Ca+href=http://Blogrethurster.Freeblog.hu</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>173.212.224.78</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-09-19 11:22:54</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Mgnificent beat ! I wish to apprentice whie you amend your website, 
how could i subscribe for a blog web site?
The account aided me a acceptable deal. I had been a little bit acquainted of this your broadcast provided bright clear concept]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>The method of proposal</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2008/12/08/the_method_of_proposal.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
To save explaining a hundred times over how I proposed to Beth, I've decided to put it in a blog post, much easier that way.  For those of you that aren't aware, I proposed to Beth, my girlfriend of 15 months, on Saturday, and she said yes.
</p>

<p>
So, about a month ago, my Mum phoned me while I was at Beth's place.  I answered the phone and put it on speaker, and Mum told me she wanted to have a late family celebration for my birthday, saying that she and Dad would be in Sydney on the 6th of December.  She said she had found a really nice restaurant just out of Lithgow, and that she had to book and pay several weeks in advance.  She asked Beth and I if we were free, which we were, and so we put it in our diaries.  Little did Beth know, but this was all a ploy so that she wouldn't suspect anything when I drove her up the Blue Mountains.
</p>

<p>
So, I picked Beth up at 10am from her place in Castle Hill, and we started driving towards Lithgow, taking <a href="http://maps.google.com.au/maps?f=q&hl=en&q=Bells+Line+of+Rd,+NSW&sll=-25.335448,135.745076&sspn=54.469558,73.476562&ie=UTF8&cd=1&geocode=FcOSAP4dfjr4CA&t=h&z=11&g=Bells+Line+of+Rd,+NSW&iwloc=addr">Bells Line of Road</a>.  About 10 minutes past Bilpin, I got a really bad cramp in my leg.  You know how annoying that is when you're driving?  It was so bad, I had to pull over and stretch.  We pulled over at a <a href="http://maps.google.com.au/maps?f=q&hl=en&q=Bells+Line+of+Rd,+NSW&sll=-25.335448,135.745076&sspn=54.469558,73.476562&ie=UTF8&cd=1&geocode=FcOSAP4dfjr4CA&ll=-33.546582,150.391686&spn=0.00079,0.001121&t=h&z=20&layer=c&cbll=-33.546589,150.391702&panoid=11DMuNobRfTIF8G1XfSZBw&cbp=12,223.63343690144495,,0,8.983253588516758">pretty ordinary place</a> on the side of the road in the middle of nowhere.
</p>

<p>
After doing some stretches, I said to Beth "Hey, it looks like there's a nice view here, why don't you get out."  So she did.  As we were walking around, we noticed an unusual small pile of rocks.  Being an immature guy, I decided to kick it over.  She also decided to kick it, and then we noticed a very old looking piece of paper underneath.  We picked it up, and it turned out to be a letter, dated 1851.  The writing on it was very old fashioned, I'll scan it in sometime maybe and attach a picture of it to this post, but for now, here's the <a href="files/blogs/proposal_transcript.txt">transcript</a>.  The letter was by someone who had "something", and was being pursued for it.  This thing was too heavy, and he had to hide it.  The letter contained instructions on how to find it.
</p>

<p>
<img src="images/blogs/proposal/chest.jpeg" title="The chest, just before I buried it." style="float: right; padding: 10px;"/>
We weren't sure how the letter got there, but thinking that there was a slight possibility that the letter had never reached its recipient, we decided to search for the treasure.  We found the landscape exactly as the letter described, and soon we were at the entrance of a small overhang.  There was a cross etched into the wall, and nearby we found a very old rusty shovel.  So, I started digging, and before long, the shovel hit something hard.  It was a treasure chest.  I dug up the treasure chest, and opened it. Inside was a ring and two roses, lying in a bed of sand.  As soon as I opened it, I picked up the ring, got down on one knee, and recited a poem that I wrote, which ended in "Will you marry me?".  I won't attach the poem here, but if you really want to know what it said, ask me.
</p>

<p>
<img src="images/blogs/proposal/picnic_view.jpeg" title="The view from the picinc rock." style="float:left; padding:10px;"/>
Beth burst into tears (this was my aim) and said yes.  After that we headed back out of the valley, up to a high rock with a very nice view, where I had a picnic basket and esky with French champagne, cheese, Caesar salad, fruit and chocolate, and we had a picnic lunch.
</p>

<p>
As one last surprise for Beth, I took her out for dinner that night, telling her it was a dinner for two, but when we got there both sets of parents were there.
</p>

<p>
If you're interested in the logistics of the day, I'd been planning for about 6 months, though I didn't have a date 6 months ago, I knew that what I wanted to do would take a lot of work, so I started preparing it so that when I did decide to propose, I would already be half ready.  I got up at 5:15am on the morning, drove up to the spot and planted the chest with 2 friends.  I then went back to Sydney to pick up Beth while they waited up in the area.  I phoned them when we were half an hour off and they went and planted the letter, and then waited for us to get there.  5 minutes off I pranked them, and they left.
</p>

<p>
Here's some more photos:
</p>

<p>
<img src="images/blogs/proposal/chest2.jpeg"/>
<br/>
Close up of the treasure chest.
</p>

<p>
<img src="images/blogs/proposal/ring320240.jpeg"/>
<br/>
The ring.
</p>

<p>
<img src="images/blogs/proposal/valley.jpeg"/>
<br/>
The way down to the treasure chest was very steep and rough.
</p>

<p>
<img src="images/blogs/proposal/overhang.jpeg"/>
<br/>
Where the chest was buried.
</p>

<p>
Many thanks to Mum, for setting up the decoy event and for writing out the letter, to Aaron and Denise, for helping me set everything up and waiting so patiently for me to pick Beth up, to Beth's parents, for arranging dinner that night and help keeping Beth completely unsuspecting of the event, to <a href="http://www.jewellerydesign.com.au/">Leon Milch</a>, for helping me design and making a beautiful engagement ring, and finally to Beth, for being the most amazing fiancée a guy could ever hope for.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2008-12-08-the_method_of_proposal</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2008-12-08 09:33:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1228699487919</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Beck Cresswell</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>beckcresswell@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>121.217.215.201</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-08 12:24:47</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>James, James, James!!! </p>
<p>...My Goodness!</p>
<p>:)</p>
<p>Couldn't imagine a more amazing and deserving man for my Bethy. Thank you for going to all this effort and making her the happiest girl in the world. This has to be one of the best proposals i have ever known!</p>
<p>Love Beck</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1228700446971</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Denise</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>rowdyrabbit@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>202.53.199.75</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-08 12:40:46</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Yay James, so happy to be part of such a wonderful day :)]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1228708128540</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Sarah</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>smcd6737@usyd.edu.au</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>60.240.96.168</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-08 14:48:48</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[I am so very glad it all panned out!!! Congrats to both of you :D]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1228711981263</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anton</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://Artof2.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>114.72.110.212</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-08 15:53:01</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Congrats man! I hope you guys have even more fun with eaxh other in the future. Good idea taking her to a secluded place with a shovel in case she said no.

]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1228713560880</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Carissa</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>121.218.5.30</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-08 16:19:20</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>That is the most&nbsp;romantic proposal story I've ever heard. I got all misty eyed when reading the bit where you picked up the ring and got down on one knee. Beth is such a lucky girl. I could only dream of having anything that romantic happening to me. I don't think Matt has a romantic bone in his body. &nbsp;All the efort you put in!&nbsp; Im very impressed and very, VERY jelous!</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1228731875830</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Steve S</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>121.210.176.145</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-08 21:24:35</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[there seems to be a growing list of &quot;for being the most amazing fianc&eacute;e a guy could ever hope for.&quot; contenders...<br />
<br />
we'll leave that one up to personal opinion... nice work though... mountains is a good spot to propose ;-)]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1228731972656</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>124.179.55.77</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-08 21:26:12</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[keast team in narrabri say congrats to you both. Wonderful news, glad i noted it only three hours after on your blog site!!]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1228737568200</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Reetu</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>220.244.88.5</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-08 22:59:28</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[James, this post is a fabulous idea :)<br />
<br />
What a beautiful and romantic way to propose. Honestly I don't know how you didn't die of embarrassment even thinking such romantic thoughts... but love will make you do funny things. Congratulations for the multiple strokes of romantic genius, the perfectly executed plan and of course... for getting a &quot;yes&quot;!<br />
<br />]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1228737791322</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Di</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>dib812@hotmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>80.13.105.197</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-08 23:03:11</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Tu es INCROYABLE!!! Trop trop bien James!<br />
I approve, i am SO happy 4 you both!<br />
<br />
Beth is going to make you so happy, she's excellent wife material.<br />
She'll make you get extremely pudgy with her wonderful cooking, but you'll both have great abs by laughing so much together :) <br />
<br />
I'm very excited!!! And everyone in France is excited too cause they've all seen the video Beth made, which features lots of you!<br />
<br />
God bless you both a million times over!!!]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1228796933996</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Ken</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>kenny83@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>146.145.7.3</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-09 15:28:53</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Congradulations!! </p>
<p>Man you set the bar to high, now none of us can ever get married now :P</p>
<p>So glad the grand plan worked out. Nice choice of area, the area around bilpin is beautiful. There are some nice bed and breakfast you can take for your anniversary some day :)</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1229171374392</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Sarah N</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>120.16.7.170</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-13 23:29:34</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Big congrats to yourself and Beth!]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1230089838213</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Alex W</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>203.63.130.33</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-24 14:37:18</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Very romatic!<br />
Congratulations to both&nbsp; you and Beth!]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1230126240207</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>220.239.226.99</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2008-12-25 00:44:00</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[i randomly surfed in on fair trade coffee and i just want to say screw you. there is nothing that shits me more than a truly awesome guy i can't have. congrts]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Copy and paste between Firefox and the iPhone</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2009/04/04/copy_and_paste_between_firefox_and_the_iphone.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<style type="text/css">
.image_link {
  margin: 40px;
}
.image_link img {
  border-style: none;
}
</style>

<p>
Today I decided to have a go at diagnosing why the reversing lights on my car weren't working.  I quickly worked out that the bulbs were fine, so I jumped on Google to see if I could find some information about where else problems may occur with reversing lights in a car.  I found some very detailed instructions, but I had a problem.  These instructions were on my computer, in my room, but I wanted to take them to my car, in my garage, and I don't have a printer.  However, I do have an iPhone, so I thought I'd copy the URL into my iPhone and read the instructions from Safari.  The URL however was rather long and copying by hand would have been painful, what I really wanted to do was the equivalent of copy and paste from my computer to my iPhone.
</p>

<p>
Enter <a href="https://addons.mozilla.org/en-US/firefox/addon/2780">Mobile Barcoder</a>.  Mobile Barcoder is a Firefox extension that allows you to generate QR Codes from Firefox.  A QR Code is a 2D barcode designed to be read particularly by mobile devices.  Using Mobile Barcoder, generating a barcode for the current page is as simple as hovering your mouse over the icon it puts in the bottom right corner of the window:
</p>

<a class="image_link" href="images/blogs/barcode/currentpage.png"><img src="images/blogs/barcode/currentpage_thumbnail.png" alt="Generating a barcode from the current page"/></a>

<p>
You can also right click on a link to generate a barcode for that link:
</p>

<a class="image_link" href="images/blogs/barcode/link.png"><img src="images/blogs/barcode/link_thumbnail.png" alt="Generating a barcode from a link"/></a>

<p>
You can even create a barcode from arbitrary text on the page, by selecting it and then right clicking:
</p>

<a class="image_link" href="images/blogs/barcode/selection.png"><img src="images/blogs/barcode/selection_thumbnail.png" alt="Generating a barcode from selected text"/></a>

<p>
So I have my barcode, but what use is that to me?  Enter <a href="http://www.beetagg.com/en/beetagglabs/beetaggforiphone/beetagg-reader-for-iphone-qr-code-datamatrix-120.html">BeeTag</a>.  BeeTag is a free iPhone App that reads QR Codes and other 2D barcodes, and, depending on the type of code, lets you act on it accordingly.  For example, if it's a phone number, you can dial the number, if it's a URL, you can open it in Safari, or if it's plain text, you can save it as a memo.  Scanning is as easy as taking a picture:
</p>

<a class="image_link" href="images/blogs/barcode/beetag-picture.png"><img src="images/blogs/barcode/beetag-picture_thumbnail.png" alt="Taking a picture of a barcode with BeeTag"/></a>

<p>
Having taken the picture, it will read it, and then prompt you for what you want to do next.  I chose to open the URL in Safari:
</p>

<a class="image_link" href="images/blogs/barcode/beetag-prompt.png"><img src="images/blogs/barcode/beetag-prompt_thumbnail.png" alt="BeeTag prompt after successfully reading a barcode"/></a>
<a class="image_link" href="images/blogs/barcode/beetag-open.png"><img src="images/blogs/barcode/beetag-open_thumbnail.png" alt="The webpage on my iPhone in Safari"/></a>

<p>
Now all I need to do is wait for the iPhone 3.0 firmware with copy and paste, and I have full end to end copy/paste from my computer to my iPhone.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2009-04-04-copy_and_paste_between_firefox_and_the_iphone</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2009-04-04 12:03:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1238863400745</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Tim Moore</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>tmoore@incrementalism.net</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://incrementalism.net</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>76.220.109.161</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2009-04-05 02:43:20</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[That's pretty cool, but I usually just email links to myself to get them on the phone. Or sync bookmarks.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1238981163727</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>203.63.130.33</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2009-04-06 11:26:03</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[I guess tinyurl would do the job too :)]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1238987367000</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.63.130.33</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2009-04-06 13:09:27</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[My method is:<br />
<ul>
    <li>Mouse over Mobile Barcoder</li>
    <li>Open BeeTag on iPhone</li>
    <li>Click take photo</li>
    <li>Point</li>
    <li>Click take photo</li>
    <li>Click use photo</li>
    <li>Click open in web</li>
</ul>
7 actions/5 clicks.&nbsp; Tiny URL would take at least 10 clicks just to type in the URL, let alone having to generate the URL, opening safari on iPhone, select the address bar, delete whatever is already in it etc etc etc.&nbsp; I think this method is far faster and simpler than using tiny URL, or emailing it to yourself for that matter.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1238981163727</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1238999348331</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Jay Rogers</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jrogers@atlassian.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>124.170.112.27</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2009-04-06 16:29:08</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Sweet!]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1239714552880</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>beth Campbell</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>B.Campbell86@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>122.107.33.125</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2009-04-14 23:09:12</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[thats cool. Nice pictures. ]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1249297692521</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Evert Kuiken</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>evert.kuiken@xs4all.nl</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>145.7.182.163</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2009-08-03 21:08:12</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Why do people feel the need to re-invent things? I have an old organiser (a Psion, running the Symbian OS, that was used by Nokia phones for some time). I am able to copy-paste between my computer and Psion. I am even able to edit documents on my Psion from my computer, using Word or whatever. And all this organiser uses is a mere 16 MB for OS and storage. Lightning fast, even with Wifi (if I wanted it). But no color, no Bluetooth. I have never understood why Symbian was rewritten with only half the functionality it had. Such a waste. Now we have to wait for Apple to re-invent all that functionality :-(]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1249300861758</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>220.233.29.18</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2009-08-03 22:01:01</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Are you saying that all mobile devices should run the old Symbian OS, that no new platforms should ever be written, that there should be no choice in what OS your mobile device runs?&nbsp; New platforms encourage innovation and healthy competition between companies.&nbsp; When there's only one platform (for example, Windows), the author of that platform gets complacent, and people come to accept a terrible user experience as normal.&nbsp; Innovation is stifled, because why should that company innovate in their platform if their platform is the defacto standard?<br />
<br />
Nothing is being reinvented, they are just being implemented on a new (and in my opinion, better) platform.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1249376407102</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>145.7.182.163</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2009-08-04 19:00:07</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[I would prefer a choice of OS, of course. Depending on your needs you should be able to select the best suitable OS. But in the current marketplace a choice for a device means a choice for the OS. Hardly any device supports reinstalling another OS. So how is that a choice?<br />
<br />
Symbian cannot be compared to Windows as it was maintained by several companies (Nokia, Siemens), not just one.<br />
<br />
Why, if things are not being reinvented, do we have to wait for version 4 of an OS to have support for in my eyes pretty basic functionality?]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Atlassian Stimulus Package</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2009/04/21/atlassian_stimulus_package.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<a href="http://www.atlassian.com/starter"><img src="images/blogs/atlassian-stimulus.gif" style="float:right; border:none; padding: 10px"/></a>

<p>
For five days only, you can buy 5 user licenses of the full versions of JIRA and Confluence for only $5.  This includes full support for a year, and renewal will only ever cost you $5.  Furthermore, all revenue raised from the promotion goes to charity.  What a great way for small teams to sneak Confluence and JIRA into their companies!  It's also great for people that want them for personal use but would like a few more than 2 users.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2009-04-21-atlassian_stimulus_package</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2009-04-21 10:13:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Java Concurrency and Volatile</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2009/04/24/java_concurrency_and_volatile.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
The volatile keyword is a keyword that very few Java developers know the meaning of, let alone when they should use it.  The reason for this, I believe, is that the reason why it's needed is such a complex topic that unless you've studied in detail the way CPUs use registers, cache, and the way the JVM uses stack frames, it's impossible to understand why it's needed.  The other reason I think, is that it is difficult to demonstrate the consequences of not using it.  That is why I came up with this little puzzle, to highlight how important the volatile keyword is.
</p>

<p>
For this demonstration, you will need a multi processor Linux 2.6 or OpenSolaris system, with Java 5 or above.  It will not work on Mac or Windows.  If you know why it doesn't work on Mac or Windows, please leave a comment explaining, I'd really like to know.  What this does highlight though is just how complex Java concurrency issues are.
</p>

<p>
So on to the puzzle.  Without executing it, try and work out what will happen when you run the following code:
</p>

<pre class="prettyprint"><code class="language-java">public class ConcurrencyFun implements Runnable
{
    private String str;
    void setStr(String str)
    {
        this.str = str;
    }
    public void run()
    {
        while (str == null);
        System.out.println(str);
    }
    public static void main(String[] args) throws Exception
    {
        ConcurrencyFun fun = new ConcurrencyFun();
        new Thread(fun).start();
        Thread.sleep(1000);
        fun.setStr("Hello world!!");
    }
}
</code></pre>

<p>
Most people would guess that the above code would wait for about one second, print the text "Hello world!!", and then exit.  The spawned thread busy waits for <tt>str</tt> to not be null, and then prints it.  The main thread, after starting the spawned thread, waits for one second, and then sets <tt>str</tt> to be "Hello world!!".  Simple, right?
</p>

<p>
Now try running it (remember, only on a multi processor Linux 2.6 or Solaris system).  What actually happens?  On my machine, the program never exits.  Why is this?
</p>

<p>
The reason is that the JVM is free to make its own copy of the <tt>str</tt> pointer available to each thread that uses it.  This could come in many forms.  It could be that the pointer is loaded into a register and is continually read from that register.  This is what is most likely happening in our case.  It could be that the pointer is loaded into the CPU cache, and never expired, even after update.  Or, it is also possible that the JVM will make a copy of the pointer in the threads stack frame, to allow for more efficient memory access.  Whether you understand anything I've just said or not, the point is that changes to the <tt>str</tt> field may not necessarily be seen by all threads accessing it, in our case, it will never be seen by the spawned thread.
</p>

<p>
This is where the volatile keyword comes in.  The volatile keyword tells the JVM that any writes to that field must be viewable by all threads.  This means that the compiled machine code may not read the variable into a register and use that multiple times, it must read it from memory every time.  It also must not read it from the CPU cache, it must make sure that every read comes straight from memory.  And finally, it stops the JVM from creating a local copy of the field in the threads stack frame.
</p>

<p>
So, adding the volatile keyword, like so:
</p>

<pre class="prettyprint"><code class="language-java">public class ConcurrencyFun implements Runnable
{
    private volatile String str;
    void setStr(String str)
    {
        this.str = str;
    }
    public void run()
    {
        while (str == null);
        System.out.println(str);
    }
    public static void main(String[] args) throws Exception
    {
        ConcurrencyFun fun = new ConcurrencyFun();
        new Thread(fun).start();
        Thread.sleep(1000);
        fun.setStr("Hello world!!");
    }
}
</code></pre>

<p>
results in the expected behaviour happening, the program waits one second, prints out "Hello world!!" and then exists.
</p>

<h3>The complexity of concurrency</h3>

<p>
There are other ways to make the above code work.  For example, if in the while loop, you add some code that prints something out, you will find that it works.  My guess at the reason for this is that the register storing <tt>str</tt> ends up getting used for something else, and so on each iteration, <tt>str</tt> gets read from memory.  Note that this is not a real fix, it is still possible for problems to occur, and indeed on some architectures the program still will not exit.  Another thing that will work is to invoke Java with the <tt>-Xint</tt> argument.  This disables machine code compilation, and hence makes concurrency issues arising from registers and CPU caches much less likely.  But again, it's not a solution.  Using the volatile keyword is the only solution that guarantees that it will work, every time, on every platform.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2009-04-24-java_concurrency_and_volatile</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2009-04-24 09:41:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1246919779459</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>ren</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>87.194.6.55</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2009-07-07 08:36:19</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[It happens also in my windows machine (64 bit vista) on Java6 Hotspot&nbsp; 64 bit VM. Quite interesting ...]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1364915921526</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Ben G</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>ben.gilbert@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>195.234.243.2</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-04-03 02:18:41</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;'<span style="font-family: 'Trebuchet MS', 'Lucida Grande', Tahoma, Verdana, Arial, sans-serif; font-size: 13px; line-height: 19px; ">The volatile keyword is a keyword that very few Java developers know the meaning of, let alone when they should use it' </span></p>
<p><span style="font-family: 'Trebuchet MS', 'Lucida Grande', Tahoma, Verdana, Arial, sans-serif; font-size: 13px; line-height: 19px; ">Just wondering where this came from? I'm a Java developer (dabble in Scala and C) and every Java developer I've met with &gt; 2yrs experience knows about volatile and when to use it. Not saying they or I don't make mistakes from time to time but its not a new concept. I wonder what developers you are refering to?</span></p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Configuring Tomcat to use Apache SSL certificates</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2010/01/21/configuring_tomcat_to_use_apache_ssl_certificates.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
In a typical SSL configuration for a Tomcat web server, Apache sits in front of Tomcat as a reverse proxy, and does the SSL.  This was the configuration of some systems I work with.  There are a number of reasons why this configuration is used, the primary one being that Apache's SSL implementation is much faster than Tomcat's.  So it's not often that you would go from using this configuration to switching to a Tomcat only configuration, but that's exactly what I just did.
</p>

<p>
The reason for doing this is that we wanted to use Tomcat's NIO connector, in order to use Tomcat's <a href="http://tomcat.apache.org/tomcat-6.0-doc/aio.html">comet capabilities</a>.  Setting up SSL with Tomcat is something that I had never done before, I had heard though that it was not easy.  After trying to do it without really understanding what I was doing, I found that it really wasn't easy.  The problem was that everything I looked at on the web talked about using the Java <tt>keytool</tt> to generate a key, so you could send a certificate signing request to your trusted authority to sign.  The thing is, I already had a key, and a certificate, and the Java <tt>keytool</tt> utility that does all this key manipulation has no way of importing an existing key.
</p>

<p>
Eventually I found <a href="http://www.agentbob.info/agentbob/79-AB.html">this utility</a>, and was able to get things working.  But, as often happens when solving these problems, I then read back over the <a href="http://tomcat.apache.org/tomcat-6.0-doc/ssl-howto.html">Tomcat SSL HowTo</a>, and now with more of an understanding of what I was doing I found a much simpler and easier way of getting Tomcat to use my existing certificate.
</p>

<p>
The trick is, rather than use a JKS repository, which is the native Java SSL certificate store, and what most of the documentation on the web talks about, is use a <tt>PKCS12</tt> repository, which is an internet standard, and can be manipulated using standard tools such as <tt>openssl</tt>.  This tool requires three files, which are easy to find from your Apache SSL configuration, one is the private key file, another is the certificate, and finally the certificate signer chain.  The command to run is:</p>

<pre style="border:1px dashed black; padding:4px 7px;">
openssl pkcs12 -export -in mycert.crt -inkey mykey.key \
                        -out mycert.p12 -name tomcat -CAfile myCA.crt \
                        -caname root -chain
</pre>

<p>
The <tt>name</tt> and <tt>caname</tt> arguments can be anything, they're just convenient aliases to allow later manipulation of the file.  The command will prompt you for a password, this password gets set as the <tt>keystorePass</tt> in the Tomcat connector configuration.  The <tt>keystoreType</tt> must be set to <tt>PKCS12</tt>.  Here is my Tomcat configuration:
</p>

<pre class="prettyprint"><code class="language-xml">    &lt;Connector port="8443" maxHttpHeaderSize="8192"
               maxThreads="150" enableLookups="false" acceptCount="100"
               connectionTimeout="20000" disableUploadTimeout="true"
               protocol="org.apache.coyote.http11.Http11NioProtocol"
               SSLEnabled="true" scheme="https" secure="true" clientAuth="false" sslProtocol="TLS"
               keystoreFile="/path/to/mycert.p12"
               keystoreType="PKCS12" keystorePass="tomcat"/&gt;
</code></pre>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2010-01-21-configuring_tomcat_to_use_apache_ssl_certificates</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2010-01-21 10:55:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Cocoa Petition</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2010/02/18/cocoa_petition.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
If you've been following my Facebook, Twitter or Google Buzz updates, you may have noticed I've asked for feedback from beta testers to check that a website I've been developing displays in all browsers.  This has been a project I've done in my spare time, and I thought I'd blog about it, to increase both public awareness and Google ranking :)
</p>

<p>The website is <a href="http://cocoapetition.org.au">Cocoa Petition</a>, a petition to the Australian Government to set a date by which importing of cocoa products that involve unacceptable forms of child labour in the production process must be ended.</p>

<h1>The problem</h1>

<img src="images/blogs/chocolate_laborer.jpg" alt="Chocolate Labourer" style="float: right; padding: 10px"/>

<p>The use of child labour in cocoa production is a little known but massive problem.  It is estimated that nearly 300&nbsp;000 children work on the cocoa farms of the Ivory Coast in West Africa, working long hours in dangerous conditions such as spraying pesticides and wielding machetes with no protection, without the opportunity to go to school.  In many cases, the children are working on their family farms, but there are also a significant proportion that are working as slaves.  It is estimated that over 10&nbsp;000 child slaves are trafficked into the Ivory Coast each year to work on the cocoa farms.</p>

<p>Evidence for this unacceptable child labour can be found on the <a href="http://cocoapetition.org.au">Cocoa Petition</a> website, but perhaps the most compelling evidence is that in 2001, an voluntary agreement called the <a href="http://www.cocoaverification.net/Docs/Harkin-Engel%20Protocol.pdf">Harkin-Engel Protocol</a> was signed by many of the major chocolate producers, including Nestlé and Mars/M&amp;M, acknowledging the existence of unacceptable child labour in cocoa production.  Since then, little has been done by these companies about the problem.</p>

<h1>The solution</h1>

<img src="images/blogs/fairtrade.png" alt="Fairtrade Logo" style="float: left; padding: 10px"/>

<p>There is however at least one solution to the problem, that is the <a href="http://www.fta.org.au/">Fairtrade</a> branding.  Fairtrade products guarantee that the farmers and farm workers are paid fairly for their work, and ensures that no unacceptable child labour is used in the production process.  In 2009, <a href="http://www.fta.org.au/cadbury-announcement">Cadbury announced</a> that from Easter 2010, all Cadbury Dairy Milk chocolate sold in Australia and New Zealand will be Fairtrade.  This is great progress, but as a first step to eradicating the use of unacceptable child labour in cocoa production, we need to make sure that no such cocoa is imported into Australia by any company.</p>

<p>Hence, this petition.  Australian laws are clear that importing products that are produced by slaves is illegal, however, the Australian government has so far remained ignorant to the problem.</p>

<h1>My involvement</h1>

<p>So, why would I donate my time and efforts to this cause?  The reason is simple.  As a Christian, I believe that one of the most important things to God is justice.  In the book of Isaiah, which my Bible study group is looking at at the moment, God pleads with Israel to turn from doing wrong, so that he doesn't have to judge them, saying<p>

<p style="padding-left: 40px; text-indent: -20px;">
Stop doing wrong,<br/>
learn to do right!<br/>
Seek justice,<br/>
encourage the oppressed.<br/>
Defend the cause of the fatherless,<br/>
plead the case of the widow.<br/>
<a style="font-style:italic; font-size:8pt;" href="http://www.biblegateway.com/passage/?search=Isaiah+1:17-18&amp;version=NIV">Isaiah 1:17-18 (NIV)</a>
</p>

<p>African children working as slaves to produce chocolate so that Australian children can satisfy their sweet teeth is as far from just as I can think.  So, this is a cause that I really believe I should be fighting for.  If you feel the same way as I do over this injustice, then please, visit the <a href="http://cocoapetition.org.au">Cocoa Petition</a> site, and get involved.</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2010-02-18-cocoa_petition</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2010-02-18 00:11:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1266448230848</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Jason Berry</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jason@thevagabond.net</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>59.167.164.33</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-02-18 10:10:30</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[I'm definitely for this, thanks for raising our awareness!<br />
<br />
They really need an online petition though, or at least be able to email in the signatures!]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1266449686342</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>59.167.164.33</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-02-18 10:34:46</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[There have been many online petitions about cocoa slavery in the past, but the government doesn't usually listen to these, because there's usually no way to verify that all the signers are unique and are from Australia.&nbsp; Hard copy signatures however the government does sit up and listen to, and if nothing else, if we have enough signatures, it will make it on the agenda to talk about in parliament.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Facebook OpenID integration in Pebble</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2010/06/18/facebook_openid_integration_in_pebble.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
I've taken a shot at implementing Facebook OpenID integration into Pebble.  To see the results, at the bottom of this page, click "Add Comment", and then click the Facebook Login link.
</p>

<p>
Implementing this has been pretty simple.  All the magic happens on the client side, at no point does Pebble make a request on Facebook, and the user is, as far as Pebble is concerned on the server side, never authenticated or trusted in any way.  All this integration does is puts the users name, profile picture and profile link in the author, avatar and website fields of the Pebble comment form.
</p>

<p>
The bulk of the work has been in modifying pebble to handle profile pictures with comments, and adding a plugin point for this type of plugin.  What follows is a quick tutorial of how to implement a similar OpenID authentication on your site.
</p>

<h2>1. Create an application on Facebook</h2>

<p>
Facebook provides some simple instructions on how to do this <a href="http://wiki.developers.facebook.com/index.php/Connect/Setting_Up_Your_Site">here</a>.  You will need to create a new application for every different website that you want to integrate with, as Facebook will validate the base URL that it forwards to.
</p>

<h2>2. Add the login button to your page</h2>

<p>
There are a number of ways to do this, but the simplest way is to use the Facebook Markup Language (FML).  In the next step we'll configure Facebook to render FML tags, for now, the only thing you need to do is put the following code where you want the login button to appear:
</p>

<pre class="prettyprint"><code class="language-html">&lt;fb:login-button/&gt;
</code></pre>

<h2>3. Initialise the Facebook API</h2>

<p>
The Facebook client side libraries require that they be initialised.  This is also the stage where Facebook will render any FML tags you've included in the page.  Initialising the Facebook client side API is best done at the bottom of the page, so that it doesn't slow down the loading of the rest of the page.  At this stage you'll need the Facebook application ID from the application you created in step one:
</p>

<pre class="prettyprint"><code class="language-html">&lt;div id="fb-root"&gt;&lt;/div&gt;
&lt;script src="http://connect.facebook.net/en_US/all.js"&gt;&lt;/script&gt;
&lt;script&gt;
    FB.init({appId: "YOUAPPIDHERE", status: false, cookie: true, xfbml: true});
&lt;/script&gt;
</code></pre>

<h2>4. Write a function to handle a logged in user</h2>

<p>
This is where we do most of the work.  The Facebook javascript API provides an event library, and we can use this to update our page with the users details after they log in to Facebook.  This event will only fire when the user logs in or logs out, if a user comes back to your site, and they are already logged in, the event won't fire, even if they click log in, hence we also need to check if the user is already logged in when the page loads.  So we're going to write a function that will handle both of these situations.  The function accepts a Facebook response object, and checks if the response has a session.  This indicates that the user is logged in.  If they are logged in, we make a call on the <tt>/me</tt> resource of the Facebook Graph API, which will return the users name, link to their profile, and other things.  This function can go anywhere in your code, preferably in a Javascript file along with the rest of your scripts:
</p>

<pre class="prettyprint"><code class="language-javascript">  function updateFacebookCommentAuthor(response) {
    if (response.session) {
      FB.api("/me", function(response) {
        var avatar = "http://graph.facebook.com/" + response.id + "/picture?type=square";
        document.forms["commentForm"].elements["author"].value = response.name;
        document.forms["commentForm"].elements["website"].value = response.link;
        document.forms["commentForm"].elements["avatar"].value = avatar;
      });
    }
  }
</code></pre>

<h2>5. Subscribe to login events</h2>

<p>
Lastly, we want the above function to be called when a page loads if the user is already logged in, and if a user logs in clicking the login function.  This can either be done at the bottom of the page after the Facebook API is initialised, or it can be done in in the window on load event.  Pebble uses prototype, so I bind it to the window on load event using that:
</p>

<pre class="prettyprint"><code class="language-javascript">  Event.observe(window, "load", function() {
    FB.Event.subscribe("auth.sessionChange", updateFacebookCommentAuthor);
    FB.getLoginStatus(updateFacebookCommentAuthor);
  });
</code></pre>

<p>
This is all you need for basic OpenID authentication using Facebook.  Of course, you might want to, instead of just populating the form, actually render the username and profile picture in the page, as has been done in Pebble.  Another thing you may want to provide is the ability for the user to log out, in case they are using someone else's computer and that person is logged in.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2010-06-18-facebook_openid_integration_in_pebble</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2010-06-18 22:14:32</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1276873586257</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Denise Fernandez</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.facebook.com/profile.php?id=593745270</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>124.171.24.211</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-06-19 01:06:26</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Cool, might give this a go :)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1276937618458</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Arun Bijapur</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.facebook.com/profile.php?id=666737434</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>59.164.109.176</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-06-19 18:53:38</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Excellent...</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1276873586257</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1374328689546</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>jade</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jadcelestedamiles@y7mail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>https://www.facebook.com/jadeceleste.damiles</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>125.60.156.249</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-20 23:58:09</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi James Roper,</p>
<p>Hope you could help me? &nbsp;I coudnt access my own fb account just because of the code Generator.Would you please help to break this code.</p>
<p>please</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1276873586257</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1276933272797</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Brad Baker</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.facebook.com/bbakerman</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>115.70.60.80</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-06-19 17:41:12</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>So does t work? &nbsp;I like the custom tag thingy. &nbsp;I reckon thats a great way t name space your extensions&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1277072169949</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anton Rehrl</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.facebook.com/arehrl</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>202.53.199.21</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-06-21 08:16:09</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;:D</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1285339435814</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>William V. Burns</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.facebook.com/william.v.burns</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>138.163.0.44</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2010-09-25 00:43:55</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[This is most interesting - I've just started working with Java servlets, and stumbled across Pebble as a blogging solution.

The FaceBook integration is a very desirable feature.

Keep up the good work!]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1373472764826</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>celebrity escort</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>dong_oleary@yahoo.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.karige.lt/phpinfo.php?a[]=%3Ca+href=http://Oslo-escort-girls.com/about-us.html%3EEscort+Girls+Oslo%3C/a%3E</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>23.19.132.148</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-11 02:12:44</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[My relatives always say that I am killing my time here at web, except I know I am getting 
knowledge daily by reading such pleasant articles or reviews.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Cracking Random Number Generators - Part 1</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
This is the first in a series of posts I'm going to give on how to crack common random number generators.
</p>

<p>
Random number generators are a key part of web security.  They are used all over the place, from session tokens to tokens to sent to an email address to verify its owner made a particular request, to CAPTCHA tokens and so on.  In all these applications, if the token can be predicted, then the security mechanism can be broken, and a malicious user will be able to identify themselves as someone who they are not.
</p>

<p>
There are obvious concerns with publishing instructions explaining how to exploit security vulnerabilities.  However, I have some good reasons for doing so:
</p>

<ol>
<li>
There is nothing new about the vulnerabilities associated with random number generation, nothing that I'm publishing here is new to hackers either.
</li>
<li>
Hacking random number generators is actually very easy to do, and hackers know this.
</li>
<li>
Many developers that I have come across are of the belief that hacking random number generators is a hard to exploit avenue of attack.  Even when they know that there are dangers in random number generation, their understanding is often incomplete, leading them to make serious mistakes.
</li>
<li>
None of the algorithms I supply here can be used as is, they require an attacker to know exactly what algorithm is being used on a system, how to extract numbers out of it, and having then cracked the number generator, how to exploit it.  Knowing all this I believe is harder than working out for yourself how to crack the random number generators themselves, so if they couldn't work out what I am saying for themselves, they likely won't be able to use it to hack into a real system.
</li>
</ol>

<p>
Hence I believe that there is nothing a hacker will learn from this series that they can't work out for themselves.  Meanwhile, many developers live in ignorance, and would never bother to see if their understanding of random number generators is flawed.  My hope therefore is to give developers an understanding of just how dangerous their ignorance can be.
</p>

<p>
What I won't talk about in this series is anything about the maths of random number generators, beyond explaining how the algorithms are implmented.  Why a particular algorithm makes a good PRNG is beyond the scope of this series.
</p>

<h2>Linear Congruential PRNG</h2>

<p>
The first PRNG we will focus on is the linear congruential PRNG.  Rather than talk theoretically, we'll look at a particularly common one, Java's default random number generator, <tt>java.util.Random</tt>.
</p>

<p>
The idea behind a linear congruential PRNG is that you store a single number as the internal state.  This state is usually called the seed, because the two numbers are usually one in the same thing.  In Java's case, this is not quite true, but to keep our explanation simple, we will assume that it is.  The seed has a precision, in Java's case, the precision is 48 bits.
</p>

<p>
The seed changes each time a number is generated, by applying a simple formula.  That formula is:
</p>

<pre class="prettyprint"><code class="language-java">seed = (seed * multiplier + addend) mod (2 ^ precision)
</code></pre>

<p>
The key to this being a good random number generator is the choice of <tt>multiplier</tt> and <tt>addend</tt>.  In Java's case, the multiplier is 25214903917, and the addend is 11.  As I said earlier, what makes these two numbers good is beyond the scope of this series.  The mod operation is implemented using a bitmask, 48 1's.
</p>

<p>
<tt>java.util.Random</tt> never gives out its full 48 bits of state, it gives out at most 32 on each call to <tt>nextInt()</tt>.  Other calls that return more bits, for example, <tt>nextLong()</tt>, generate multiple 32 bit numbers and combine them together.  To convert the 48 bit seed to a 32 bit int, the seed is bitshifted to the right by 16 bits.
</p>

<h2>Determining the seed from a Linear Congruential PRNG's output</h2>

<p>
It is not possible, from one int generated by <tt>java.util.Random</tt>, to determine the seed, because 16 bits were discarded by the bitshift.  However, if we obtain a second int from it, we can quite easily guess what those remaining 16 bits were, by brute forcing all possible values, and seeing if the next value from that matches the second value we obtained.  16 bits is only 65536 possible values, and calculating the next int is only a few instructions, so this can be computed in a fraction of a second.
</p>

<p>The code in Java looks like this:</p>

<pre class="prettyprint"><code class="language-java">Random random = new Random();
long v1 = random.nextInt();
long v2 = random.nextInt();
for (int i = 0; i &lt; 65536; i++) {
    long seed = v1 * 65536 + i;
    if (((seed * multiplier + addend) &amp; mask) &gt;&gt;&gt; 16) == v2) {
        System.out.println(&quot;Seed found: &quot; + seed);
        break;
    }
}
</code></pre>

<p>
As can be seen, given two integers from <tt>java.util.Random</tt>, we can predict all future generated integers.  In <a href="2010/09/21/cracking_random_number_generators_part_2.html">Part 2</a> we'll get a little more involved in the maths, and learn how to calculate the previous seeds.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2010-09-20-cracking_random_number_generators_part_1</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2010-09-20 21:41:01</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1328554521472</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Derrick</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>dpi2byu@yahoo.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>97.75.189.62</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-02-07 05:55:21</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I'm unable to get the code to work that calculates the seed from two random integers. The if statement is never true. Can anyone see what I'm going wrong?</p>
<p><br />
&nbsp;&nbsp;&nbsp; private static long multiplier = 0x5DEECE66DL;<br />
&nbsp;&nbsp;&nbsp; private static long addend = 0xBL;<br />
&nbsp;&nbsp;&nbsp; private static long mask = (1L &lt;&lt; 48) - 1;</p>
<p><br />
&nbsp;&nbsp;&nbsp; public static void test()<br />
&nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Random random = new Random();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long v1 = random.nextInt();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long v2 = random.nextInt();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 65536; i++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long seed = v1 * 65536 + i;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((((seed * multiplier + addend) &amp; mask) &gt;&gt;&gt; 16) == v2) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;Seed found: &quot; + seed);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1328556160295</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>77.185.14.229</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-02-07 06:22:40</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi Derrick,</p>
<p>If you run it a few times (so it runs with different seeds), you should find sometimes it will be true, and sometimes it won't.&nbsp; Do it enough times, you should find it works 1 in 4 times.&nbsp; The reason for this is that the seed is 48 bits, but when the bitshifted seed is converted to an int, if the first bit is 1, then it becomes a completely different negative number to the original long (if you don't understand why, read up on two's compliment numbers).&nbsp; Then you're casting it back to a long, but when you do that, java ensures that the long number is the same number as the int number, which from a binary perspective means it's completely different to the original value that was in the seed.</p>
<p>I didn't include this conversion in my pseudo code so that I could keep it simple.&nbsp; To convert the int back to a long, you need to use an if statement, to see if the original number is negative, and then handle it slightly differently in that case.&nbsp; I'll let you work out how.</p>
<p>Cheers,</p>
<p>James</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1328554521472</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1366993540701</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>zynick</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>me@zynick.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.zynick.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.48.48.6</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-04-27 02:25:40</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi Derrick,</p>
<p>I've updated the code to make sure it works ALL the time:</p>
<pre>
    public static void test()
    {
        Random random = new Random();
        long v1 = random.nextInt();
        <strong>long mask32 = (1L &lt;&lt; 32) - 1; // 32 bit masking</strong>
        long v2 = random.nextInt()<strong> &amp; mask32;</strong>
        for (int i = 0; i &lt; 65536; i++) {
            long seed = v1 * 65536 + i;
            if ((((seed * multiplier + addend) &amp; mask) &gt;&gt;&gt; 16) == v2) {
                System.out.println(&quot;Seed found: &quot; + seed);
                break;
            }
        }
    }
</pre>
<p>that is to make sure bits in v2 (type long) remain the same as the bits generated from random.nextInt() (type int) regardless of positive or negative integer.</p>
<p>for example, if random.nextInt() generate int (4 bytes) number -1, the bits of -1 in hex is:&nbsp;<br />
FFFF FFFF</p>
<p>when -1 is cast from int to long (8 bytes), the bits became:<br />
FFFF FFFF FFFF FFFF</p>
<p>which will cause the result in previous if statement to be false sometimes, since the value generated by this code (((seed * multiplier + addend) &amp; mask) &gt;&gt;&gt; 16) will always be<br />
0000 0000 xxxx xxxx<br />
(where x is any hex value from 0-F)</p>
<p>by doing masking on random.nextInt() ensure v2 will always be<br />
0000 0000 xxxx xxxx</p>
<p>I have made a sample online you may have a test&nbsp;http://ideone.com/pS58fs</p>
<p>Nice article and thanks!</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1328554521472</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1333752424675</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Igor Terzic</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>terzicigor@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>129.170.127.182</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-04-07 08:47:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>You actually do not need an if statement. This should work:</p>
<p><span>		</span>int x1 = random.nextInt();</p>
<p><span>		</span>int x2 = random.nextInt();</p>
<p><span>		</span>long v1 = x1 &amp; 0x00000000ffffffffL;</p>
<p><span>		</span>long v2 = x2 &amp; 0x00000000ffffffffL;&nbsp;</p>
<p>Thanks for the awesome article btw, it helped me a lot.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1342626195319</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Nikita Arykov</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>nikita.arykov@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>84.237.53.102</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-07-19 01:43:15</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>This problem arise because of incorrect operation with the types int and long, You can replace line for bits shift</p>
<p>long seed = v1 * 65536 + i;</p>
<p>to</p>
<p>seed = (((long) v1) &lt;&lt; 16) + i;</p>
<p>Join us, a very good collection of articles!</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1372357441511</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>John</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>olds9288@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-28 04:24:01</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hello, James, my name is John.&nbsp; I find the topic of PRNGs fascinating and came across your page.&nbsp; I'm currently learning about the guts of computers myself and had some questions regarding Linear Feedback Shift Registers (LFSRs) around the era of the early 1990s.&nbsp; Take for example a 16-bit LFSR which generates not just single random numbers, but sequences of say 10 to 20 numbers.&nbsp; As far as the period (2^16 = 65,536) is concerned, would you expect it to repeat after 65,536 consecutive sequences of 10 to 20 #s?&nbsp; Or, would the individual #s within the sequence repeat after 65,536 individual numbers.&nbsp; Example: If a sequence of 20 numbers, would it repeat after 3,276.8 (65,536/20) sequences of 20, counting only the individual #s within the period? I thought about this while playing an old Nintendo Entertainment System video game the other day called Vegas Dream.&nbsp; They have a Keno game in it and my buddy and I were wondering if we could crack it.&nbsp; Haha.&nbsp; Thanks for any help or feedback.&nbsp; I really enjoyed reading this page...</p>
<p>-John</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1372365353739</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-28 06:35:53</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Let's make the numbers smaller. &nbsp;Let's say the period of the LFSR is P, and the length of the subsequences is S. &nbsp;Now let P = 8, this might be a sequence you get out of it:</p>
<p>3, 2, 5, 7, 1, 0, 4, 6</p>
<p>This sequence will repeat itself indefinitely. &nbsp;Now if we say S = 3, you will get this out of it:</p>
<p>(3, 2, 5), (7, 1, 0), (4, 6, 3), (2, 5, 7), (1, 0, 4), (6, 3, 2), (5, 7, 1), (0, 4, 6)</p>
<p>And that will repeat indefinitely, it has a period of 8 too. &nbsp;Now remove the paranthesis, and you'll see that the sequence above is just the first sequence repeated 3 times. &nbsp;So although it is a period of 8 distinct sequences, there is a pattern within those sequences. &nbsp;But it won't always be a period of 8. &nbsp;The period will be LCM(P, S) / S, where LCM is the lowest common multiple function. &nbsp;So, take subsequences of 6 as an example:</p>
<p>(3, 2, 5, 7, 1, 0), (4, 6, 3, 2, 5, 7), (1, 0, 4, 6, 3, 2), (5, 7, 1, 0, 4, 6)</p>
<div>It has a period of 4 before it starts repeating, since LCM(6, 8) is 24, s. &nbsp;Subsequences of 4 will have a period of 2, and subsequences of 8 will have a period of 1.</div>
<div>&nbsp;</div>
<div>So to answer your original question, a 16 bit LFSR, taking sequences of 20 out, LCM(65536, 20) is&nbsp;327680, divide that by 20, and you get a period of 16384.</div>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1372357441511</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1372797869672</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>John</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>olds9288@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>68.9.202.190</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-03 06:44:29</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>That makes sense to me now and that is very interesting.&nbsp; Now, as far as something like the keno game on Vegas Dream.&nbsp; Let us still assume it's a 16-bit LFSR.&nbsp; I am assuming the last # of the sequence will be the 65,535th # as I understand no #s can be produced in the all-zeroes state.&nbsp; Since in keno, none of the #s can repeat, what if the next logical # in the 65,535 # sequence would be a repeater?&nbsp; Does it simply jump to the next non repeating #?&nbsp; When the invisible parenthesis shift, what if one of those #s would make a repeater?&nbsp; Thanks again...</p>
<p>John</p>
<p><style type="text/css">
		<!-- 
		BODY,DIV,TABLE,THEAD,TBODY,TFOOT,TR,TH,TD,P { font-family:"Arial"; font-size:x-small }
		 -->
	</style></p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1372365353739</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1383051304778</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>uday yadav</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>udaysyadav@rediffmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://nil.</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>27.4.165.147</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-10-29 23:55:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Yesterday I posted my idea and query. &nbsp;but is not displayed here yet.</p>
<p>I want a single random digit generator. Can this system be cracked?</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1372365353739</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1374693229303</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>jaluzele rulouri</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>melindaguenther@web.de</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://American-Appraisal.hu/phpinfo.php?a[]=%3Ca+href=http://plaseinsecte.decorjunkie.com%3Erulouri+exterioare%3C/a%3E</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>116.228.55.184</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-25 05:13:49</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[If some one desires expert view about blogging and site-building 
then i propose him/her to go to see this web site, Keep up the 
pleasant job.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1374759267421</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>increase computer speed</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>donny.mcarthur@inbox.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://demo.jexiste.ca/?a[]=%3Ca+href=http://www.broadbandindia.com/news/android-fragmentation-challenge-to-developers-50-market-share-by-2015/comment-page-1/%3Ecomputer+speed+test+free%3C/a%3E</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>141.85.252.136</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-25 23:34:27</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Ready - Boost will test your memory when you first plug 
it in and, if it's not up to scratch, Ready - Boost will refuse to use it. Scans ' Instead of running the preset scans with any anti spyware 
program, schedule them for times when you won't be using your computer. It can occur during everyday usage, when you install new programs, when windows updates automatically install themselves and for many other reasons as well.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1382984989680</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>uday yadav</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>udaysyadav@rediffmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://nil.</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>27.4.167.112</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-10-29 05:29:49</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>If I attach a random digit to serial numbers, it becomes random isn't it?</p>
<p>For example. Below are some serial numbers.</p>
<p>12345678901, &nbsp; &nbsp; 12345678902, &nbsp; &nbsp; 12345678903, &nbsp; &nbsp; 12345678904, &nbsp; &nbsp; &nbsp;12345678905,</p>
<p>12345678906, &nbsp; &nbsp; &nbsp;12345678907, &nbsp; &nbsp;12345678908, &nbsp; &nbsp; 12345678909, &nbsp; &nbsp; &nbsp; 12345678910.</p>
<p>now I add a single digit to each.</p>
<p>123456789017, &nbsp; &nbsp;123456789024, &nbsp;123456789039, &nbsp; 12345678904, &nbsp; &nbsp; &nbsp; 123456789056,</p>
<p>123456789061, &nbsp; &nbsp; 123456789072, &nbsp;123456789081, &nbsp;123456789093, &nbsp; &nbsp; &nbsp;123456789109.</p>
<p>I think above random numbers are easy to create. But will they need algorithm to be created? If yes, can it be cracked?</p>
<p>Please answer.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span>&nbsp;</span>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Cracking Random Number Generators - Part 2</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2010/09/21/cracking_random_number_generators_part_2.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
In <a href="2010/09/20/cracking_random_number_generators_part_1.html">Part 1</a> of this series, we saw how simple it is to predict future values generated by a linear congruential PRNG.  In this part, we will look at how to calculate past values generated by a linear congruential PRNG.
</p>

<h2>Undoing three simple operations</h2>

<p>
As we saw before, going forward on a pseudo random number generator involves multiplying by the multiplier, adding the addend, and then trimming the result back down to 48 bits.  Surely this can be solved by a simple subtraction and divide?
</p>

<p>
It's not that simple.  Let's have a look at it in binary:
</p>

<pre>
Seed 1:     110011111101000111101001010011010100010001001111
Multiplier:              10111011110111011001110011001101101 *
------------------------------------------------------------
             11111011111111000111100000110010000111110100011
Addend:                                                 1011 +
------------------------------------------------------------
Seed 2:      11111011111111000111100000110010000111110101110
Addend:                                                 1011 -
------------------------------------------------------------
             11111011111111000111100000110010000111110100011
Multiplier:              10111011110111011001110011001101101 \
------------------------------------------------------------
                                               1010101110110
</pre>

<p>
As you can see, we've done the multiply, the add, then subtracted the addend, and divided by the multiplier, and the result is nothing like the original seed.  Why not?  The problem is the bitmask we applied.  When we applied the multiplier originally, it overflowed beyond 48 bits.  The most significant bits were discarded, meaning that a simple divide can not get us the result.  So how can we find the result?
</p>

<p>
The solution comes in going back to primary school.  In primary school we learnt how to do long multiplication.  Let's look at what multiplying two small binary numbers looks like, using long multiplication:
</p>

<pre>
     101101
     001011 *
-----------
     101101
    101101
   000000
  101101
 000000
000000
-----------
00111110111 
     111111 &amp;
-----------
     110111
</pre>

<p>
Let's say that the first number is our multiplier, it is the known, and the second number is the unknown that we want to determine.  The final number is the seed that we have, trimmed down to the number of bits, it is known, but the excess bits are not.
</p>

<p>
It should be clear from the above that there is a pattern, for each 1 in the second number, there is a corresponding first number on the line below.  We can also see that if the last digit of the original number was 0, then the last digit of the new number will be 0, if it was 1, then the new number will be 1.  In the above example we can determine therefore that the last digit in the original number was 1.  Because we know that, subtract the multiplier from our seed, and reverse the effects of the value of the last number in the original number.  Here is the result:
</p>

<pre>
Result: -----1

     101101
     00101- *
-----------
    101101
   000000
  101101
 000000
000000
-----------
00111000010 
     111111 &amp;
-----------
     000010
</pre>

We can then continue the process with the next digit, if the next digit from the end in the seed is 1, then the next digit in the result is 1, otherwise its 0, and if it is 1, we subtract the multiplier, this time bitshifted across by 1:

<pre>
Result: ----11

     101101
     0010-- *
-----------
   000000
  101101
 000000
000000
-----------
00101101000 
     111111 &amp;
-----------
     101000
</pre>

<p>
Continuing this process, of scanning from right to left, taking the next digit in the seed, and subtracting the effect that that digit would have had on the seed, we can determine the end result.
</p>

<p>
This only works if our multiplier is odd, which it is.  If it weren't, we would only have to bitshift the seed to the left by the number of 0's on the end of the multiplier, and every bit that we shifted across would be one less bit of the final result that we could determine.  So our algorithm for determining the previous seed looks like this:
</p>

<pre class="prettyprint"><code class="language-java">long seed = currentSeed;
// reverse the addend from the seed
seed -= addend; // reverse the addend
long result = 0;
// iterate through the seeds bits
for (int i = 0; i &lt; 48; i++)
{
    long mask = 1L &lt;&lt; i;
    // find the next bit
    long bit = seed &amp; mask;
    // add it to the result
    result |= bit;
    if (bit == mask)
    {
        // if the bit was 1, subtract its effects from the seed
        seed -= multiplier &lt;&lt; i;
    }
}
System.out.println(&quot;Previous seed: &quot; + result);
</code></pre>

<p>
And there we have it, we can now predict all previous values from <tt>java.util.Random</tt> given the current seed.
</p>

<p>
That covers everything you need to know about hacking a linear congruential PRNG.  However, most common platforms don't use such a simple PRNG as their default random number generator.  In <a href="2010/09/22/cracking_random_number_generators_part_3.html">Part 3</a> we will look at how to hack a very popular PRNG, the Mersenne Twister.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2010-09-21-cracking_random_number_generators_part_2</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2010-09-21 18:38:47</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351610746792</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>am</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>adi_mutu06@yahoo.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>109.166.152.146</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-31 02:25:46</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>very interesting, but i'm missing something, perhaps you can help...</p>
<p>You say there: &quot;Let's say that the first number is our multiplier, it is the known, and  the second numbe is the unknown that we want to determine&quot;.</p>
<p>&nbsp;</p>
<p>Can you point exactly in the text, which is the 1st and which is the 2nd number?</p>
<p>&nbsp;</p>
<p>Thanks</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Cracking Random Number Generators - Part 3</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2010/09/22/cracking_random_number_generators_part_3.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
In <a href="2010/09/20/cracking_random_number_generators_part_1.html">Part 1</a> and <a href="2010/09/21/cracking_random_number_generators_part_2.html">Part 2</a> of this series we focussed on one of the simplest PRNG's, the linear congruential PRNG.  We looked at detail into Java's implementation, and then wrote algorithms to crack the seed, and to calculate previous seeds from the current seed.
</p>

<p>
Not many other languages use a linear congruential PRNG.  Originally, the C and C++ implementations of <tt>rand()</tt> were very simple linear congruential PRNGs, but these days they use more complex algorithms to generate higher quality random numbers.  PHPs <tt>rand()</tt> function delegates to the platforms <tt>rand()</tt> function, so depending on the platform, it may be a linear congruential PRNG.
</p>

<p>
A much more popular PRNG algorithm is the Mersenne Twister.  This is used by Ruby's <tt>rand()</tt> function, Pythons <tt>random</tt> module, and PHP's <tt>mt_rand()</tt> function.
</p>

<p>
The Mersenne Twister was invented in 1997.  The most common implementation of it uses an internal state of 624 32 bit words (integers).  These integers are handed out sequentially, applying a transform algorithm to each one before handing them out.  Once all 624 integers have been handed out, an algorithm is applied to the state, to get the next 624 integers.
</p>

<h2>Generating the next state</h2>

<p>
The algorithm for generating the next state is simple, it heavily uses bitwise operations such as shifts, masks and xors.  The algorithm is as follows:
</p>

<pre class="prettyprint"><code class="language-java">int[] state;
// Iterate through the state
for (i = 0; i &lt; 624; i++) {
  // y is the first bit of the current number,
  // and the last 31 bits of the next number
  int y = (state[i] &amp; 0x80000000) + (state[(i + 1) % 624] &amp; 0x7fffffff);
  // first bitshift y by 1 to the right
  int next = y &gt;&gt;&gt; 1;
  // xor it with the 397th next number
  next ^= state[(i + 397) % 624];
  // if y is odd, xor with magic number
  if ((y &amp; 1L) == 1L) {
    next ^= 0x9908b0df;
  }
  // now we have the result
  state[i] = next;
}
</code></pre>

<h2>Obtaining the next number</h2>

<p>
Before handing the next integer out, a transform is applied to each integer.  This transform has 4 steps, each step involves xoring the number with a bit shifted and bit masked version of itself.  The algorithm is as follows:
</p>

<pre class="prettyprint"><code class="language-java">currentIndex++;
int tmp = state[currentIndex];
tmp ^= (tmp &gt;&gt;&gt; 11);
tmp ^= (tmp &lt;&lt; 7) &amp; 0x9d2c5680;
tmp ^= (tmp &lt;&lt; 15) &amp; 0xefc60000;
tmp ^= (tmp &gt;&gt;&gt; 18);
return tmp;
</code></pre>

<h2>Cracking the Mersenne Twister</h2>

<p>
Since the Mersenne Twister contains 624 integers of internal state that it hands out sequentially, obtaining 624 consecutive integers from the generator is the first step in cracking it.  In a common webapp, this might be done by issuing 624 requests, and recording the token.  If we can then undo the transform applied to these integers, we will then have the complete internal state.  Having calculated that, we can predict every subsequent number.
</p>

<p>
In order to undo the transform, we will take it one step at a time, in reverse order.  The step of the transform we need to understand first is therefore:
</p>

<pre class="prettyprint"><code class="language-java">tmp ^= (tmp &gt;&gt;&gt; 18);
</code></pre>

<p>
Let's look at what this looks like in binary:
</p>

<pre>
<b>101101110101111001</b>11111001110010                    <i>tmp</i>
00000000000000000010110111010111<span style="color: #AAA">100111111001110010</span>  <i>tmp &gt;&gt;&gt; 18</i>
<b>101101110101111001</b>01001110100101                    <i>tmp ^ (tmp &gt;&gt;&gt; 18)</i>
</pre>

<p>
As is clear from the bold bits above, we can easily work out what the first 18 bits of the previous number was, they are the same as the result.  Taking those 18 bits, we can bitshift them across 18 bits, and xor them with the value, this will give us the entire number.  A generalised algorithm can be written to do this for any arbitrary number of bits, and we can reuse this to reverse the first step as well:
</p>

<pre class="prettyprint"><code class="language-java">int unBitshiftRightXor(int value, int shift) {
  // we part of the value we are up to (with a width of shift bits)
  int i = 0;
  // we accumulate the result here
  int result = 0;
  // iterate until we've done the full 32 bits
  while (i * shift &lt; 32) {
    // create a mask for this part
    int partMask = (-1 &lt;&lt; (32 - shift)) &gt;&gt;&gt; (shift * i);
    // obtain the part
    int part = value &amp; partMask;
    // unapply the xor from the next part of the integer
    value ^= part &gt;&gt;&gt; shift;
    // add the part to the result
    result |= part;
    i++;
  }
  return result;
}
</code></pre>

<p>
This method can be used to reverse the two right bitshift operations.  The left bitshift operations also include masking the bitshifted number with a magic number, so when we unapply <tt>part</tt> as above, we have to apply the mask to it, as follows:
</p>

<pre class="prettyprint"><code class="language-java">int unBitshiftLeftXor(int value, int shift, int mask) {
  // we part of the value we are up to (with a width of shift bits)
  int i = 0;
  // we accumulate the result here
  int result = 0;
  // iterate until we've done the full 32 bits
  while (i * shift &lt; 32) {
    // create a mask for this part
    int partMask = (-1 &gt;&gt;&gt; (32 - shift)) &lt;&lt; (shift * i);
    // obtain the part
    int part = value &amp; partMask;
    // unapply the xor from the next part of the integer
    value ^= (part &lt;&lt; shift) &amp; mask;
    // add the part to the result
    result |= part;
    i++;
  }
  return result;
}
</code></pre>

<p>
Using these two functions, we can unapply the transformation applied to the numbers coming out of the PRNG:
</p>

<pre class="prettyprint"><code class="language-java">int value = output;
value = unBitshiftRightXor(value, 18);
value = unBitshiftLeftXor(value, 15, 0xefc60000);
value = unBitshiftLeftXor(value, 7, 0x9d2c5680);
value = unBitshiftRightXor(value, 11);
</code></pre>

<p>
Having applied the above algorithm to 624 consecutive numbers from the PRNG, we now have the complete state of the Mersenne Twister, and can easily determine every subsequent value.  In <a href="2010/09/25/cracking_random_number_generators_part_4.html">Part 4</a> of the series, we'll investigate how to find previous values generated by the Mersenne Twister, and also discuss how to deal with being unable to get consecutive numbers out of the PRNG.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2010-09-22-cracking_random_number_generators_part_3</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2010-09-22 23:07:21</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1316457888296</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>tbenst@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>138.16.40.90</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2011-09-20 04:44:48</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Doesn't the bitwise AND operator destroy data? I don't believe you can recover the original number.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1316461332837</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>91.66.72.91</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2011-09-20 05:42:12</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>You're right that the bitwise AND does destroy data, however, if you look carefully, its not being used to mask the original number, but rather to mask the value that is XORed with the original number.&nbsp; That value is a masked/bitshifted version of the original number, but because of the bitshift, we are left with the number being partially recoverable, and using that part, we can systematically recover the rest of the number after applying the data losing mask to the part.</p>
<p>It's hard to explain in words, but if you don't believe me, I'd suggest writing out the binary for yourself on pen and paper, and applying the above algorithm to it.&nbsp; That's the way I worked these algorithms out, by writing it out on pen and paper and noticing the patterns.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1316457888296</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1316494744946</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>tbenst@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>138.16.40.90</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2011-09-20 14:59:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>You are of course correct. Thanks for the articles, a great read!<br />
I believe the unBitshiftRightXor method can be simplified:<br />
long unBitshiftRightXor(long value, int shift) {<br />
// long because Mersenne is unsigned, while java int is signed<br />
&nbsp;&nbsp;&nbsp; return(value ^ (value &gt;&gt;&gt; shift));<br />
}<br />
For the 15 bit left shift this also works<br />
long unBitshiftLeftXor(long value, int shift, long mask) {<br />
&nbsp;&nbsp;&nbsp; return(value ^ ((value &lt;&lt; shift) &amp; mask))<br />
}<br />
Curiously, this fails for most (but not all) value in (0:2^32-1) for the 7 bit shift and 0x9d2c5680; any thoughts why?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1316461332837</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1316500327714</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>91.66.72.91</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2011-09-20 16:32:07</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I'll have to go back to my binary and pen and paper to understand why the method can be simplified.&nbsp; In the case of shifting 17, that will definitely work, but I thought that for shifting less than half of the number of bits in the number, a loop was needed.&nbsp; I don't think I tried anything else though.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1316494744946</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1328911342444</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>86.150.179.215</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-02-11 09:02:22</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;thanks that is a really nice explanation</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1333491889966</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>74.100.46.206</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-04-04 08:24:49</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I don't know what group of people this posting is geared towards so please excuse me if I'm not in that group or groups.</p>
<p>Great job, very detailed, though I don't think&nbsp;I could utilize the info if my life depended on it.&nbsp; Some of the code just doesn't seem to&nbsp;...&quot;jive&quot; and I honestly don't get it.&nbsp; I tried modifying the code for C++ to enable me to decrypt mersenne twister data, but it failed.&nbsp; </p>
<p>It would be awesome if you could provide a straight up copy/paste code and or actual numerical examples (ie: spot 1 is &quot;27&quot; and this is what the &quot;27&quot; looks like at each step, resulting in &quot;XX&quot; for the next 624, spot 1).&nbsp; I know I may be asking too much but figured I&nbsp;might as well. &nbsp;This is the only real info I can find via googling to find out how to decrypt mersenne twister data.</p>
<p>And to answer a possible question, I barely grasp the bit shifts/unbitshift/bitwise ors etc and when&nbsp;I try to combine it all and follow your info, I fail, miserably.&nbsp; Actual numerical examples would probably solidify it for me though. &nbsp;</p>
<p>Either way, thanks for providing the info that you did, maybe I'll figure it out someday.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1358822153886</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Shawn</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>shawn.mcgough@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>96.227.62.124</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-01-22 13:35:53</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Thank you for this series of posts on random number generators.&nbsp; Using your concepts, I was able to crack .Net&rsquo;s System.Random with my language of choice, C#: <a href="http://msdn.microsoft.com/en-us/library/system.random.aspx">http://msdn.microsoft.com/en-us/library/system.random.aspx</a></p>
<p>However, I am only able to do so when the result of .Next() is not limited.&nbsp; For example, using Mersenne Twister, if the 624 sequential integers were limited to the range of 0-10 (using rand(limit=10)), would it still be possible to crack? </p>
<p><br />
Thanks again for the excellent posts.<br />
&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1358824769491</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>27.32.255.102</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-01-22 14:19:29</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;If you limit the range, it becomes much harder to crack it, but it is still not impossible, you may just need more (and often a lot more) input before you can crack it. &nbsp;As a simple example, let's say you limit it to 0-31, and the algorithm that does the limiting ends up giving you the last 5 bits of the number. &nbsp;By getting the first 624 numbers, and then the next 624 numbers, you can probably deduce a few more than the last 5 bits of each number. &nbsp;Eventually, you can deduce the whole lot.</p>
<p>Of course, it gets much harder if for example the algorithm does a mod 10, the maths would start to get crazy complex. &nbsp;But it's still not impossible, you could probably reduce the problem to something that could be brute forced in a few days. &nbsp;My posts are not designed to be a guide to hacking random number generators, they are designed to show developers that random number generators are much easier to crack than they think, and that no crazy maths is involved for the simple case. &nbsp;Adding a little complexity like limiting the numbers might add a lot of complexity to the maths, but to a mathematician that knows their stuff, it still wouldn't be hard, and as developers we should not make any assumptions about how hard it will or won't be. &nbsp;I hope I've got that point across.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1358822153886</wp:comment_parent>
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Cracking Random Number Generators - Part 4</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2010/09/25/cracking_random_number_generators_part_4.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
In <a href="2010/09/22/cracking_random_number_generators_part_3.html">Part 3</a> of this series, we investigated the Mersenne Twister, and saw how with 624 consecutive integers obtained from it, we can predict every subsequent integer it will produce.  In this part, we will look at how to calculate previous integers that it has produced.  We will also discuss how we might go about determining the internal state of the Mersenne Twister if we are unable to get 624 consecutive integers.
</p>

<h2>Breaking it down</h2>

<p>
Before we go on, let's look again at the algorithm for generating the next value for <tt>state[i]</tt>:
</p>

<pre class="prettyprint"><code class="language-java">int y = (state[i] &amp; 0x80000000) + (state[(i + 1) % 624] &amp; 0x7fffffff);
int next = y &gt;&gt;&gt; 1;
if ((y &amp 1L) == 1L) {
  next ^= 0x9908b0df;
}
next ^= state[(i + 397) % 624];
</code></pre>

<p>
We can see that there are 3 numbers from the previous state that are involved here, the old <tt>state[i]</tt>, <tt>state[(i + 1) % mod 624]</tt>, and <tt>state[(i + 397) % mod 624]</tt>.  So, taking these 3 numbers, let's have a look at what this looks like in binary:
</p>

<pre>
1. <span style="color: blue">11100110110101000100101111000001</span> // state[i]
2. <span style="color: red">10101110111101011001001001011111</span> // state[i + 1]
3. 11101010010001001010000001001001 // state[i + 397]

// y = state[i] &amp; 0x80000000 | state[i + 1] &amp; 0x7fffffff
4. <span style="color: blue">1</span><span style="color: red">0101110111101011001001001011111</span> // y
5. 0<span style="color: blue">1</span><span style="color: red">010111011110101100100100101111</span> // next = y &gt;&gt;&gt; 1
6. 11001110011100100111100111110000 // next ^= 0x9908b0df
7. 00100100001101101101100110111001 // next ^= state[i + 397]
</pre>

<p>
If we work backwards from <tt>i = 623</tt>, then the pieces of information from the above equation is the end result (7), <tt>state[i + 1]</tt> and <tt>state[i + 397]</tt>.  Starting from the result, the easiest step to unapply is the last one, undoing an xor is as simple as applying that same xor again.  So we can get from 7 to 6 by xoring with <tt>state[i + 397]</tt>.
</p>

<p>
To get from 6 to 5 depends on whether <tt>y</tt> was odd, if it wasn't, then no operation was applied.  But we can also see from the bitshift to the right applied from 4 to 5, that the first bit at 5 will always be <tt>0</tt>.  Additionally, the first bit of the magic number xored at 6 is <tt>1</tt>.  So, if the first bit of the number at 6 is <tt>1</tt>, then the magic number must have been applied, otherwise it hasn't.  Hence, we can conditionally unapply step 5.
</p>

<p>
At this point, we have the first bit of the old <tt>state[i]</tt> calculated, in addition to the middle 30 bits of <tt>state[i + 1]</tt> calculated.  We can also infer the last bit of <tt>state[i + 1]</tt>, it is the same as the last bit of <tt>y</tt>, and if <tt>y</tt> was odd, then the magic number was applied at step 6, otherwise it wasn't.  We've already worked out whether the magic number was applied at step 6, so if it was, the last bit of <tt>state[i + 1]</tt> was <tt>1</tt>, or <tt>0</tt> otherwise.
</p>

<p>
However, as we work backwards through the state, we will already have calculated <tt>state[i + 1]</tt>, so determining its last 31 bits is not useful to us.  What we really want is to determine the last 31 bits of <tt>state[i]</tt>.  To do this we can apply the same transformations listed above to <tt>state[i - 1]</tt>.  This will give us the last 31 bits of <tt>state[i]</tt>.
</p>

<p>
Putting it all together, our algorithm looks like this:
</p>

<pre class="prettyprint"><code class="language-java">for (int i = 623; i >= 0; i--) {
  int result = 0;
  // first we calculate the first bit
  int tmp = state[i];
  tmp ^= state[(i + 397) % 624];
  // if the first bit is odd, unapply magic
  if ((tmp &amp; 0x80000000) == 0x80000000) {
    tmp ^= 0x9908b0df;
  }
  // the second bit of tmp is the first bit of the result
  result = (tmp &lt;&lt; 1) &amp; 0x80000000;

  // work out the remaining 31 bits
  tmp = state[(i - 1 + 624) % 624];
  tmp ^= state[(i + 396) % 624];
  if ((tmp &amp; 0x80000000) == 0x80000000) {
    tmp ^= 0x9908b0df;
    // since it was odd, the last bit must have been 1
    result |= 1;
  }
  // extract the final 30 bits
  result |= (tmp &lt;&lt; 1) &amp; 0x7fffffff;
  state[i] = result;
}
</code></pre>

<h2>Dealing with non consecutive numbers</h2>

<p>
What happens, if when collecting 624 numbers from the application, that some other web request comes in at the same time and obtains a number.  Our 624 numbers won't be consecutive.  Can we detect that, and what can we do about it?.  Detecting it is simple, having collected 624, we can predict the 625th, if it doesn't match the next number, then we know we've missed some.
</p>

<p>
Finding out how many numbers we've missed is the next task.  Let's say we only missed the 624th number.  This is fairly straight forward to detect, we would find that our <tt>state[623]</tt> is equal to what we were expecting to be the new <tt>state[0]</tt>.  We would then know that we've missed one number, and by continuing to extract numbers from the application, and comparing that with the results we were expecting, we can narrow down which one.
</p>

<p>
A generalised algorithm for doing this is beyond the scope of these blog posts.  But it should be clear from the reverse engineering of the steps that if most of the values are correct, but only a few are missing, determining what they were will be a fairly simple process.
</p>

<p>
We now know how to determine the internal state and how to go backwards as well as forwards in two of the most popular PRNG algorithms.  In <a href="">Part 5</a>, we will look at what developers can do to ensure that their applications are safe against PRNG attacks.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2010-09-25-cracking_random_number_generators_part_4</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2010-09-25 01:40:58</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1335569280780</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Akis</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>anastasiosbouraimis@yahoo.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>94.71.23.180</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-04-28 09:28:00</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Hi James,</p>
<p>I am looking at your blog and I noticed that you are a very well informed and talented developer.</p>
<p>I wonder, can it really be disassembled a 32-bit RNG? Can you make a program or web app(running from a web page having subscribers) to collect a particular set of numbers as an input and then to output and predict the next set of numbers in the right order they will come out of a particular RNG?&nbsp;</p>
<p>I know it is tough to do this because you need a RNG scrambler to try scramble bits in the 32-bit code used in the attacked RNG and then triger the generator an x amount of times and then compare the results with the set of numbers you have earlier input to the application. Likewise a seed scrabler can be used and then do as described above, maybe. Once the program seeks and finds a matching sequence then to attempt to give predictions of the next RNG's outputs.</p>
<p>I know the bits and seeds change periodically in sophisticated RNG apps and</p>
<p>I know there are a bunch of other things involved in it that make it a real challenge, worth of trying.</p>
<p>Also there could be quite profitable task if succeeded. In gambling for instance having your subscribers play for you and share profits making lists of output numbers that will play, with winning AND losing bets (on purpose, so not to disturb casinos) but more winning ones of course to ensure profits.</p>
<p>Please do not consider the second part of my comment unethical because it isn't. If the gambling industry uses a computer program to generate pseudorandom number sequences I have the right to use my computer program to help me calculate and advise me to play accordingly. Of course if you're winning constantly or you win large amounts of money, they 'll kick you out of the casino and that's unethical.</p>
<p>I 'll be at your disposal if you consider to reply at my thoughts.</p>
<p>Akis</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1337160085175</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>213.61.58.210</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-05-16 19:21:25</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>The topic of predicting gambling websites is nothing new, it has been well covered by this paper:</p>
<p>http://www.cigital.com/papers/download/developer_gambling.php</p>
<p>Personally, I prefer to make money from contributing to society, beating an online gambling site does nothing to contribute to society.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1335569280780</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1343843138399</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Alfabravo</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>201.245.173.130</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-08-02 03:45:38</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Too bad there is no Part 5. :)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1378399366662</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>dont@haveone.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>71.116.67.101</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-09-06 02:42:46</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi, just tried using the code given here to reconstruct the seeded state of the internal array. In other words:</p>
<p>1. init with a seed</p>
<p>2. generate 624 numbers</p>
<p>3. reconstruct seeded state by first untempering and then ungenerating</p>
<p>4. extract seed, which should be state[0] at that point</p>
<p>Everything works, except for the state[0] value. state[1...623] are what they should be, but not state[0]</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Open Source Developers</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/02/19/open_source_developers.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
Since everyone's doing it, I thought I'd do it too.  My contribution to the <i>What people think I do</i> meme:
</p>

<img style="margin: 15px; text-align: center;" src="./images/open-source-developers.jpg"/>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-02-19-open_source_developers</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-02-19 11:21:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Three things I had to learn about Scala before it made sense</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/03/19/three_things_i_had_to_learn_about_scala_before_it_made_sense.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
Last year I sat down in a meeting room with a few other colleagues to learn from one of Atlassian's biggest Scala advocates about Scala.  I kept on hearing good stuff about Scala, and I like trying new things, so I was eager to have my eyes opened so that I could learn how awesome this thing was.  Unfortunately, I was disapponted.  Most of the lesson went straight over my head.  But to my dismay, the other people in the room seemed to get it.  It was on this day that I realised an interesting thing about my learning style.  I remembered back at uni, I was exactly the same in lectures... I never got anything I was taught in lectures.  Which is probably why by the end of uni, I had pretty much stopped attending all CS lectures.  It wasn't until I was given a real problem in a lab that I had to solve that I got it.  This is why I never really got functional languages at uni, the lecturers that taught functional languages at my uni weren't the most practical of people.  Actually, I don't think they ever even considered whether their work had any practical implications at all.  So they taught things like map, reduce, filter, fold, curried functions etc like this "Look, here's something you've never heard of! Behold its awesomeness! Now here's a trivial mathematical use case with no apparent real world application! Look at how practical it is!"
</p>

<p>
Some people have no problems learning this way, and I envy them.  For me, I need to have a problem that I understand and want to solve today, that the thing that I'm learning can solve, in order to learn it.  So if you're reading this and thinking "That is so me!", and you want to learn Scala, then hopefully this is the blog post for you.  I'm going to start with a practical problem that hopefully you will understand and want to solve, and then show you how three particular Scala features allow solving this really elegantly and simply.  Hopefully after that, you'll have a good understanding of those features in Scala, and be able to understand a lot more of Scala code when you encounter it.
</p>

<h2>The problem</h2>

<p>
The problem that I want to solve is dependency management.  If you've ever used maven, you'll know how verbose this can be.  For those that haven't encountered maven, here's what specifying a single dependency looks like:
</p>

<pre class="prettyprint"><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;net.vz.mongodb.jackson&lt;/groupId&gt;
    &lt;artifactId&gt;mongo-jackson-mapper&lt;/artifactId&gt;
    &lt;version&gt;1.4.1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>
In English, this means a dependency on the artifact <code>mongo-jackson-mapper</code> version 1.4.1 from the organisation <code>net.vz.mongodb.jackson</code>.  The English explanation is shorter than the code!  Maybe the Maven authors could have made things nicer, by placing it on one line, and that would be clearer too, for example, something like this:
</p>

<pre class="prettyprint"><code class="language-xml">&lt;dependency&gt;net.vz.mongodb.jackson:mongo-jackson-mapper:1.4.1&lt;/dependency&gt;
</code></pre>

<p>
There are however some advantages to the more verbose model, the language (XML) that the DSL (maven pom.xml format) uses is able to fully express every element of the dependency, rather than the elements being defined in some other format XML is unaware of.  There are also other attributes (such as scope and classifier) that the more verbose solution can easily unambiguously specify, these become very hard if it's just an arbitrary string of characters.
</p>

<p>
So here is the problem.  I want a DSL to specify dependencies with as little noise as possible from the DSL, so that my dependency specification is short, unambiguous, and its format should be enforced by the language it's specified in.  The language I'm going to use is Scala.
</p>

<p>
And just to ground this problem even more solidly in reality, this example is not contrived.  SBT, the Scala Build Tool, uses Scala to specify its build configuration, including dependencies.  The solution I'm going to show you is the solution that SBT uses.  So by the end of this you will also understand a little about how to use SBT, which you will no doubt need to know as you delve into the world of Scala.
</p>

<h2>How would we do it with no weird Scala tricks?</h2>

<p>
First of all I will give a solution that uses language constructs that you should already be familiar with, using classes, fields, methods etc.  If the following syntax makes no sense to you, you should probably do some reading on basic Scala syntax.
</p>

<pre class="prettyprint"><code class="language-scala">def groupId(groupId: String) = new GroupId(groupId)

class GroupId(val groupId: String) {
  def artifact(artifactId: String) = new Artifact(groupId, artifactId)
}

class Artifact(val groupId: String, val artifactId: String) {
  def version(version: String) = new VersionedArtifact(groupId, artifactId, version)
}

class VersionedArtifact(val groupId: String, val artifactId: String, val version: String) {
}
</code></pre>

<p>
Here we have three classes, a <code>GroupId</code>, which has a method for creating an <code>Artifact</code> from that group id, which in turn has a method for creating a <code>VersionedArtifact</code>, which captures our dependency.  There's also a factory method for creating the <code>GroupId</code>.  To use it, we can do this:
</p>

<pre class="prettyprint"><code class="language-scala">groupId("net.vz.mongodb.jackson")
    .artifact("mongo-jackson-mapper")
    .version("1.4.1")
</code></pre>

<p>
Already it's looking better than the XML version, but this could be done in Java too.  Scala has a lot more to offer yet.  As we go through the following lessons, it's important to remember that each change we make, we are still basically achieving the same as the above.
</p>

<h2>Lesson One: Scala methods can be made of operator characters</h2>

<p>
To Java developers such as myself, this is a bit weird, though in other languages this is quite common.  There's some strict rules in Scala over exactly what a method name can be, but one of them is that it can be made of just operator characters (ie, +, =, *, /, %, -).  So, the first change that we're going to make to our above code is to get rid of the method names.  It makes things more concise, but other than that it may seem like a weird first step.  Bear with me.
</p>

<pre class="prettyprint"><code class="language-scala">def groupId(groupId: String) = new GroupId(groupId)

class GroupId(val groupId: String) {
  def %(artifactId: String) = new Artifact(groupId, artifactId)
}

class Artifact(val groupId: String, val artifactId: String) {
  def %(version: String) = new VersionedArtifact(groupId, artifactId, version)
}

class VersionedArtifact(val groupId: String, val artifactId: String, val version: String) {
}
</code></pre>

<p>
And so now our code looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">groupId("net.vz.mongodb.jackson").%("mongo-jackson-mapper").%("1.4.1")
</code></pre>

<h2>Lesson Two: Scala lets you call methods without dots or braces</h2>

<p>
There are some strict rules governing this, including what happens when obvious ambiguities arise, and you can read about that in your own research.  Simply put, if a method has only one parameter, you can call it without using the dot or the braces, rather replace them with whitespace:
</p>

<pre class="prettyprint"><code class="language-scala">groupId "net.vz.mongodb.jackson" % "mongo-jackson-mapper" % "1.4.1"
</code></pre>

<p>
This is called "infix" notation, which you may have also come across in other languages.  We're looking much more concise now, yet the language is still enforcing the rules of what a dependency needs, and we still end up with a strongly typed <code>VersionedArtifact</code>.  But we're not finished yet.
</p>

<h2>Lesson Three: Scala lets you implicitly convert any type to any other type</h2>

<p>
For me, this was the weirdest feature of Scala when I first learnt it.  It sounded so cool and dangerous at the same time.  Most languages, when you call a method on an object, if that method doesn't exist on that object, will throw an error.  For the statically typed languages, this will be a compile error, for dynamic languages it will be a runtime error.  However, Scala is a bit different.  When it can't find a method on an object (at compile time, because Scala is statically typed), it has an extra step before it gives up with an error.
</p>

<p>
Scala has a concept of implicit methods (and fields, but right now let's only worry about methods).  When a method that you call doesn't exist on the object that you're trying to invoke it on, it will check the current scope for any implicit methods that take the type of your object as an argument.  If the implicit methods result has a method that matches the method you are trying to invoke, then Scala wraps your object in that implicit method call.  Have I lost you?  Let's look at some code:
</p>

<pre class="prettyprint"><code class="language-scala">implicit def groupId(groupId: String) = new GroupId(groupId)
</code></pre>

<p>
So the only change I've made to the <code>groupId</code> method is that it is now implicit.  When I define my dependency, I do this:
</p>

<pre class="prettyprint"><code class="language-scala">"net.vz.mongodb.jackson" % "mongo-jackson-mapper" % "1.4.1"
</code></pre>

<p>
Notice that the call to <code>groupId</code> has completely disappeared.  If at this point our newly learned Scala syntax is a bit overwhelming for you, maybe it would help to see what would happen if we applied the implicit rule first, before we got rid of our dots and braces, and before we changed our method names to percent signs:
</p>

<pre class="prettyprint"><code class="language-scala">"net.vz.mongodb.jackson".artifact("mongo-jackson-mapper").version("1.4.1")
</code></pre>

<p>
What it looks like is that the <code>String</code> class has a method called <code>artifact</code>.  But we know it doesn't, and the Scala compiler knows it doesn't.  When it sees that, it says "are there any implicit methods available that accept a <code>String</code> as an argument, and return a type that has an <code>artifact</code> method?"  And so it finds the <code>groupId</code> method, which matches that criteria, and converts the code to this:
</p>

<pre class="prettyprint"><code class="language-scala">groupId("net.vz.mongodb.jackson").artifact("mongo-jackson-mapper").version("1.4.1")
</code></pre>

<p>
When I first learnt about this feature, I thought that's going to cause massive amounts of confusion.  And, if used irresponsibly, it certainly can.  But when used carefully, it provides a massive amount of power, for example, in creating DSLs like the one above, or for adding methods to third party/legacy libraries.
</p>

<p>
On a side note, Scala actually uses this to add functional methods to the Java collections API, by providing implicit conversion methods to convert Java collections to Scala collections.  The confusion that could arise can be avoided by being careful to only import the implicit methods you need, where you need them.  Scala allows you to put an import statement anywhere in code, so if you have one method in a class that needs to work with Java collections, you can import the implicit collection conversions into just that block of code.  In the case of DSLs, it's usually the case that the use of these are separated from the rest of your code by normal encapsulation, so a DSL for accessing a database would only appear in a DAO, where you're expecting it to appear, so there would be no confusion.
</p>

<h2>Putting it into context</h2>

<p>
There is one last step, and that is to show what we actually do with the dependency we've declared.  In maven, our XML ends up being part of the rest of the overly verbose POM file.  In SBT, there is a file called <code>build.sbt</code> that contains snippets of Scala, which build up the configuration.  Available to the snippets are certain variables, for example, <code>libraryDependencies</code>, which contain the configuration.  So adding my dependency to my SBT project means adding a line to the <code>build.sbt</code> file, like this:
</p>

<pre class="prettyprint"><code class="language-scala">libraryDependencies += "net.vz.mongodb.jackson" % "mongo-jackson-mapper" % "1.4.1"
</code></pre>

<p>
You may notice here that there is another use of infix operator named methods, <code>+=</code> is a method defined in mutable collections for adding elements.  Multiple dependencies can be added more tersely like this:
</p>

<pre class="prettyprint"><code class="language-scala">libraryDependencies ++= Seq(
    "net.vz.mongodb.jackson" % "mongo-jackson-mapper" % "1.4.1",
    "net.vz.mongodb.jackson" % "play-mongo-jackson-mapper" % "1.0.0"
)
</code></pre>

<p>
So there we have it.  We have a very terse way of specifying dependencies, that is strongly typed, and so validated at compile time.  I hope that the problem I have presented and solved is a problem that you have understood and can relate to, and that you've understood how Scala can be used to help solve it, and that in learning how Scala helps solve it, you've learnt and understood some important features of the Scala language that you're now keen to apply to other problems that you have.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-03-19-three_things_i_had_to_learn_about_scala_before_it_made_sense</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-03-19 10:09:08</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1332949552518</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Wojciech</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>wseliga@atlassian.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>83.144.66.230</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-03-29 02:45:52</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Good stuff and nice approach.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1333841347236</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Caoilte</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>caoilte@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>91.125.152.9</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-04-08 09:29:07</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Personally, I like mastering subjects through repitition and though I'm getting very familiar with all the atomic parts of the above I'd never sat down and thought about how SBT puts them together. Thanks!</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351025473500</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Geir Pettersen</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>geirgp@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>84.210.30.101</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-24 07:51:13</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>It explained a lot of Scala stuff that's been a mystery to me so far. Thank you!&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1376457751937</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Andrew Swan</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>aswan@atlassian.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>59.167.133.100</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-08-14 15:22:31</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Thanks James, well explained!</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1384429958686</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>5.12.199.182</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-11-14 22:52:38</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Got me out of a very frustrated mood :). Thanks a lot.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>ScalaFlect: Statically typed query DSLs</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/04/23/scalaflect_statically_typed_query_dsls.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
I've been hard at work over the past few weeks redesigning my Mongo object mapper, the <a href="http://vznet.github.com/mongo-jackson-mapper">Mongo Jackson Mapper</a>, to support Jackson 2.0, be simpler to use, and be far more powerful with less surprises to users.  Something that has been at the front of my mind is how to make it nicer to use in Scala, and the biggest thing that I'd like to do here is implement the query and update APIs using a DSL that makes the queries look like ordinary code.  But there's a problem.  If you want your classes to be ordinary case classes, then when querying, you're going to have to refer to the properties using strings.  Strings that are very easy to make typos in, strings that don't get updated automatically when you refactor, strings that don't throw compile errors if they are wrong, and in the case of MongoDB queries, strings that don't even throw runtime errors if they are wrong.  Scala has no support for referring to a field, rather than its value, so unfortunately, strings are the only option.  That is, until now.
</p>

<p>
Today I started a new open source project called <a href="https://github.com/jroper/scalaflect">ScalaFlect</a>.  It provides exactly what every query DSL implementor has been wanting, statically typed reflection.  It allows you to reference a field or a method, and the result being that you get the <tt>java.lang.reflect.Field/Method</tt> associated with it.  Before I go into the details of how I did this, let's first look at an example DSL that I've written to demonstrate the capabilities so far.
</p>

<h2>Example DSL usage</h2>

<p>
So to start off, I have some case classes, a <tt>BlogPost</tt>, and a <tt>Comment</tt>, with a one to many relationship between blog posts and comments:
</p>

<pre class="prettyprint"><code class="language-scala">case class BlogPost(author: String, title: String, published: Boolean,
  tags: Set[String], comments: List[Comment])
case class Comment(author: String, text: String)
</code></pre>

<p>
Now I have implemented my DSL by implementing an abstract class that provides the basic elements of my DSL.  This class is called <tt>ObjectListDao</tt>, and as the name suggests, it stores objects in a list.  But it could just as easily be storing objects in a database like MongoDB.  Let's look at a DAO that uses this DSL:
</p>

<pre class="prettyprint"><code class="language-scala">class BlogPostDao extends ObjectListDao(classOf[BlogPost]) {
  import au.id.jazzy.scalaflect.ScalaFlect.toTraverser

  def findByAuthor(author: String) = {
    query(
      $(_.author) %= author
    )
  }

  def findPublishedByTag(tag: String) = {
    query(
      $(_.tags.$) %= tag,
      $(_.published) %= true
    )
  }

  def findPostsCommentedOnByAuthor(author: String) = {
    query(
      $(_.comments.$.author) %= author
    )
  }
}
</code></pre>

<p>
So the first thing you notice is the static access to properties.  The <tt>$</tt> method accepts a function that accepts a parameter of type <tt>BlogPost</tt>, and the function should return the property that you want to reference.  You can also see that using the <tt>$</tt> operator on a collection, you can refer to properties in that collections type.
</p>

<h2>Example DSL definition</h2>

<p>
So how have I implemented my DSL?  Quite simply.  Here is the code:
</p>

<pre class="prettyprint"><code class="language-scala">class ObjectListDao[T](val clazz: Class[T]) {
  private val scalaFlect = new ScalaFlect(clazz)
  private val list = new ListBuffer[T]

  def $[R](f : T =&gt; R): QueryField[R] = new QueryField(scalaFlect.reflect(f))
  
  def query(exps: QueryExpression*) = {
    var results = list.toList
    for (exp &lt;- exps) {
      results = results.filter(exp.matches(_))
    }
    results.toList
  }

  def save(obj: T) {
    list += obj
  }
}

class QueryField[R](val field: Member[R]) {
  def %=(value: R): QueryExpression = new QueryExpression {
    def matches(obj: Any) = !(field.get(obj) filter {v: Any =&gt; v == value} isEmpty)
  }
}

trait QueryExpression {
  def matches(obj: Any): Boolean
}
</code></pre>

<p>
Here we have an instance of <tt>ScalaFlect</tt> for our class (in the example usage, this was <tt>BlogPost</tt>).  The <tt>$</tt> method simply invokes <tt>reflect()</tt> on this, which is what does the reflection.  <tt>reflect()</tt> returns a <tt>Member</tt>.  A <tt>Member</tt> is a reference to a series of methods and fields that were invoked by the reflection function.  Using it, you can get access to the Java reflection API classes that represent these methods and fields.
</p>

<p>
The other thing to note is the implementation of <tt>matches</tt>.  This is where the <tt>Member</tt> class is actually used.  If this was a DSL for something like MongoDB, then at this point the <tt>Memmber</tt> and its parents would be inspected to build a query object, which would then be sent to the database.  In our case though we're just operating on a list of objects that we already have in memory, and <tt>Member</tt> provides a convenient <tt>get</tt> function that gets all the values of that property for a given object.  Note that I said values, not value, ScalaFlect allows stepping into collections using the <tt>$</tt> operator, so if the reference goes through a collection, then multiple values might be returned.
</p>

<h2>Implementation</h2>

<p>
At this point, especially if you've thought about how to do this before, you're probably wondering how on earth I've implemented this.  The passed in reflection function is never executed.  An important thing to remember in Scala is that functions are actually classes themselves.  ScalaFlect simply takes the function class, decompiles it, finds the <tt>apply</tt> method, and then does some fairly simple analysis on the code to find out what properties were referenced.  By fairly simple, I mean I wrote it in 2 hours.  The result is cached so each function is only ever analysed once.
</p>

<p>
Ok, so this sounds like a hack, and it is.  And it certainly has its limitations.  The behaviour if you put complex code into your reflection function is completely undefined (it will most likely throw an exception, in future I'll add some decent error handling).  However, it's a hack that will work well - there is nothing magic about how a Scala function that invokes some methods/accesses some fields on the passed in argument and returns the result is compiled down to bytecode.  I don't expect that anything will be added to Scala in future that might break this.
</p>

<p>
One limitation that I do anticipate though is working with hot swapped code.  I imagine, if you update a query, and hotswap it into a running JVM, there will be no way for ScalaFlect to either detect that, or even analyse it if it could.  This is because the way ScalaFlect decompiles the bytecode is by loading the class from the reflection functions classloader.  I actually have no idea how hot swapping works, but I suspect that it doesn't update the bytecode that the classloader sees.  The same goes for any runtime generated and enhanced code, but maybe that issue is not as likely to ever cause a problem.
</p>

<h2>The future</h2>

<p>
I read somewhere that Scala 2.10 is getting improved reflection, but I don't know what that means.  The need for this library can be completely removed if Scala added language level features for referring to a field, and not it's value, in code.  My ideal outcome from implementing ScalaFlect is that the value of such a feature will be realised, and hence added to Scala.  In the meantime, ScalaFlect will work nicely at giving DSL writers statically typed reflection.
</p>

<p>
So check out the library on <a href="https://github.com/jroper/scalaflect">GitHub</a>, and feel free to comment on my approach.  I haven't cut a release yet, but I'll get to that and deploy a beta to Maven central in the coming days (depending on how fast Sonatype will process my request to deploy to my domains groupId).
</p>

<h2>Update</h2>

<p>
It's just been pointed out to me that Scala 2.10 will (might?) have macro support, which would achieve this (and potentially much more) in a much cleaner fashion.  This is great news for writing query DSLs.  I don't know though what the state of the macro support is, it's marked as experimental and doesn't seem to be really mentioned in any Scala 2.10 feature lists.  So maybe ScalaFlect might have some time to serve some useful purpose yet.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-04-23-scalaflect_statically_typed_query_dsls</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-04-23 05:16:45</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1335235489446</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Eugene Burmako</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>eugene.burmako@epfl.ch</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>178.197.234.65</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-04-24 12:44:49</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Hi James! Macros will be a part of Scala 2.10.0 M3, which is planned to be released within days. And already now you can get them in nightlies. Please, be welcome to experiment and let me know if something goes wrong - I will try to assist you then.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1335771351722</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Timo Westkämper</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>195.237.145.34</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-04-30 17:35:51</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Interesting approach. At some point I tried to decompile more complex expressions which were used as query conditions. This worked, but was a bit fragile. Especially in Scala the byte code would probably be too complex for bigger expressions.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1336939902140</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Erik</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>eecolor@qirx.org</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>82.157.51.75</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-05-14 06:11:42</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Pre Scala 2.10 this behaviour could be accomplished using a Scala plugin. Some time ago I created one (never really used it yet and it was my first Scala code). You can find it here if you are interested in the mechanics:</p>
<p>http://code.google.com/p/scala-implicit-metadata-plugin/</p>
<p>In Scala 2.10 you could probably use macro's (more efficiently) to do the same stuff.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1337024734843</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Erik</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>eecolor@qirx.org</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>82.157.51.75</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-05-15 05:45:34</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Here is an example using the 2.10 macro's: http://code.google.com/p/scala-implicit-metadata-plugin/source/browse/trunk/staticReflection/src/ee/scala/staticReflection/Metadata.scala&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Hashbangs on the new Google Groups</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/05/12/hashbangs_on_the_new_google_groups.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
Hash-bang URLs have been a contentious issue at my work over the past week, so much so that we completely got rid of them in the project that I'm working on.  Coming out of the experience, I'm not convinced that hash-bangs are always a bad idea, however, there are some types of sites where they are very bad.  Google groups I believe falls firmly into this category.  And it's too late to do anything about it.
</p>

<img src="images/blogs/google-groups.jpg" style="float:right; margin: 10px" alt="Google Groups Logo"/>
<p>
The major issue with hash-bangs is not that it's a hack - many people would have called dynamically generating documents on each request a hack when websites first started doing that almost 20 years ago.  It's not that it's ugly.  It's not that some users don't have Javascript enabled (HTML5 mandates various Javascript APIs, if it doesn't do Javascript, it doesn't do HTML, Javascript is a core building block of the web - get over it).  The big issue is maintainability of URLs.
</p>

<p>
For some sites, this is irrelevant.  Take a site that is your own personal dashboard to managing your own private things - a webmail site for example.  Nothing is going to link to it, so there is no need to maintain URLs.  For other sites, it's an issue, but it's not so important.  I know the folks at Twitter are considering it a big issue at the moment, but really, if a link breaks to someones 140 character word of wisdom... does it really matter?
</p>

<p>
But then there is a category of sites for which it is really important.  These are the sites that maintain permanent records for future use.  Mailing lists are one such example.  I have an open source project, called the mongo jackson mapper.  It has a small user base, and I provide support to people when they asked questions.  About a month ago, I noticed that I was getting a number of emails from people asking for help.  I was more than happy to answer these, however, I was concerned that if one person has a question, then other people are likely to have the same question, and I would be doing a lot of repeat work in answering people questions.  So, I setup a Google group for questions.
</p>

<p>
Now, when someone asks the same question twice, I can simply link to the old answer, no need to rewrite the answer.  Furthermore, people on other sites, such as stack overflow, can link to my answers.  The URL to that answer will stand as a link in the chain to a record in time that will help many people help themselves in future.  However, the usefulness is dependent on that link still working in future.  Let's have a look at an example link:
<p>

<p><a href="https://groups.google.com/forum/?fromgroups#!topic/mongo-jackson-mapper/AeFF5Cqqolw">https://groups.google.com/forum/?fromgroups#!topic/mongo-jackson-mapper/AeFF5Cqqolw</a></p>

<p>
As you can see, the ID of the message only appears after the hash-bang.  This means, it doesn't get sent to the server when you request it, the only way Google can know what message is being request is to serve up some Javascript that parses it out of the URL.  And that's exactly what they do.  But what happens, in future, when they decide to rewrite Google groups again?  And again?  And again...  If the resource, https://groups.google.com/forum/?fromgroups, doesn't continue to serve up that Javascript, then all links to all posts that people have copied from their browser address bar and pasted elsewhere will break.  The permanent record of networked help pages that people use to solve their every day problems will be broken.
</p>

<p>
In contrast, if they didn't use hash-bang URLs, then they could make whatever changes to their URL structure that they liked, and all they have to do to maintain the URLs is implement a simple redirect on the server side.  No need to serve Javascript up at a particular resource.
</p>

<p>
Google groups does have a permalink feature, but really, who uses that?  It feels unnatural for me even though I know and understand the difference between permalinks and what is in my address bar.  When I want to copy a URL, without thinking, I copy it straight from the address bar, because this is what I always do for every other site.
</p>

<p>
So, Google groups, really?  Hash-bangs?  Are you not thinking of the future?  Are you seriously committing to maintaining Javascript at arbitrary URLs for the lifetime of the internet?  Unfortunately, the horse has bolted, these hash-bang links to Google groups are already starting to find themselves around the web, so you have no choice.  And I'm guessing that someone in future will forget this, and and so you'll just break all those links.
</p>
]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-05-12-hashbangs_on_the_new_google_groups</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-05-12 17:02:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1336817899808</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Raphael</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>raphael.andre.bauer@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>92.231.216.134</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-05-12 20:18:19</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I will totally agree in two years from now :)</p>
<p>Because you are implicitly expecting the usage of the pushstate Api if I understood you correctly And that Api is not available in IE7/8/9. Therefore hashes and hahbangs will stay for some time. There will be some applications where you can take a hybrid approach (Github is a good example). But for sites like GMail or Google Groups this does not make much sense (fat javascript clients by design).</p>
<p>And your second issue with maintainability. Agree. But is it really that a big issue? I mean if you are replacing your rescources you have to make sure you are redirecting the clients properly. And I really think that you can manage that also on the clientside in a proper way (when it comes to hashbangs).</p>
<p>Where I agree: Google groups urls look ugly:</p>
<p><a href="https://groups.google.com/forum/?fromgroups#!topic/mongo-jackson-mapper/AeFF5Cqqolw">https://groups.google.com/forum/?fromgroups#!topic/mongo-jackson-mapper/AeFF5Cqqolw</a></p>
<p>I'd have loved to see links like that:</p>
<p><a href="https://groups.google.com/forum/?fromgroups#!topic/mongo-jackson-mapper/AeFF5Cqqolw">https://groups.google.com/forum/#!/topic/mongo-jackson-mapper/AeFF5Cqqolw</a></p>
<p>and with pushstate:</p>
<p><a href="https://groups.google.com/forum/?fromgroups#!topic/mongo-jackson-mapper/AeFF5Cqqolw">https://groups.google.com/forum/topic/mongo-jackson-mapper/AeFF5Cqqolw</a></p>
<p>;)</p>
<p>&nbsp;</p>
<p>Cheers,</p>
<p>&nbsp;</p>
<p>Raphael</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1361237852235</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>kanzure</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>kanzure@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://heybryan.org/</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>66.68.190.37</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-02-19 12:37:32</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Does anyone know how to convert between the new url format and the old url format? The old one is much more legible, and has the added advantage of using the same thread IDs if the emails were sent to multiple mailing lists.</p>
<p>before:&nbsp;http://groups.google.com/group/diybio/browse_thread/thread/e757bfe30b08ef6a</p>
<p>after:&nbsp;https://groups.google.com/forum/?fromgroups#!topic/diybio/51e_4wsI72o</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1336817899808</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1378952176648</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>http://advanced0.webhotel.net</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>marietta.lundgren@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://advanced0.webhotel.net/index.php?a[]=%3Ca+href=http://www.youtube.com/watch?v=20W12Zb9qlE%3EGreen+coffee+bean+extract%3C/a%3E</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>198.52.128.157</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-09-12 12:16:16</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[I visited several sites except the audio quality for 
audio songs existing at this website is really wonderful.]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>My complaint against Haskell</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/07/07/my_complaint_against_haskell.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
I have nothing against Haskell.  I've been getting my teeth stuck into some Scala over the recent months, and I am loving functional programming, immutable types, and am even starting to see what's so good about monads.  So Haskell, with its reputation of being a good pure functional language, is interesting to me.  I did Haskell when I was in university.  I didn't learn it, if I had learnt it, I would have understood it.  I just did it.  We learnt really useful things like doubling every integer in a list with a simple map function.  Like curried and uncurried functions, like zipping, folding, reducing... all within the context of trivial contrived examples that did absolutely nothing to help us in the real world.  In my 15 years of programming, I have only once ever needed to double every integer in a list, that was in my Haskell lab at uni.  Very useful.
</p>

<p>
My problem is not with Haskell.  My problem is with the people that teach and promote Haskell.  They have never presented me with an example of how Haskell can help me in the real world.  And today I'd like to highlight this, by looking at the first piece of code you'll encounter if you read the documentation on Haskell on the <a href="http://www.haskell.org">Haskell website</a>.  If you visit that website, and you want to know what Haskell is, you'll very quickly notice the link "What is Haskell".  Clicking on it, you'll be taken to <a href="http://www.haskell.org/haskellwiki/Introduction">a page</a>, and as you scroll down, you'll come across your first piece of Haskell code.  It's quicksort:
</p>

<pre>
quicksort :: Ord a =&gt; [a] -&gt; [a]
quicksort []     = []
quicksort (p:xs) = (quicksort lesser) ++ [p] ++ (quicksort greater)
    where
        lesser  = filter (&lt; p) xs
        greater = filter (&gt;= p) xs
</pre>

<p>
If you've ever implemented quicksort in a procedural language before, you'll notice that that code is very simple in comparison.  It has some syntax you might not recognise, but it's not a soup of crazy characters like Perl, it looks ordered, and easy to read.  It's impressive.  But is it practical?
</p>

<p>
What is quicksort?  The name implies that it is quick.  So what's its running time?  O(<i>n<sup>2</nup></i>).  Wait, hang on, that's not quick, there are faster algorithms out there, like heap sort, it runs in O(<i>n log(n)</i>) time.  Well, it turns out, the average running time of quicksort is <i>n log(n)</i>, but why would you use it over another algorithm that guarantees <i>n log(n)</i> running time?  The reason is, the actual implementation of quicksort is really simple from a computation perspective, it does very little per element of the array, making its actual running time (on average) about 3 times faster than heap sort or merge sort.  This makes quicksort very useful, if you want an algorithm that sorts an array as fast as possible, at the cost of in some circumstances not being very fast, then quicksort is perfect for you.  This is why quicksort is called quicksort, it is quick.  It may not mathematically have the best running time, but practically, it is quick.
<p>

<p>
This brings me to quicksort in Haskell.  One of the reasons why quicksort, implemented in a procedural language, is so quick is that it does very close to the minimum necessary swap operations needed to sort the array.  It sorts in place, it doesn't require building supplementary data structures, like two separate arrays in merge sort or the maximum heap in heap sort.  It plays very nicely with hardware optimisations like CPU caches, maximising cache hits regardless of the size of the array and cache.  However, the implementation above in Haskell does use additional structures.  It partitions the list by creating two new lists on each recursion of the algorithm, requiring many more memory writes than the in place implementation.  It uses linked lists, which play very poorly with CPU caches.  It still runs in <i>n log(n)</i> on average, but it's now doing a lot more operations with very little help from hardware.  This added overhead means that quicksort is no longer 3 times faster than merge or heap sort.  Which means it now, on average, has similar run times to the O(<i>n log(n)</i>) algorithms, and still with the possibility of running in <i>n<sup>2</sup></i> for some inputs.  It no longer is <i>quick</i>, and hence is not practical to use in the real world, you may as well use merge sort or heap sort.
</p>

<p>
To make matters worse, this implementation will <i>always</i> perform poorly on lists that are already k sorted, which is not an uncommon real world input to sort algorithms.  A procedural implementation may also perform poorly on k sorted lists, but it's a simple change to make it perform well, just choose a random pivot, or a pivot from somewhere in the middle of the list.  In Haskell, you can't do that without adding yet another overhead, because your lists are linked lists, and so accessing a random pivot takes <i>n</i> time.
</p>

<p>
Now, none of this means that Haskell is a bad language.  Merge sort in Haskell is also very simple, and is also a very practical sorting algorithm in many cases, and so could have been used as an example instead.  But why did the authors of this documentation choose a piece of code that is completely useless in the real world as the first taste of Haskell that many people will ever see?  This is my complaint about Haskell, it's never been promoted to me in a way that bears any practical usefulness.  I'm sure it's a great language.  Pity about the people that promote it.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-07-07-my_complaint_against_haskell</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-07-07 00:53:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352029954540</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>George M</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>george.marrows@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>86.30.200.7</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-04 22:52:34</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I'm sure you're aware, but that's the same naive QS impl you just use in&nbsp;<a href="http://jazzy.id.au/default/2012/10/16/benchmarking_scala_against_java.html">http://jazzy.id.au/default/2012/10/16/benchmarking_scala_against_java.html</a>&nbsp;as an example of colloquial Scala!</p>
<p>The book &quot;Real World Haskell&quot; does what it promises in bringing Haskell down from its ivory tower.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352065523738</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-05 08:45:23</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;I did wonder if anyone would pick up on that. &nbsp;But, I figured since I started that blog post with saying that my results were irrelevant, that it was ok to use an irrelevant piece of code as an example :)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352029954054</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1353645349410</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Steven Shaw</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>steshaw@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://steshaw.org/</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>117.120.16.131</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-23 15:35:49</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>There's certainly a problem with presenting the Haskell and C versions of quicksort as equivalent! This is your problem with haskell.org - not Haskell.</p>
<p>but there's heaps of reasons to love Haskell. Try this one&nbsp;<a href="http://skillsmatter.com/podcast/scala/high-performance-concurrency">http://skillsmatter.com/podcast/scala/high-performance-concurrency</a></p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Why does Chrome consider some ports unsafe?</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
Today in my Twitter feed I noticed a <a href="https://twitter.com/tastapod/status/238302479849250816">frustrated tweet</a> from Dan North complaining about why Chrome seems to arbitrarily block connections to some ports, giving the confusing error code "net::ERR_UNSAFE_PORT".  I've encountered this before, and have also been similarly frustrated, so I decided to do a little research, and work out what Google means by unsafe.  There are a few discussions in stack overflow and forums about exactly which ports are blocked, but I didn't find much about why they are considered unsafe.
</p>

<p>
My first assumption was that somehow it was unsafe for Chrome itself to connect to services on these ports, because maybe that services protocol might confuse Chrome into doing something wrong.  However, this didn't make sense, and I then worked out that it's not about protecting Chrome, but protecting the services themselves running on these ports.  Many internet protocols are designed to be very permissive as to what they accept, and this presents an interesting attack opportunity for attackers.
</p>

<p>
As web developers with a mind for security are well aware, the browser is incredibly obliging to attackers when it comes to making requests on servers on your behalf.  XSRF is a perfect example of this, but the good news is, we know how to protect against XSRF.  However, what if an attacker tricked a web browser into making a connection to something that doesn't speak HTTP?  Let's take, for example, an SMTP server.  If you've never seen an SMTP session before, here is an example session that I've ripped from <a href="http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol">wikipedia</a>:
</p>

<pre>
S: 220 smtp.example.com ESMTP Postfix
C: HELO relay.example.org
S: 250 Hello relay.example.org, I am glad to meet you
C: MAIL FROM:<bob@example.org>
S: 250 Ok
C: RCPT TO:<alice@example.com>
S: 250 Ok
C: RCPT TO:<theboss@example.com>
S: 250 Ok
C: DATA
S: 354 End data with <CR><LF>.<CR><LF>
C: From: "Bob Example" <bob@example.org>
C: To: "Alice Example" <alice@example.com>
C: Cc: theboss@example.com
C: Date: Tue, 15 January 2008 16:02:43 -0500
C: Subject: Test message
C:
C: Hello Alice.
C: This is a test message with 5 header fields and 4 lines in the message body.
C: Your friend,
C: Bob
C: .
S: 250 Ok: queued as 12345
C: QUIT
S: 221 Bye
</pre>

<p>
On first glance, this may look nothing like HTTP.  Except for one important feature, like HTTP, SMTP separates elements of its protocol with newlines.  Furthermore, what happens when we send data to an SMTP server that it doesn't understand?  Well, here's a simple HTTP GET request with an example SMTP server:
</p>

<pre>
C: GET / HTTP/1.1
S: 500 5.5.1 Command unrecognized: "GET / HTTP/1.1"
C: Host: www.example.com
S: 500 5.5.1 Command unrecognized: "Host: www.example.com"
C: 
S: 500 5.5.1 Command unrecognized: ""
</pre>

<p>
So, obviously our mail server is confused, but an important thing to notice here is that it's not outright rejecting our connection, it's telling the client that there is an error, but continuing to accept commands.  So can we exploit this?  The answer is a resounding yes.  What if I, an attacker, were to craft a page that had a form, that was automatically submitted (using a javascript on load event that invoked the submit method - similar to a form based XSRF attack) to an SMTP server.  In order to speak SMTP with this server, I would need to be able to include new lines in my messages.  This is not possible using <tt>application/x-www-form-urlencoded</tt>, since newlines are URL encoded, however using <tt>multipart/form-data</tt>, I can create a field that has the client side messages in the above SMTP conversation, and so using my victims web browser, I can submit an email to the target SMTP server.  The SMTP server would ignore all the HTTP protocol as in the above example, including the method and headers, as well as the <tt>multipart/form-data</tt> header content, but once it got my field, which would have my HELO, MAIL FROM, RCPT TO etc commands in it, it would start processing them.
</p>

<p>
But of course, an attacker could just connect directly to the SMTP server, right?  For some SMTP servers yes.  However, many SMTP servers are protected with nothing more than a firewall, and especially if the SMTP server is configured to use this as a security mechanism for verifying the authenticity of the source of the email, it may be desirable for an attacker to be able to send email through such an SMTP server.  So what this means is an attacker could use a browser running behind a firewall that was protecting an SMTP server as a proxy to connecting to that SMTP server, and so send messages using it.
</p>

<p>
As it turns out, some SMTP servers actually detect HTTP requests made on them and immediately close the connection (my servers SMTP server did this when I tried with it).  However, not all SMTP servers do this, because it wasn't envisioned that a piece of client server, such as a web browser, could be used as an open proxy to a protected network.  And it's certainly not a good idea to assume that other types of services/servers, such as FTP servers and even IRC servers, will do this too.
</p>

<p>
So, why does Chrome refuse to connect to some ports?  Because the Google engineers has gone through the list of well known ports, and worked out how tolerant the protocols that use these ports are to being sent HTTP requests, and if they are tolerant, they've marked it as unsafe and so blocked it, to prevent Google Chrome from being an open proxy to a secured network.  Should all web browsers do this?  Probably.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-08-23-why_does_chrome_consider_some_ports_unsafe</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-08-23 02:35:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      
    </item><item>
      <!-- title of article -->
      <title>Benchmarking Scala against Java</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/10/16/benchmarking_scala_against_java.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
A question recently came up at work about benchmarks between Java and Scala.  Maybe you came across my blog post because you too are wanting to know which is faster, Java or Scala.  Well I'm sorry to say this, but if that is you, you are asking the wrong question.  In this post, I will show you that Scala is faster than Java.  After that, I will show you why the question was the wrong question and why my results should be ignored.  Then I will explain what question you should have asked.
</p>

<h2>The benchmark</h2>

<p>
Today we are going to choose a very simple algorithm to benchmark, the quick sort algorithm.  I will provide implementations both in Scala and Java.  Then with each I will sort a list of 100000 elements 100 times, and see how long each implementations takes to sort it.  So let's start off with Java:
</p>

<pre class="prettyprint"><code class="language-java">    public static void quickSort(int[] array, int left, int right) {
        if (right &lt;= left) {
            return;
        }
        int pivot = array[right];
        int p = left;
        int i = left;
        while (i &lt; right) {
            if (array[i] &lt; pivot) {
                if (p != i) {
                    int tmp = array[p];
                    array[p] = array[i];
                    array[i] = tmp;
                }
                p += 1;
            }
            i += 1;
        }
        array[right] = array[p];
        array[p] = pivot;
        quickSort(array, left, p - 1);
        quickSort(array, p + 1, right);
    }
</code></pre>

<p>
Timing this, sorting a list of 100000 elements 100 times on my 2012 MacBook Pro with Retina Display, it takes 852ms.  Now the Scala implementation:
</p>

<pre class="prettyprint"><code class="language-scala">  def sortArray(array: Array[Int], left: Int, right: Int) {
    if (right &lt;= left) {
      return
    }
    val pivot = array(right)
    var p = left
    var i = left
    while (i &lt; right) {
      if (array(i) &lt; pivot) {
        if (p != i) {
          val tmp = array(p)
          array(p) = array(i)
          array(i) = tmp
        }
        p += 1
      }
      i += 1
    }
    array(right) = array(p)
    array(p) = pivot
    sortArray(array, left, p - 1)
    sortArray(array, p + 1, right)
  }
</code></pre>

<p>
It looks very similar to the Java implementation, slightly different syntax, but in general, the same.  And the time for the same benchmark?  695ms.  No benchmark is complete without a graph, so let's see what that looks like visually:
</p>

<img src="images/blogs/javascalabenchmark/scalavsjava.png" style="margin: 10px"/>

<p>
So there you have it.  Scala is about 20% faster than Java.  QED and all that.
</p>

<h2>The wrong question</h2>

<p>
However this is not the full story.  No micro benchmark ever is.  So let's start off with answering the question of why Scala is faster than Java in this case.  Now Scala and Java both run on the JVM.  Their source code both compiles to bytecode, and from the JVMs perspective, it doesn't know if one is Scala or one is Java, it's just all bytecode to the JVM.  If we look at the bytecode of the compiled Scala and Java code above, we'll notice one key thing, in the Java code, there are two recursive invocations of the <tt>quickSort</tt> routine, while in Scala, there is only one.  Why is this?  The Scala compiler supports an optimisation called tail call recursion, where if the last statement in a method is a recursive call, it can get rid of that call and replace it with an iterative solution.  So that's why the Scala code is so much quicker than the Java code, it's this tail call recursion optimisation.  You can turn this optimisation off when compiling Scala code, when I do that it now takes 827ms, still a little bit faster but not much.  I don't know why Scala is still faster without tail call recursion.
</p>

<p>
This brings me to my next point, apart from a couple of extra niche optimisations like this, Scala and Java both compile to bytecode, and hence have near identical performance characteristics for comparable code.  In fact, when writing Scala code, you tend to use a lot of exactly the same libraries between Java and Scala, because to the JVM it's all just bytecode.  This is why benchmarking Scala against Java is the wrong question.
</p>

<p>
But this still isn't the full picture.  My implementation of quick sort in Scala was not what we'd call idiomatic Scala code.  It's implemented in an imperative fashion, very performance focussed - which it should be, being code that is used for a performance benchmark.  But it's not written in a style that a Scala developer would write day to day.  Here is an implementation of quick sort that is in that idiomatic Scala style:
</p>

<pre class="prettyprint"><code class="language-scala">  def sortList(list: List[Int]): List[Int] = list match {
    case Nil =&gt; Nil
    case head :: tail =&gt; sortList(tail.filter(_ &lt; head)) ::: head :: sortList(tail.filter(_ &gt;= head))
  }
</code></pre>

<p>
If you're not familiar with Scala, this code may seem overwhelming at first, but trust me, after a few weeks of learning the language, you would be completely comfortable reading this, and would find it far clearer and easier to maintain than the previous solution.  So how does this code perform?  Well the answer is terribly, it takes 13951ms, 20 times longer than the other Scala code.  Obligatory chart:
</p>

<img src="images/blogs/javascalabenchmark/idiomaticscala.png" style="margin: 10px"/>

<p>
So am I saying that when you write Scala in the "normal" way, your codes performance will always be terrible?  Well, that's not quite how Scala developers write code <i>all the time</i>, they aren't dumb, they know the performance consequences of their code.
</p>

<p>
The key thing to remember is that most problems that developers solve are not quick sort, they are not computation heavy problems.  A typical web application for example is concerned with moving data around, not doing complex algorithms.  The amount of computation that a piece of Java code that a web developer might write to process a web request might take 1 microsecond out of the entire request to run - that is, one millionth of a second.  If the equivalent Scala code takes 20 microseconds, that's still only one fifty thousandth of a second.  The whole request might take 20 milliseconds to process, including going to the database a few times.  Using idiomatic Scala code would therefore increase the response time by 0.1%, which is practically nothing.
</p>

<p>
So, Scala developers, when they write code, will write it in the idiomatic way.  As you can see above, the idiomatic way is clear and concise.  It's easy to maintain, much easier than Java.  However, when they come across a problem that they know is computationally expensive, they will revert to writing in a style that is more like Java.  This way, they have the best of both worlds, with the easy to maintain idiomatic Scala code for the most of their code base, and the well performaning Java like code where the performance matters.
</p>

<h2>The right question</h2>

<p>
So what question should you be asking, when comparing Scala to Java in the area of performance?  The answer is in Scala's name.  Scala was built to be a "<b>Scala</b>ble <b>la</b>nguage".  As we've already seen, this scalability does not come in micro benchmarks.  So where does it come?  This is going to be the topic of a future blog post I write, where I will show some closer to real world benchmarks of a Scala web application versus a Java web application, but to give you an idea, the answer comes in how the Scala syntax and libraries provided by the Scala ecosystem is aptly suited for the paradigms of programming that are required to write scalable fault tolerant systems.  The exact equivalent bytecode could be implemented in Java, but it would be a monstrous nightmare of impossible to follow anonymous inner classes, with a constant fear of accidentally mutating the wrong shared state, and a good dose of race conditions and memory visibility issues.
</p>

<p>
To put it more concisely, the question you should be asking is "How will Scala help me when my servers are falling over from unanticipated load?"  This is a real world question that I'm sure any IT professional with any sort of real world experience would love an answer to.  Stay tuned for my next blog post.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-10-16-benchmarking_scala_against_java</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-10-16 17:40:34</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1350378857250</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>83.81.143.139</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-16 20:14:17</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;I thought the real question was : how long does it take to compile ;-)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1356575029317</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>96.244.216.90</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-12-27 13:23:49</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;I guess its more of compiler optimizaiton issue rather than execution speed. Scala compiler is better than javac in case of optimizing byte code for executing on multicore processors.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1350378857250</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1350378849961</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Konstantine Rybnikov</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://redhotchilipython.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>195.20.130.1</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-16 20:14:09</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>i'm far from being expert in functional programming, but isn't</p>
<pre>
def sortList(list: List[Int]): List[Int] = list match {
  case Nil =&gt; Nil
  case head :: tail =&gt; sortList(tail.filter(_ &lt; head)) ::: head :: sortList(tail.filter(_ &gt;= head))
}
</pre>
<p>is going through the same list (doing filter)&nbsp;2 times instead of 1?&nbsp;Shouldn't you rewrite it in something like</p>
<pre>
let splitted = splitBy((&gt;head), tail)
  in (sortList (fst splitted)) ++ [head] ++ (sortList (snd splitted))
</pre>
<p>To make traversal only 1 time?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1350385742120</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-16 22:09:02</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Yes. &nbsp;In fact there are many ways to rewrite it to make it more performant, if you really want it to perform, don't use List, because List is implemented using a linked list, which uses far more memory than an array, the ::: operation runs in n time, and the whole thing jumps all over the memory so plays really poorly with CPU caching. &nbsp;All of this and more is why the idiomatic Scala solutions do not perform well, but my point wasn't to try and create a idiomatic solution that performed well, but rather something that is clear and easy to read.</p>
<p>Obviously in the inner loop of quick sort traversing a list twice is really bad. &nbsp;In a typical web app though for example, if you have a list of things that you loaded from the database, you can traverse them a hundred times over, the amount of time it takes to do that is negligable compared to the amount of time it takes to load them from the database. &nbsp;It doesn't make sense to worry about these sorts of optimisations in those situations because they yield so little help, and are often at the cost of readibility. &nbsp;This is my point. &nbsp;Idiomatic Scala often does not perform well, but often it doesn't need to perform well either.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1350378849961</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1350393876694</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>24.7.67.118</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-17 00:24:36</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&quot;Scalable language&quot; refers to its ability to be used for anything from a small one-off script (where Java would be hopelessly clunky) all the way up to massive multi-team projects where typical scripting languages start to collapse.</p>
<p>It has nothing to do with being distributed, fault tolerant, etc. The language itself doesn't have such concepts built in any more than Java does.</p>
<p>The standard library does have actors built in, but they should not be used for anything but concurrency in the smallest of projects.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1350422108661</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-17 08:15:08</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Well this is where I hope to prove you wrong in my next blog post. &nbsp;And according to the Typesafe website, the Scalable part of Scala means &quot;<em>up to large development teams, large codebases, and large numbers of CPU cores&quot;.</em></p>
<p><a href="http://typesafe.com/technology/scala">http://typesafe.com/technology/scala</a></p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1350393876694</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1350463258446</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Sam</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>samkiller@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>132.227.118.203</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-17 19:40:58</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Try to write your code by making it tail recursive, then the @tailrec annotation on the methode. You should have better performance. Martin Odersky has been teaching a functional prrogramming course on coursera, and he's been emphasizing on writing functional&nbsp; code in&nbsp; tail recursive way. And it's not just a scala problem, since tail recursioon is not natively supported on the jvm.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1350507399812</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-18 07:56:39</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;It's already been optimised using tail recursion, as I explained in my blog post.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1350463258446</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1350720106575</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Loic D</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://coffeebean.loicdescotte.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>86.73.108.150</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-20 19:01:46</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;It seems that this annotation is only made to tell the developpers if the tail recursion is possible or not : if the compiler does not make the optmization, you will get a warning&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1350463258446</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1350827483242</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Kirk</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>kirk@kodewerk.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.kodewerk.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>86.101.104.54</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-22 00:51:23</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Most of the code is missing which means it's difficult to validate both methodology and results. Can you please publish all of the code and data used to run this bench?&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351601601995</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Frisian</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>no.no@no.no</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>194.31.225.222</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-30 23:53:21</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>It would be interesting to see, how the comparison will turn out with HotSpot kicking in. From what you wrote about your setup, i don't think, that the code will be compiled just-in-time.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351602870402</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-10-31 00:14:30</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hotspot was definitely kicking in, I ran each benchmark in a loop 3 times and only took the time from the third run, by the time it ran the inner loops would have executed several hundred thousand times, the JVM benchmarking guide recommends 10000, so I'm pretty confident that hotspot had kicked in. &nbsp;In addition, I always do a System.gc() immediately before a benchmark, to ensure that each run starts with the same heap state.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351601601995</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1354382535409</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Isaac Gouy</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>50.143.152.212</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-12-02 04:22:15</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>These programs run for less than a second, please just do the right thing and use the tools that others have provided to gather statistically meaningful results -- <a href="http://www.elis.ugent.be/JavaStats">JavaStats</a></p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351602870402</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1356995820206</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.171.36</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-01-01 10:17:00</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;In case you didn't read my blog post correctly, I'd just like to repeat, my point is that these benchmarks should be ignored, and in fact whatever you do to compare Java and Scala from a raw performance perspective, including using the tool you linked to, is irrelavent because it's all just byte code run by the same JVM. &nbsp;I'm not sure what point you're trying to make.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1354382535409</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1357061976700</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Isaac Gouy</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>24.23.139.92</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-01-02 04:39:36</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&lt;i&gt;I'm not sure what point you're trying to make.&lt;/i&gt;</p>
<p>You said - &quot;I'm pretty confident that hotspot had kicked in&quot; - and my point was that was just your guess.</p>
<p>&lt;i&gt;because it's all just byte code run by the same JVM&lt;/i&gt;</p>
<p>So we'd get the same performance as Scala programs if we used any other language implementation that targets JVM, for example &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Rhino&quot;&gt;Rhino&lt;/a&gt;?</p>
<p>I don't think so.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1356995820206</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1357085088330</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.206.178.211</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-01-02 11:04:48</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Ok, so I reran the benchmarks with the &quot;-XX:+PrintCompilation&quot; flag, which logs every method that is JITed when it is JITed. &nbsp;In the warm up run, everything was JITed, in the actual run, nothing was JITed, so this is no longer a guess, hotspot had definitely kicked in.</p>
<p>No, Rhino is not just byte code. &nbsp;Nor is jruby or jython. &nbsp;They may compile some of the code to bytecode, but that bytecode needs their associated runtimes still to run, because the JVM was not designed for dynamic languages, method/field lookups must be resolvable at classloading time, whereas method/field lookups in dynamic languages are done at runtime, and so they need a Rhino/jruby/jython runtime to do those lookups. &nbsp;This adds a lot of overhead to method invocations and field lookups.</p>
<p>Scala on the other hand translates directly to byte code, no runtime needed. &nbsp;A class in Scala is just a class in bytecode. &nbsp;A method in Scala is just a method in bytecode. &nbsp;A method invocation in Scala is just a bytecode invoke operation, no need to go into a runtime. &nbsp;A field in Scala is just a field in bytecode, and a field access is just a bytecode set or get operation, no need to go into a runtime (ok, actually it's more often a method invocation for Scala because of automatic encapsulation, but this would usually be inlined by the JVM anyway). &nbsp;After compiling a Scala class, you can use it from Java as if it was Java code, no runtime required. &nbsp;The same can't be said for Rhino, Jython or JRuby, because they aren't just byte code. &nbsp;Scala and Java are just byte code.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1357061976700</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1353180980294</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Nicholas Sterling</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://nicholassterling.wordpress.com/</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>99.191.111.35</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-18 06:36:20</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Excellent work, James! &nbsp;I refered to this post in <a href="http://nicholassterling.wordpress.com/2012/11/16/scala-performance/">another post on Scala performance</a>&nbsp;which responds to an allegation that Scala is 100x slower than Java.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1353193458660</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Nicholas Sterling</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://nicholassterling.wordpress.com/</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>99.191.111.35</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-18 10:04:18</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Just to be clear, sortArray() calls itself twice, and only the second one could be optimized by scalac. Obviously the first one is not in tail position -- there is more work to be done. So @tailrec would cause the compiler to bark about the first one. Still, it helps to have even one of them optimized.</p>
<p>You could make the method fully tail-recursive by pushing onto a list (or, for more efficiency, into arrays) a description of&nbsp;the work to be done on the two sub-arrays and then recursing to process the next one.</p>
<p>Also, scalac can only do tail-recursion optimization on a method if it is final or private, because only then can scalac be assured that the method is not overridden in a subclass. &nbsp;(If the method were overridden, the call should invoke the subclass's method.)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1356887364498</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Other James</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>j-devenish@users.sourceforge.net</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>124.169.228.242</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-12-31 04:09:24</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Hi James, I think there might be something wrong with your benchmarking method. On my mid-2011 MacBook Air with Scala 2.9.2, for 100000x100 I get very different microbenchmark results and a conclusion that is the opposite of yours. Namely, mine shows that the functional immutable style was faster than your procedural in-place style.</p>
<ul>
    <li>1. Java in-place style: 470 ns + array generation</li>
    <li>2. Scala in-place style 460 ns + array generation</li>
    <li>3. Scala functional style: 295 ns</li>
    <li>4. My Scala functional style: 295 ns</li>
    <li>5. Scala.List.sortWith(_&lt;_): 3675 ns&nbsp;</li>
    <li>6. java.util.Arrays.sort(_): 750 ns including array generation</li>
</ul>
<p>I chose to sort a reversed list of integers (100000, 99999, 99998, etc) 100 times.</p>
<p>Key points being:</p>
<ul>
    <li>The Scala functional style (#3) is over 35% faster than the Java in-place style (#1) NOT 20 times slower.</li>
    <li>I didn&rsquo;t seem to get &quot;tail recursion&quot; optimisation with the&nbsp;in-place style so my Scala result (#2) is the same as Java (#1)</li>
    <li>My functional style (#4) is slightly different from yours (#3), but both perform equivalently after compiler optimisation (good compiler).</li>
    <li>In this specific case, the Scala functional styles were 2.5 times faster than java.util.Arrays.sort (#6) and over 12 times faster than the Scala.List.sortWith API (#5).</li>
</ul>
<p>My Scala functional implementation was:</p>
<pre>
    def qsort[Type &lt;% Ordered[Type]](unsorted: List[Type]): List[Type] = data match {
        case Nil =&gt; Nil
        case pivot :: todo =&gt;
            val (low, high) = todo partition (_&lt;=pivot)
            qsort(low) ::: pivot :: qsort(high)
    }</pre>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1356888769618</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Other James</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>j-devenish@users.sourceforge.net</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>124.169.228.242</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-12-31 04:32:49</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Doh! Apologies, I just worked out why my benchmark results were so quick. I made the list using by writing &lt;code&gt;(100000 to 1).reverse&lt;/code&gt; when I meant &lt;code&gt;(1 to 100000).reverse&lt;/code&gt;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1368809054634</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Felipe Lauksas</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>177.40.161.149</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-05-18 02:44:14</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I don't know scale very well, but it sems that when you declare the pivot in java you didn't declared it as final and in the scala code you declared as val, that is the same. Since the JVM will not observe this object, because it's final in scala it, teorically have a better performance.</p>
<p>Please, do the test for us and let us know :)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1369459519232</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.171.36</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-05-25 15:25:19</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Declaring variables as final only impacts performance if they are fields of a class. &nbsp;Within a method, it makes no difference on performance.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1368809054634</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1375167593183</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Kirk</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>kirk@kodewerk.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.kodewerk.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>86.101.104.54</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-30 16:59:53</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Final has not impact on performance for fields either.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1369459519232</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1375169321282</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.206.178.211</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-30 17:28:41</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>This is not necessarily true. &nbsp;Consider the statement in the Oracle notes on <a href="https://wikis.oracle.com/display/HotSpotInternals/PerformanceTechniques">HotSpot performance optimisations</a>:</p>
<p>All such [safety] checks are aggressively folded into constants</p>
<p>So, the results of null checks, array length checks, instanceof etc, may be folded into constants, and can probably also be used to eliminate dead code, and to inline methods. &nbsp;But this can only be done on final fields, because you can't fold it into a constant if the value of the field might change.</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1375167593183</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1375179488788</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Kirk</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>kirk@kodewerk.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.kodewerk.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>86.101.104.54</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-30 20:18:08</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;In the runtime final isn't final so HotSpot can not make safe assumption on that keyword. Instead it uses SSA to determine what is constant and what isn't. Register hoisting and other like optimizations will be based on the SSA</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1375169321282</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1375159847288</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Chris Martin</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>ch.martin@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://chris-martin.org</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>96.25.185.6</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-30 14:50:47</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>You're comparing an in-place sorting algorithm to an out-of-place one. You can't just say that the &quot;idiomatic scala&quot; uses a different style for implementing the same algorithm. The third benchmark has a different method signature. You're comparing algorithms that solve different problems.&nbsp;I'm not sure that an out-of-place quicksort would be considered idiomatic in any context anyway. Especially since the data structure you're using is a cons list (which I think was a goofy choice for a benchmark against arrays), wouldn't the &quot;idiomatic scala programmer&quot; be much more apt to write a merge sort?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1375163821194</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.206.178.211</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-30 15:57:01</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Ok.... soooo... in a blog post where my main point is that micro benchmark comparisons between Scala and Java are stupid, you comment and say that my micro benchmark comparisons between Scala and Java are stupid. &nbsp;What's your point? &nbsp;Did you read the post before you commented?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1375159847288</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1375168422920</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Chris Martin</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>ch.martin@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://chris-martin.org</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>96.25.185.6</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-30 17:13:42</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Sorry for disagreeing with one thing you did without disagreeing with your entire thesis, I guess.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1375163821194</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1377375720633</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>moru0011@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>84.173.122.108</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-08-25 06:22:00</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I doubt the average industrial application programmer would judge the scala idomatic implementation to be clear and more maintainable ..</p>
<p>With java there is already the problem in larger teams, that tiny things can break performance easily. Most people don't know what is going on behind the scenes, so you will encouter &quot;LinkedList&lt;Byte&gt; outputBuffer&quot; and stuff all teh time.</p>
<p>Using scala in a non-geek team probably is a nightmare (if you have time to sleep at all .. you will be busy correcting all the weird code all nigth long)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Passing common state to templates in Play Framework</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/10/26/passing_common_state_to_templates_in_play_framework.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
This question comes up very frequently on the Play mailing list, so I thought I'd document a quick example of how to pass common state to shared templates in Play Framework when using Scala.  The use case is typically that you have a common header, but certain parts of it are dynamic, requiring data to be loaded from the database.
</p>

<p>
First of all, since the state required for rendering a header can logically be grouped into one object, a header object, let's do that.  This will mean we can easily add new types of data to the header without changing any of our existing code.  So I'm going to define a header that contains a list of menu items, and the current user:
</p>

<pre class="prettyprint"><code class="language-scala">case class Header(menu: Seq[MenuItem], user: Option[String])
case class MenuItem(url: String, name: String)
</code></pre>

<p>
Now the template that uses this is my main template, so I'm going to add my <tt>Header</tt> class to it as an implicit parameter.  Implicit parameters are parameters that don't need to be explicitly passed when you invoke a method, instead, if an implicit value exists in the scope of the invocation, that will be used:
</p>

<pre class="prettyprint"><code class="language-html">@(title: String)(content: Html)(implicit header: Header)

&lt;html&gt;
    &lt;head&gt;
        ...
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="header"&gt;
            @header.user.map { user =>
                &lt;div&gt;User: @user&lt;/div&gt;
            }
            &lt;ul&gt;
            @for(item &lt;- header.menu) {
                &lt;li&gt;&lt;a href="@item.url"&gt;@item.name&lt;/a&gt;&lt;/li&gt;
            }
            &lt;/ul&gt;
        &lt;/div&gt;
        @content
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>
Now to pass this implicit parameter, all I need to do is declare that each of my templates that use the main template also accept an implicit header parameter.  So for example, in my index template:
</p>

<pre class="prettyprint"><code class="language-scala">@(message: String)(implicit header: Header)

@main("Welcome to Play 2.0") {
    @play20.welcome(message)
}
</code></pre>

<p>
Now comes the magic, supplying this parameter.  I will write an implicit method that generates it.  When a parameterless method (implicit parameters don't count as parameters in this case) is declared as implicit, this allows it to be used to supply a value for an implicit parameter.  Here's the my method:
</p>

<pre class="prettyprint"><code class="language-scala">trait ProvidesHeader {

  implicit def header[A](implicit request: Request[A]) : Header = {
    val menu = Seq(MenuItem("/home", "Home"),
      MenuItem("/about", "About"),
      MenuItem("/contact", "Contact"))
    val user = request.session.get("user")
    Header(menu, user)
  }
}
</code></pre>

<p>
For now I've just hard coded the menu items, but you get the point.  Since this method is implicit, and it returns something of type <tt>Header</tt>, then it can be used to supply the implicit <tt>Header</tt> parameter that our index template needs.  You can also see that this method itself accepts an implicit parameter, the request.  If your method doesn't need the request, then you can remove that, however make sure that you remove the parenthesis from the method, it will only work with parameterless methods, not zero argument methods.
</p>

<p>
So what now do I need to do to my actions?  Almost nothing, I just need to make sure that my implicit <tt>header</tt> method is in scope, and that they declare the request they accept as an implicit parameter, so for example:
</p>

<pre class="prettyprint"><code class="language-scala">object Application extends Controller with ProvidesHeader {

  def index = Action { implicit request =>
    Ok(views.html.index("Your new application is ready."))
  }
}
</code></pre>

<p>
As you can see I've simply declared that my controller extends the <tt>ProvidesHeader</tt> trait.  My action code itself is left completely uncluttered, it doesn't need to know whether the templates it renders require a header, that's automatically provided, and in fact more implicit parameters could be added to my templates, and my action code still doesn't have to be aware of it.
</p>

<h2>A note for Java Play apps</h2>

<p>
Unfortunately this doesn't work so nicely for Java Play apps, since although you can still use implicit parameter passing in the templates, this needs to be explicitly handled by your actions.  As an alternative to implicit parameter passing, Play offers the <tt>args</tt> map for storing arbitrary per request data on the <tt>Http.Context</tt> class.  This can be populated through action composition, or however you want, and then accessed in your templates through the <tt>Http.Context.current</tt> thread local.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-10-26-passing_common_state_to_templates_in_play_framework</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-10-26 13:52:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352314687801</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Joerg Viola</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>joerg@joergviola.de</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.joergviola.de</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>87.161.187.178</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-08 05:58:07</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Nice, thank you.</p>
<p>Only that I need to explicitely add the implicit param to the signature of all my templates (170 currently and growing ;-). It would be ideal if it would be sufficient to add it only to my main page template, which is called by all the others. Any idea?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352341075902</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.206.178.211</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-08 13:17:55</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Well, there's nothing stopping you from invoking a static method to look up the state. &nbsp;This is basically the same as putting global state in your template system, or using thread locals... this is how many template frameworks do it traditionally, and that's fine for them since they aren't strongly typed to start with, so using global state is not really that bad. &nbsp;With Play Scala templates, everything is statically typed, which gives you the opportunity to do templates the right way, as pure functions, with no global state, no magic, everything that the template needs is provided and it's easy to follow and reason about where all the data comes from and where it all goes. &nbsp;Having the template invoke a static method that looks up some shared state somewhere breaks this, but that's ok if you're ok with that, you're in good company because that's how it's always been done.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352314687801</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1353611994350</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>john@mypersonalip.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>68.69.137.115</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-23 06:19:54</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[James:
I admit 90% of what you have said here is totally over my head.  I have however collected 2 fairly large lists of "random" numbers which i am currently attempting to find a way to analyse.  the Largest currently has between 8 and 9,000 3 didgit numbers which i have saved in an Excel worksheet, and have been having no success manually finding their common flow.  Do you have something that i can use to take my existing data and extrapolate future numbers?  Or perhaps point me in a direction to do so?
Tank You in Advance

John]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1363743479840</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Daniel Manchester</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>dpmanchester@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://oklampy.wordpress.com/</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>72.66.75.44</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-03-20 12:37:59</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;This worked like a charm for me, James--thank you.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1379460103709</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>vikashait@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>69.126.71.147</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-09-18 09:21:43</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi James, Thanks fotr this post!,</p>
<p>&nbsp;Actually I also did this mixing composition using implicit and finally I found your Blog.&nbsp;</p>
<p>&nbsp;Don't you think we implicit parameter is getting repeated in all the child templates? Is there any way we can avoid this. Sorry to bother you But I just want not to repeat this redundant parameter in all the child templates...</p>
<p>&nbsp;</p>
<p>Thanks</p>
<p>Vikash</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1379461615879</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>vikashait@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>69.126.71.147</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-09-18 09:46:55</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;I posted my problem also in StackOverflow (may be not the problem but something I am happy with :(&nbsp;)</p>
<p>&nbsp;</p>
<p><a href="http://stackoverflow.com/questions/18838417/passing-argument-to-man-scala-html">http://stackoverflow.com/questions/18838417/passing-argument-to-man-scala-html</a></p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Scaling Scala vs Java</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/11/02/scaling_scala_vs_java.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
In my <a href="https://jazzy.id.au/default/2012/10/16/benchmarking_scala_against_java.html">previous post</a> I showed how it makes no sense to benchmark Scala against Java, and concluded by saying that when it comes to performance, the question you should be asking is "How will Scala help me when my servers are falling over from unanticipated load?"  In this post I will seek to answer that, and show that indeed Scala is a far better language for building scalable systems than Java.
</p>

<p>
However, don't expect our journey to get there to be easy.  For a start, while it's very easy to do micro benchmarks, trying to show how real world apps do or don't handle the loads that are put on them is very hard, because it's very hard to create an app that's small enough to demo and explain in a single blog post that is at the same time big enough to actually show how real world apps behave under load, and it's also very hard to simulate real world loads.  So I am going to take one small aspect of something that might go wrong in the real world, and show just one way in which Scala will help you, where Java won't.  Then I will explain that this is just the tip of the iceberg, there are far more situations, and far more features of Scala that will help you in the real world.
</p>

<h2>An online store</h2>

<p>
For this exercise I have implemented an online store.  The architecture of this store is in the diagram below:
</p>

<img src="./images/blogs/javascalabenchmark/architecture.png" style="margin:10px; width:400px;"/>

<p>
As you can see, there is a payment service and a search service that the store talks to, and the store handles three types of requests, one for the index page that doesn't require going to any other services, one for making payments that uses the payments service, and another for searching the stores product list which uses the search service.  The online store is the part of the system that I am going to be benchmarking, I will implement one version in Java, and another in Scala, and compare them.  The search and payment services won't change.  Their actual implementations will be simple JSON APIs that return hard coded values, but they will each simulate a processing time of 20ms.
</p>

<p>
For the Java implementation of the store, I am going to keep it as simple as possible, using straight servlets to handle requests, Apache Commons HTTP client for making requests, and Jackson for JSON parsing and formatting.  I will deploy the application to Tomcat, and configure Tomcat with the NIO connector, using the default connection limit of 10000 and thread pool size of 200.
</p>

<p>
For the Scala implementation I will use Play Framework 2.1, using the Play WS API which is backed by the Ning HTTP client to make requests, and the Play JSON API which is backed by Jackson to handle JSON parsing and formatting.  Play Framework is built using Netty which has no connection limit, and uses Akka for thread pooling, and I have it configured to use the default thread pool size, which is one thread per CPU, and my machine has 4.
</p>

<p>
The benchmark I will be performing will be using JMeter.  For each request type (index, payments and search) I will have 300 threads spinning in a loop making requests with a random 500-1500ms pause in between each request.  This gives an average maximum throughput of 300 requests per second per request type, or 900 requests per second all up.
</p>

<p>
So, let's have a look at the result of the Java benchmark:
</p>

<img src="./images/blogs/javascalabenchmark/javastoreapp.png" style="margin:10px"/>

<p>
On this graph I have plotted 3 metrics per request type.  The median is the median request time.  For the index page, this is next to nothing, for the search and payments requests, this is about 77ms.  I have also plotted the 90% line, which is a common metric in web applications, it shows what 90% of the requests were under, and so gives a good idea of what the slow requests are like.  This shows again almost nothing for the index page, and 116ms for the search and payments requests.  The final metric is the throughput, which shows number of requests per second that were handled.  We are not too far off the theoretical maximum, with the index showing 290 requests per second, and the search and payments requests coming through at about 270 requests per second.  These results are good, our Java service handles the load we are throwing at it without a sweat.
</p>

<p>
Now let's take a look at the Scala benchmark:
</p>

<img src="./images/blogs/javascalabenchmark/scalastoreapp.png" style="margin:10px"/>

<p>
As you can see, it's identical to the Java results.  This is not surprising, since both the Java and the Scala implementations of the online store are doing absolutely minimal work code wise, most of the processing time is going in to making requests on the remote services.
</p>

<h2>Something goes wrong</h2>

<p>
So, we've seen two happy implementations of the same thing in Scala and Java, shrugging off the load I give them.  But what happens when things aren't so fine and dandy?  What happens if one of the services that they are talking to goes down?  Let's say the search service starts taking 30 seconds to respond, after which point it returns an error.  This is not an unusual failure situation, particularly if you're load balancing through a proxy, the proxy tries to connect to the service, and fails after 30 seconds, giving you a gateway error.  Let's see how our applications handle the load I throw at them now.  We would expect the search request to take at least 30 seconds to respond, but what about the others?  Here's the Java results:
</p>

<img src="./images/blogs/javascalabenchmark/javastoresearchdown.png" style="margin:10px"/>

<p>
Well, we no longer have a happy app at all.  The search requests are naturally taking a long time, but the payments service is now taking an average of 9 seconds to respond, the 90% line is at 20 seconds.  Not only that, but the index page is similarly impacted - users are not going to be waiting that long if they've browsed into your site for the home page to show up.  And the throughput of each has gone down to 30 requests per second.  This is not good, because your search service went down, your whole site is now practically unusable, and you will soon start losing customers and money.
</p>

<p>
So how does our Scala app fair?  Let's find out:
</p>

<img src="./images/blogs/javascalabenchmark/scalastoresearchdown.png" style="margin:10px"/>

<p>
Now before I say anything else, let me point out that I've bounded the response time to 160ms - the search requests are actually taking about 30 seconds to respond, but on the graph, with 30 seconds next to the other values, they hardly register a line a pixel high.  So what we can see here is that while search is unusable, our payments and index request response times and throughput are <em>unchanged</em>.  Obviously, customers aren't going to be happy with not being able to do searches, but at least they can still use other parts of your site, see your home page with specials, and even still make payments for items.  And hey, Google isn't down, they can always use Google to search your site.  So you might lose some business, but the impact is limited.
</p>

<p>
So, in this benchmark, we can see that Scala wins hands down.  When things start to go wrong, a Scala application will take it in it's stride, giving you the best it can, while a Java application will likely just fall over.
</p>

<h2>But I can do that in Java</h2>

<p>
Now starts the bit where I counter the many anticipated criticisms that people will make of this benchmark.  And the first, and most obvious one, is that in my Scala solution I used asynchronous IO, whereas in my Java solution I didn't, so they can't be compared.  It is true, I could have implemented an asynchronous solution in Java, and in that case the Java results would have been identical to the Scala results.  However, while I could have done that, Java developers don't do that.  It's not that they can't, it's that they don't.  I have written a lot of webapps in Java that make calls to other systems, and very rarely, and only in very special circumstances, have I ever used asynchronous IO.  And let me show you why.
</p>

<p>
Let's say you have to do a series of calls on a series of remote services, each one depending on data returned from the previous.  Here's a good old fashioned synchronous solution in Java:
</p>

<pre class="prettyprint"><code class="language-java">User user = getUserById(id);
List&lt;Order&gt; orders = getOrdersForUser(user.email);
List&lt;Product&gt; products = getProductsForOrders(orders);
List&lt;Stock&gt; stock = getStockForProducts(products);
</code></pre>

<p>
The above code is simple, easy to read, and feels completely natural for a Java developer to write.  For completeness, let's have a look at the same thing in Scala:
</p>

<pre class="prettyprint"><code class="language-scala">val user = getUserById(id)
val orders = getOrdersForUser(user.email)
val products = getProductsForOrders(orders)
val stock = getStockForProducts(products)
</code></pre>

<p>
Now, let's have a look at the same code, but this time assuming we are making asynchronous calls and returning the results in promises.  What does it look like in Java?
</p>

<pre class="prettyprint"><code class="language-java">Promise&lt;User&gt; user = getUserById(id);
Promise&lt;List&lt;Order&gt;&gt; orders = user.flatMap(new Function&lt;User, List&lt;Order&gt;&gt;() {
  public Promise&lt;List&lt;Order&gt;&gt; apply(User user) {
    return getOrdersForUser(user.email);
  }
}
Promise&lt;List&lt;Product&gt;&gt; products = orders.flatMap(new Function&lt;List&lt;Order&gt;, List&lt;Product&gt;&gt;() {
  public Promise&lt;List&lt;Product&gt;&gt; apply(List&lt;Order&gt; orders) {
    return getProductsForOrders(orders);
  }
}
Promise&lt;List&lt;Stock&gt;&gt; stock = products.flatMap(new Function&lt;List&lt;Product&gt;, List&lt;Stock&gt;&gt;() {
  public Promise&lt;List&lt;Stock&gt;&gt; apply(List&lt;Product&gt; products) {
    return getStockForProducts(products);
  }
}
</code></pre>

<p>
So firstly, the above code is not readable, in fact it's much harder to follow, there is a massively high noise level to actual code that does stuff, and hence it's very easy to make mistakes and miss things.  Secondly, it's tedious to write, no developer wants to write code that looks like that, I hate doing it.  Any developer that wants to write their whole app like that is insane.  And finally, it just doesn't feel natural, it's not the way you do things in Java, it's not idiomatic, it doesn't play well with the rest of the Java ecosystem, third party libraries don't integrate well with this style.  As I said before, Java developers <em>can</em> write code that does this, but they <em>don't</em>, and as you can see, they don't for good reason.
</p>

<p>
So let's take a look at the asynchronous solution in Scala:
</p>

<pre class="prettyprint"><code class="language-scala">for {
  user &lt;- getUserById(id)
  orders &lt;- getOrdersForUser(user.email)
  products &lt;- getProductsForOrders(orders)
  stock &lt;- getStockForProducts(products)
} yield stock
</code></pre>

<p>
In contrast to the Java asynchronous solution, this solution is completely readable, just as readable as the Scala and Java synchronous solutions.  And this isn't just some weird Scala feature that most Scala developers never touch, this is how a typical Scala developer writes code <em>every day</em>.  Scala libraries are designed to work using these idioms, it feels natural, the <em>language is working with you</em>.  It's fun to write code like this in Scala!
</p>

<p>
This post is not about how with one language you can write a highly tuned app for performance that's faster than the same app written in another language highly tuned for performance.  This post is about how Scala helps you write applications that are scalable by default, using natural, readable and idiomatic code.  Just like a ball in lawn bowls has a bias, Scala has a bias to helping you write scalable applications, where Java makes you swim upstream.
</p>

<h2>But scaling means so much more than that</h2>

<p>
The example I've provided of Scala scaling well where Java doesn't is a very specific example, but then what situation where your app is failing under high load isn't?  Let me give a few other examples of where Scala's much nicer asynchronous IO support helps you to write scalable code:
</p>

<ul>
<li>
Using Akka, you can easily define actors for different types of requests, and allocate them different resource limits.  So if certain parts of your single application start struggling or receiving unanticipated load, those parts may stop responding, but the rest of your app can stay healthy.
</li>
<li>
Scala, Play and Akka make handling single requests using multiple threads running in parallel doing different operations incredibly simple, allowing you to have requests that do a lot in very little time.  Klout wrote an <a href="http://corp.klout.com/blog/2012/10/scaling-the-klout-api-with-scala-akka-and-play/">excellent article<a> about how they did just that in their API.
</li>
<li>
Because asynchronous IO is so simple, offloading processing onto other machines can be safely done without tying up threads on the first machine.
</li>
</ul>

<h2>Java 8 will make asynchronous IO simple in Java</h2>

<p>
Java 8 is probably going to include support for closures of some sort, which is great news for the Java world, especially if you want to do asynchronous IO.  However, the syntax still won't be anywhere near is readable as the Scala code I showed above.  And when will Java 8 be released?  Java 7 was released last year, and it took 5 years to release that.  Java 8 is scheduled for summer 2013, but even if it arrives on schedule, how long will it take for the ecosystem to catch up?  And how long will it take for Java developers to switch from a synchronous to an asynchronous mindset?  In my opinion, Java 8 is too little too late.
</p>

<h2>So this is all about asynchronous IO?</h2>

<p>
So far all I've talked about and shown is how easy Scala makes asynchronous IO, and how that helps you scale.  But it doesn't stop there.  Let me pick another feature of Scala, immutability.

<p>
When you start using multiple threads to process single requests, you start sharing state between those threads.  And this is where things get very messy, because the world of shared state in a computer system is a crazy world where impossible things happen.  It's a world of deadlocks, a world of updating memory in one thread, but another thread not seeing that change, a world of race conditions, and a world of performance bottle necks because you over eagerly marked some methods as synchronized.
</p>

<p>
However, it's not that bad, because there is a very simple solution, make all your state immutable.  If all your state is immutable, then none of the above problems can happen.  And this is again where Scala helps you big time, because in Scala, things are immutable by default.  The collection APIs are immutable, you have to explicitly ask for a mutable collection in order to get mutable collections.
</p>

<p>
Now in Java, you can make things immutable.  There are some libraries that help you (albeit clumsily) to work with immutable collections.  But it's so easy to accidentally forget to make something mutable.  The Java API and language itself don't make working with immutable structures easy, and if you're using a third party library, it's highly likely that it's not using immutable structures, and often requires you to use mutable structures, for example, JPA requires this.
</p>

<p>
Let's have a look at some code.  Here is an immutable class in Scala:
</p>

<pre class="prettyprint"><code class="language-scala">case class User(id: Long, name: String, email: String)
</code></pre>

<p>
That structure is immutable.  Moreover, it automatically generates accessors for the properties.  Let's look at the corresponding Java:
</p>

<pre class="prettyprint"><code class="language-java">public class User {
  private final long id;
  private final String name;
  private final String email;

  public User(long id, String name, String email) {
    this.id = id;
    this.name = name;
    this.email = email;
  }

  public long getId() {
    return id;
  }

  public String getName() {
    return name;
  }

  public String getEmail() {
    return email
  }
}
</code></pre>

<p>
That's an enormous amount of code!  And what if I add a new property?  I have to add a new parameter to my constructor which will break existing code, or I have to define a second constructor.  In Scala I can just do this:
</p>

<pre class="prettyprint"><code class="language-scala">case class User(id: Long, name: String, email: String, company: Option[Company] = None)
</code></pre>

<p>
All my existing code that calls that constructor will still work.  And what about when this object grows to have 10 items in the constructor, constructing it becomes a nightmare!  A solution to this in Java is to use the builder pattern, which more than doubles the amount of code you have to write for the object.  In Scala, you can name the parameters, so it's easy to see which parameter is which, and they don't have to be in the right order.  But maybe I might want to just modify one property.  This can be done in Scala like this:
</p>

<pre class="prettyprint"><code class="language-scala">case class User(id: Long, name: String, email: String, company: Option[Company] = None) {
  def copy(id: Long = id, name: String = name, email: String = email, company: Option[Company] = company) = User(id, name, email, company)
}

val james = User(1, "James", "james@jazzy.id.au")
val jamesWithCompany = james.copy(company = Some(Company("Typesafe")))
</code></pre>

<p>
The above code is natural, it's simple, it's readable, it's how Scala developers write code every day, and it's immutable.  It is aptly suited to concurrent code, and allows you to safely write systems that scale.  The same can be done in Java, but it's tedious, and not at all a joy to write.  I am a big advocate of immutable code in Java, and I have written many immutable classes in Java, and it hurts, but it's the lesser of two hurts.  In Scala, it takes more code to use mutable objects than to use immutable.  Again, Scala is biased towards helping you scale.
</p>

<h2>Conclusion</h2>

<p>
I cannot possibly go into all the ways in which Scala helps you scale where Java doesn't.  But I hope I have given you a taste of why Scala is on your side when it comes to writing Scalable systems.  I've shown some concrete metrics, I've compared Java and Scala solutions for writing scalable code, and I've shown, not that Scala systems will always scale better than Java systems, but rather that Scala is the language that is on your side when writing scalable systems.  It is biased towards scaling, it encourages practices that help you scale.  Java, in contrast, makes it difficult for you to implement these practices, it works against you.
</p>

<p>
If you're interested in my code for the online store, you can find it in <a href="https://github.com/jroper/scaling-scala-java">this GitHub repository</a>.  The numbers from my performance test can be found in <a href="https://docs.google.com/spreadsheet/ccc?key=0AqCHhCW8dvMHdFpCNDNxVVdQZkg1ZGJyanc2NUU2VFE">this spreadsheet</a>.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-11-02-scaling_scala_vs_java</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-11-02 02:19:37</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351809735179</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-02 09:42:15</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>In case you've noticed the rather ironic situation where my blog went down a few hours after I published this, I'd love to say that the reason is because the blog is implemented in Java and not Scala (it is running on Pebble, a Java blog application), but the reason was actually because the load generated by this blog post, more traffic than I've ever seen before, was causing Apache to fork more processes than usual. &nbsp;My server started running out of memory, and then the Linux OOM killer very kindly decided to *fix* that for me by killing Java.</p>
<p>So now I've made a few adjustments, I've double the amount of swap space available so Linux hopefully won't be so obliging in killing the most important process on the server again, I've switched Apache to worker mode instead of prefork which should lower the amount of memory it needs, and I've removed a few other unused services from my server. &nbsp;Hopefully this should keep it up and running.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351858986238</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>badyl</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>piotr@bzdyl.net</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>91.218.203.34</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-02 23:23:06</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Hi,</p>
<p>The same can happen in your store application - you use async IO so probably won't run out of threads (like in thread per connection model) - but it doesn't protect you from running out of JVM heap memory as you can accept (theoretically) unlimited number of connections until OOME happens.</p>
<p>Does Play framework provide built in feature to limit number of concurrent connections to the system so it for example quickly returns HTTP 503 allocating as little as possible on the heap?</p>
<p>Thanks,</p>
<p>badyl</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351809735179</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351891377208</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 08:22:57</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;I haven't done any formal measurements, but I suspect the amount of heap an average request takes would be around 2kb. &nbsp;With a 256mb heap, you'll run out of memory at 125000 concurrent requests. &nbsp;That's several orders of magnitude above the load that I was testing with. &nbsp;The OS will start refusing to accept connections as it reaches its file descriptor limits before you run out of memory. &nbsp;So I don't think limiting connections is necessary here. &nbsp;Play is designed to handle massively high numbers of concurrent connections, being a framework with first class support for websockets and comet.</p>
<p>But yes, there are always limits, in the example above we hit the thread pool limit in Java. &nbsp;The point I want to make is not that Play lets you avoid resource limits, it gives you greater control over them. &nbsp;In a servlet based framework, you have one thread pool. &nbsp;You want this thread pool to be big so that you can handle blocking IO, but you also want it to be small to give your server a chance to finish some requests by blocking subsequent requests when it's under high load, because adding more load to an already overloaded system generally slows it down.</p>
<p>What Scala with Play and Akka makes very easy is having different resources allocated for different requests, you can have a small thread pool for a few high CPU tasks, a big thread pool for making blocking calls on a local database, and another small thread pool for making async calls on remote services, and use these accordingly. &nbsp;When lots of requests for the high CPU tasks come in, they queue up, but other types of requests continue unhindered.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351858986238</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351891670345</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>badyl</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>piotr@bzdyl.net</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>91.218.203.34</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 08:27:50</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Yes, I agree that in your example you will first hit problems with number of connections (and related to it limits for file descriptors, ephemeral ports on single network interface, network buffers etc.).</p>
<p>But what in case your requests, responses and other objects allocated during request processing is much bigger and your heap is your limit? I am just curious if there is anything built in in Play so I can just set it up easily and limit number of concurrent requests that actually go into my system and occupy heap.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351891377208</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352223204147</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Clay</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>ClaytonWohl@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>206.76.70.235</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-07 04:33:24</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Come on, you can use a java future/promise class or some type of shim&nbsp;that implements iterable and allows you to use for loop semantics rather than flat map just like your Scala example.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351809735179</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352237726232</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-07 08:35:26</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>That's not a for loop, it's a for comprehension, which is <b>completely</b> different from a for loop. The following code:</p>

<pre>
for {
 a &lt;- getA()
 b &lt;- getB(a)
} yield b
</pre>

<p>
Actually gets compiled to something that looks like this:
</p>

<pre>
getA().flatMap { a =&gt; 
  getB(a).map(b =$gt; (a, b))
}.map(r =&gt; r._2)
</pre>

<p>
As you can see it's not a loop at all, it's syntactic sugar for doing many flatmaps and maps over and over.  The Scala code is actually doing exactly the same as the Java code, it's just that the Scala language is built for doing these types of things, where Java isn't.
</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352223204147</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352246964960</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Clay</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>ClaytonWohl@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>24.173.238.82</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-07 11:09:24</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;You are being ridiculous. The following Java syntax would be easy to accommodate:</p>
<div>&nbsp;</div>
<div>for (User user : getUserById(id))</div>
<div>for (List&lt;Order&gt; orders : getOrdersForUser(id))</div>
<div>for (List&lt;Product&gt; products : getProductsForOrders(orders))</div>
<div>for (List&lt;Stock&gt; stock : getStockForProducts(products)) {</div>
<div><span>	</span>// Do something</div>
<div>}</div>
<div>&nbsp;</div>
<div>&quot;That's not a for loop, it's a for comprehension, which is completely different from a for loop.&quot;</div>
<div>&nbsp;</div>
<div>The only technical difference is that Scala's for loops can return a value with yield, which is a great design. It's still a for loop though. No snobbish flowery synonyms are required :)</div>
<div>&nbsp;</div>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352237726232</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352248504180</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>110.33.19.163</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-07 11:35:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>For comprehensions can be used to loop, but they are more than loops. &nbsp;With for comprehensions, you are passing closures to the flatmap and map methods. &nbsp;With Java for each loops, you are not passing a closure, it compiles to a loop in bytecode around an ordinary block. &nbsp;Because in Scala for comprehensions you are passing closures, the execution of those closures can be deferred to later. &nbsp;Hence Scala for comprehensions can be used to compose asynchronous code, because the execution of those closures dosen't have to happen until the future/iteratee has completed. &nbsp;In Java, since it is just wrapping a block with a loop, the execution cannot be deferred to later, hence Java for each loops cannot be used to compose asynchronous code, since the code has to either be executed now or never.&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352246964096</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352310908363</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Clay</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>ClaytonWohl@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>24.173.238.82</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-08 04:55:08</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Sorry, I was wrong and you are right :) A Java &quot;for&quot; can not defer execution as needed for async processing. I didn't know Scala could do that. I'll be reading into that more today. thanks for the explanation.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352248504018</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1384073737189</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>concept47</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://blog.concept47.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>72.183.112.140</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-11-10 19:55:37</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;You should see about switching to nginx (probably not a small task, I know), seeing as it uses an evented model and doesn't spawn threads to respond to requests</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351809735179</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351835681390</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Wargotad</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>89.217.6.10</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-02 16:54:41</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>You have an error I think in the code snippet about using Future in Java. flatMap's should be called respectively on orders and products. And I think that the second variable in the snippet should be stock.</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351835959290</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.206.178.211</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-02 16:59:19</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Thankyou, you are correct. &nbsp;This is what happens when you rush to finish a blog post at 2am. &nbsp;At least I proved my point of the code making it easy to miss things :)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351835681039</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351845771188</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Kai Wähner</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>kontakt@kai-waehner.de</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.kai-waehner.de</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>93.206.215.85</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-02 19:42:51</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi James,</p>
<p>nice article.</p>
<p>However, I would be one of the guys you mentioned who says that you are comparing apples and oranges&nbsp;:-)</p>
<p>Especially, I wonder why you did not use Play for Scala and Play for Java as the Play framework offers APIs for both languages. This would be a real comparison - however, probably with the same results?</p>
<p>Best regards,</p>
<p>Kai W&auml;hner (Twitter: @KaiWaehner)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351852826292</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-02 21:40:26</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I started using Play framework using the Java API. &nbsp;I embraced the async APIs. &nbsp;But it was frustrating, it's not how I like writing Java, and the developers I was working with didn't see the point in doing everything async. &nbsp;I've given presentations at user groups on doing async IO in Java using Play framework, and the Java developers are always sceptical over the number of anonymous classes and how complex it all looks. &nbsp;They don't want to write code like that, because it doesn't feel natural. &nbsp;So my reasoning behind choosing Tomcat with commons HTTP client was because these are natural technology choices for Java developers.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351845771188</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351853909540</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Kai Wähner</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>kontakt@kai-waehner.de</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.kai-waehner.de</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>93.206.215.85</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-02 21:58:29</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Thanks for your explanation. </p>
<p>Btw: I do not disagree that Scala scales better. However, as you said, many Java develerops are scared of learning new concepts (and languages), unfortunately. Let's hope that more people will use Play Scala or at least Scala's concepts in Play Java API in the future.</p>
<p>Kai</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351858758848</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-02 23:19:18</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Perhaps we agree more than you think than. &nbsp;I don't think Scala scales better, at the end of the day, Scala and Java are just different ways of expressing the same byte code, they both scale the same. &nbsp;And look at Facebook, it's written in PHP. &nbsp;If PHP can work at Facebook scale, then anything can made to scale. &nbsp;But, when I'm writing Scala, I feel like the language is working with me to help me achieve this, whereas I'm sick to death of writing anonymous classes, private final fields, always making sure I wrap lists in Guava ImmutableList.copyOf and everything else I need to do to be confident that my Java systems will scale.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351853909054</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351863275587</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Javin</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>savingfunda@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://javarevisited.blogspot.com.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>220.255.2.55</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 00:34:35</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I don't have much experience on Scala but in terms of Scalability, I stil think Java scores better.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351891493273</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 08:24:53</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>On what do you base this? &nbsp;If you're refering to raw performance, read&nbsp;<a href="http://jazzy.id.au/default/2012/10/16/benchmarking_scala_against_java.html">jazzy.id.au/default/2012/10/16/benchmarking_scala_against_java.html</a>. &nbsp;The fact is, from a scoring perspective, Java and Scala are basically identical.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351863275587</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351871944185</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>pjriot</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>pjriot+scalajavascaling@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>86.47.18.28</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 02:59:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi Roger,</p>
<p>Have you been watching development of the new JAX-RS 2.0 spec? It seems to make async request handling a good deal simpler.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351891746299</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 08:29:06</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;I just had a look then, I think I like promises a lot better, they compose, they make it clear what a particular method call is returning, and there's no magic.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351871944185</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351895800853</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>86.47.18.28</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 09:36:40</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Apologies for calling you Roger. I was just speaking with a colleague of mine with that name when composing the post.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351891746299</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351898565302</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 10:22:45</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;No worries :)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351895800853</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351885326781</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Vincent</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>68.5.189.156</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 06:42:06</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Well written article and I agree with everything said.</p>
<p>People seem to be taking issue with the fact that, yes, a masochist could conceivably write an async java solution. &nbsp;Your point is simply that they don't.</p>
<p>Maybe a follow up article could compare how a disgusting java implementation would look compared to the very simple scala one. &nbsp;I know this becasue I've written an async framework for production use in java, and then later in scala, and the latter was easier to program, debug, and maintain. &nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351892169269</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 08:36:09</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I think the difficulty here is presenting it. &nbsp;A trivial app will always look simple, so it needs to be a big app, but if it's big, then no one will take a look at it, it will be impossible to present concisely in a blog post that anyone would read, and the critiques will still criticise.</p>
<p>Besides, I'm not trying to change anyones opinions here, the motivation behind writing this blog post was that people were asking about benchmarking Scala against Java. &nbsp;In&nbsp;<a href="http://jazzy.id.au/default/2012/10/16/benchmarking_scala_against_java.html">jazzy.id.au/default/2012/10/16/benchmarking_scala_against_java.html</a>&nbsp;I explained why this was the wrong question, this post is a follow up to that. &nbsp;I'm just answering a question.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351885326781</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351924180394</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Pablo</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>63.235.13.3</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 17:29:40</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>This article makes a few (valid) points:</p>
<p>* Async IO has better fault tolerance than synchronous IO.</p>
<p>* Scala has better syntax and semantics for async programming/constructs.</p>
<p>* Java is verbose.</p>
<p>Though these are fine, and pretty well explained, there's nothing about scalabilty here. Sorry.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1351926383304</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-03 18:06:23</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Fault tolerance is a big part of scalability. &nbsp;For a small system it's likely that at any one point in time, everything will be working. &nbsp;As you scale up, that becomes the opposite, the chance of something breaking increases to the point where something being down is not an exceptional situation, it's a normal situation. &nbsp;If your system isn't fault tolerant, then it won't scale to that point, hence a scalable system must be a fault tolerant system.</p>
<p>That aside, I chose fault tolerance as an example because it's easy to simulate a fault in a way that can be clearly explained and comprehended by readers of a blog post. &nbsp;Through that I could show some meaningful numbers, and having understood that, it's not hard to then make the jump to see how the same concepts can be applied to running many tasks in parrallel and distributing load across multiple systems, which are both directly related to scalability.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1351924180394</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352047338300</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Nikos Maravitsas</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>nikos.maravitsas@javacodegeeks.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.javacodegeeks.com/</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>77.49.42.51</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-05 03:42:18</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi James,</p>
<p>Great blog! Is there an email address I could contact you in private?&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352050444210</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>92.24.108.254</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-05 04:34:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;It would be interesting to compare Async Play! Java with Apache Mina and Glassfish Grizzly.&nbsp;</p>
<p>However, personally I think the larger impediment to Async development in Javaland is the lack of support in the Servlet API. The inability to smoothly migrate existing code (however unlikely) is often a killer for developing new code in a better way.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352299219364</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Libor</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>81.19.3.233</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-08 01:40:19</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hello,</p>
<p>I guess the slump in peformance in the Java solution is caused by depleation of Tomcat's thread pool (which is of size 200) and waiting for threads to be available again.&nbsp;I'm not sure if I understand it but simply calling the services asynchronously would not help since the thread handling a connection is still in use, even if it is idle.</p>
<p>Does the try-yield block in Scala work as asynchronous servlets in Java, or would Scala suffer the same problem if there was a thread pool for handling connections?</p>
<p>Thanks,Libor</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352341452226</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.206.178.211</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-08 13:24:12</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Yes, it is the thread pool that causes the issues.</p>
<p>For the Scala solution I used Play framework, which allows you to return a future as a result, so the framework takes care of what happens when the result is ready. &nbsp;If you were using something like the Servlet 3 API with asynchronous support, what you would do would be register an onComplete callback on the returned future, and it would handle sending the result to the response asynchronously. &nbsp;This is cumbersome, however I suspect noone will actually ever use this, rather there will be frameworks built on top of the async servlet API that allow you to just return futures.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352299219364</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352615667155</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Seyun Choi</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      <wp:comment_author_url>http://ppassa.wordpress.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>115.140.75.42</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-11 17:34:27</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Great post!</p>
<p>I've learned and used Scala for the exactly same reason you mentioned. But, I failed to encourage my colleagues to program with Scala.</p>
<p>Now I believe your post will help. :)</p>
<p>Good job, James.</p>
<p>Justin.</p>
<p>PS:</p>
<p>The following is my post on the same subject, but in Korean.</p>
<p>http://ppassa.wordpress.com/2012/05/23/scala_for_java_programmer/</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1356617873930</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>pieroxy</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>pieroxy@pieroxy.net</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://pieroxy.net</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>91.199.242.236</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-12-28 01:17:53</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;James,</p>
<p>While I agree with most of what you wrote, Java also provides asynchronous servlets which, while made for long http requests, could also be made to serve any request susceptible to be calling anything outside the VM that may be slow. With a tiny tiny framework of a few dozen lines, all your &quot;servlets&quot; would be asynchonous, and you then could do &nbsp;anything synchronously from there - avoiding that servlet A impacts Servlet B. So your synchronous example would actually work better than its Scala counterpart ;-)</p>
<p>Having every single call asynchronous as in your example makes also things more complicated to A) unit test properly and B) debug.&nbsp;</p>
<p>I don't have firsthand experience with Scala or with massive parallelization / asynchronous programming. Can you tell us if really the overhead in unit testing and debugging is bad?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1356996472752</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.171.36</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-01-01 10:27:52</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Of course you can handle requests asynchronously using asynchronous servlets, but the code overhead is still massive, the asynchronous HTTP libraries available don't make things easy either from a code readability perspective, and there's no standard way of doing promises in Java - Java provides futures, but you can't even attach callbacks to them when they are finished. &nbsp;The code to implement it, apart from the boiler plate of Java anonymous classes, would be mostly just setting up runnables and futures, instead of focussing on the business logic.</p>
<p>As far as debugging goes, it's not as nice as synchronous code. &nbsp;Stack traces are often meaningless, and stepping through code with a debugger requires putting break points everywhere. &nbsp;The debuggers I think will get smarter, but it will never be as nice as debugging synchronous code. &nbsp;But it's not impossible. &nbsp;The Typesafe console uses compile time weaving on code to be able to follow asynchronous call flows between actors in Akka, we should see similar things for futures in the future.</p>
<p>From a unit testing perspective, usually in order to unit test you need to bring up your thread pools, so unit testing gets a little bit more heavy weight, but it's not too bad. &nbsp;Of course, if you want to unit test your the concurrency side of your code, that's another story, but then that's no better with synchronous solutions, at least with a functional asynchronous solution you can better reason about your code.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1356617873093</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1360809375179</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>99.126.209.34</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-02-14 13:36:15</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>What version of Play did you use for this, I am trying to play with the code in GitHub and running into compile issues. I have 2.0.4 locally.&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1371565624763</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>health</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>derek.hinkle@whale-mail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://sksplus.com/?a[]=%3Ca+href=http://idmp.hatii.arts.gla.ac.uk/index.php/User:Romeo0328%3Epure+garcinia+cambogia+extract%3C/a%3E</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-19 00:27:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[Hi there! Do you know if they make any plugins to safeguard against hackers?
I'm kinda paranoid about losing everything I've worked hard on.
Any tips?]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1378840459930</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Jstar88</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>79.17.184.127</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-09-11 05:14:19</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Well, i read the basic scala tutorial&nbsp; http://docs.scala-lang.org/tutorials/scala-for-java-programmers.html</p>
<p>And i found some usefull features, expecially i'm really <span lang="en" class="short_text" id="result_box"><span class="hps">attracted by functional programming.<br />
</span></span><span lang="en" class="short_text"><span class="hps">But on the other hand Scala </span></span><span lang="en" class="short_text" id="result_box"><span class="hps">is less explanatory than Java and more &quot;magic&quot;: it can easly help you but increment team </span></span><span lang="en" class="short_text" id="result_box"><span class="hps"><span lang="en" class="short_text" id="result_box"><span class="hps alt-edited">comprehension time.</span></span> </span></span></p>
<p>Anyway play2 is able to manage also java, so i was very happy untill when i tryed to do a little more than usual static pages. Infact i tryed to split the project in sub-projects as decent big application should be. Anyway i had to wast time learning a bit of scala to edit&nbsp; Build.scala file to <span lang="en" class="short_text" id="result_box"><span class="hps">dynamically </span></span>add dependences. Also, i needed to <span lang="en" class="short_text" id="result_box"><span class="hps">dynamically add sub-routes BUT there is not way to do that in Java because you cannot reflect the target Route class (at request coming in Global.java) to delegate it the request, since it require a scala HttpHeader as argument while you have the java one version. I circumvented around this problem, editing the main Routes file at fly on application start up.. </span></span></p>
<p>https://github.com/jstar88/PlayTests</p>
<p><span lang="en" class="short_text" id="result_box"><span class="hps">i means, Java devs will always have problems on some stuff. <br />
</span></span></p>
<p>So transition to Scala is more than optional if you want use Play in big applications. At the same time, Play2 focus in a old HTTP style web framework instead provide modern features as Meteor or DerbyJs do with the same or even better performance and with more Java-like language. <span lang="en" class="short_text" id="result_box"><span class="hps">Moreover, for medium-low target webapp you can use the easy and robust symfony framework.<br />
</span></span></p>
<p>So i really don't understand why i should learn Scala + Play for both low-medium-hight traffic website.</p>
<p>I hope to see Play2 evolve with Websocket as default protocoll,a client side template engine and json as result only. Something like Meteor but built on vert.x so it will be very language free. Maybe using google compiler to trasform java to javascripts and making a full Java framework instead full Javascripts. a dream ;)</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1379961690860</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Zahid</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>17.198.14.223</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-09-24 04:41:30</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Great article, thanks for highlighting how FT is promoted by scala implicitly.&nbsp;&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1384083028650</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>84.109.208.40</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-11-10 22:30:28</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Let's take a look at the Java solution using <a href="https://github.com/puniverse/quasar">Quasar</a>:&nbsp;</p>
<div class="line number2 index1 alt1" style="line-height: 14.296875px; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; white-space: pre !important;"><code class="scala spaces" style="border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: inherit !important;">&nbsp;&nbsp;</code><code class="scala plain" style="border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: inherit !important;">user = getUserById(id);</code></div>
<div class="line number3 index2 alt2" style="line-height: 14.296875px; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; white-space: pre !important;"><code class="scala spaces" style="border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: inherit !important;">&nbsp;&nbsp;</code><code class="scala plain" style="border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: inherit !important;">orders = getOrdersForUser(user.email);</code></div>
<div class="line number4 index3 alt1" style="line-height: 14.296875px; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; white-space: pre !important;"><code class="scala spaces" style="border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: inherit !important;">&nbsp;&nbsp;</code><code class="scala plain" style="border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: inherit !important;">products = getProductsForOrders(orders);</code></div>
<div class="line number5 index4 alt2" style="line-height: 14.296875px; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; white-space: pre !important;"><code class="scala spaces" style="border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: inherit !important;">&nbsp;&nbsp;</code><code class="scala plain" style="border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: inherit !important;">stock = getStockForProducts(products);</code><code class="scala plain" style="border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: inherit !important;"><br />
</code></div>
<div class="line number5 index4 alt2" style="line-height: 14.296875px; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; white-space: pre !important;">&nbsp;</div>
<p>&nbsp;Just as asynchronous and scalable as the Scala code, and far more readabl (you can even have loops).&nbsp;</p>
<div>&nbsp;</div>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Iteratees for imperative programmers</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/11/06/iteratees_for_imperative_programmers.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
When I first heard the word iteratee, I thought it was a joke.  Turns out, it wasn't a joke, in fact there are also enumerators (that's ok) and enumeratees (you're killing me).  If you're an imperative programmer, or rather a programmer who feels more comfortable writing imperative code than functional code, then you may be a little overwhelmed by all the introductions to iteratees out there, because they all assume that you think from a functional perspective.  Well I just learnt iteratees, and although I'm feeling more and more comfortable with functional programming every day, I still think like an imperative programmer at heart.  This made learning iteratees very difficult for me.  So while I'm still in the imperative mindset, I thought this a very good opportunity to explain iteratees from an imperative programmers perspective, taking no functional knowledge for granted.  If you're an imperative programmer who wants to learn iteratees, this is the blog post for you.  I'm going to specifically be looking at Play's Iteratee API, but the concepts learnt here will apply to all Iteratees in general.
</p>

<p>
So let's start off with explaining what iteratees, and their counterparts, are trying to achieve.  An iteratee is a method of reactively handling streams of data that is very easily composable.  By reactive, I mean non blocking, ie you react to data being available to read, and react to the opportunity to write data.  By composable, I mean you write simple iteratees that do one small thing well, then you use those as the building blocks to write iteratees that do bigger things, and you use those as the building blocks to write iteratees to do even bigger things, and so on.  At each stage, everything is simple and easy to reason about.
</p>

<h2>Reactive stream handling</h2>

<p>
If you're looking for information about iteratees, then I'm guessing you already know a bit about what reactive stream handling is.  Let's contrast it to synchronous IO code:
</p>

<pre class="prettyprint"><code class="language-scala">trait InputStream {
  def read(): Byte
}
</code></pre>

<p>
So this should be very familiar, if you want to read a byte, you call <tt>read</tt>.  If no byte is currently available to be read, that call will block, and your thread will wait until a byte is available.  With reactive streams, obviously it's the other way around, you pass a callback to the stream you want to receive data from, and it will call that when it's ready to give data to you.  So typically you might implement a trait that looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">trait InputStreamHandler {
  def onByte(byte: Byte)
}
</code></pre>

<p>
So before we go on, let's look at how the same thing would be achieved in a pure functional world.  At this point I don't want you to ask why we want to do things this way, you will see that later on, but if you know anything about functional programming, you know that everything tends to be immutable, and functions have no side effects.  The trait above has to have side effects, because unless you are ignoring the bytes passed to <tt>onByte</tt>, you must be changing your state (or something elses state) somehow in that function.  So, how do we handle data without changing our state?  The answer is the same way other immutable data structures work, we return a copy of ourselves, updated with the new state.  So if the <tt>InputStreamHandler</tt> were to be functional, it might look like this:
</p>

<pre class="prettyprint"><code class="language-scala">trait InputStreamHandler {
  def onByte(byte: Byte): InputStreamHandler
}
</code></pre>

<p>
And an example implementation of one, that reads input into a seq, might look like this:
</p>

<pre class="prettyprint"><code class="language-scala">class Consume(data: Seq[Byte]) extends InputStreamHandler {
  def onByte(byte: Byte) = new Consume(data :+ byte)
}
</code></pre>

<p>
So we now have imperative and functional traits that react to our input stream, and you might be thinking this is all there is to reactive streams.  If that's the case, you're wrong.  What if <i>we're</i> not ready to handle data when the <tt>onByte</tt> method is called?  If we're building structures in memory this will never be the case, but if for example we're storing them to a file or to a database as we receive the data, then this very likely will be the case.  So reactive streams are two way, it's not just you, the stream consumer that is reacting to input, the stream producer must react to you being ready for input.
</p>

<p>
Now this is possible to implement in an imperative world, though things do start looking much more functional.  We simply start using futures:
</p>

<pre class="prettyprint"><code class="language-scala">trait InputStreamHandler {
  def onByte(byte: Byte): Future[Unit]
}
</code></pre>

<p>
So, when the stream we are consuming has a byte for us, it calls <tt>onByte</tt>, and then attaches a callback to the future we return, to pass the next byte, when it's ready.  If you have a look at Netty's asynchronous channel APIs, you'll see it uses exactly this pattern.  We can also implement something similar for an immutable functional API:
</p>

<pre class="prettyprint"><code class="language-scala">trait InputStreamHandler {
  def onByte(byte: Byte): Future[InputStreamHandler]
}
</code></pre>

<p>
And so here we have a functional solution for reactive stream handling.  But it's not a very good one, for a start, there's no way for the handlers to communicate to the code that uses them that they don't want to receive any more input, or if they've encountered an error (exceptions are frowned upon in functional programming).  We could add things to handle this, but very soon our interface would become quite complex, hard to break up into small pieces that can be composed, etc.  I'm not going to justify this now, I think you'll see it later when I show you just how easy iteratees are to compose.
</p>

<p>
So, by this stage I hope you have understood two important points.  Firstly, reactive stream handling means twofold reacting, both your code has to react to the stream being ready, and the stream has to react to you being ready.  Secondly, when I say that we want a functional solution, I mean a solution where everything is immutable, and that is achieved by our stream handlers producing copies of themselves each time they receive/send data.  If you've understood those two important points, then now we can move on to introducing iteratees.
</p>

<h2>Iteratees</h2>

<p>
There are a few things that our interface hasn't yet addressed.  The first is, how does the stream communicate to us that it is finished, that is, that it has no more data for us?  To do this, instead of passing in a byte directly, we're going to abstract our byte to be something of type <tt>Input[Byte]</tt>, and that type can have three possible implementations, EOF, an element, or empty.  Let's not worry about why we need empty just yet, but assume for some reason we might want to pass empty.  So this is what <tt>Input</tt> looks like:
</p>

<pre class="prettyprint"><code class="language-scala">sealed trait Input[+E]

object Input {
  case object EOF extends Input[Nothing]
  case object Empty extends Input[Nothing]
  case class El[+E](e: E) extends Input[E]
}
</code></pre>

<p>
Updating our <tt>InputStreamHandler</tt>, we now get something that looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">trait InputStreamHandler[E] {
  def onInput(in: Input[E]): Future[InputStreamHandler[E]]
}
</code></pre>

<p>
Now updating our <tt>Consumer</tt> from before to handle this, it might look like this:
</p>

<pre class="prettyprint"><code class="language-scala">class Consume(data: IndexedSeq[Byte]) extends InputStreamHandler[Byte] {
  def onInput(in: Input[Byte]) = in match {
    case El(byte) =&gt; Future.successful(new Consume(data :+ byte))
    case _ =&gt; Future.successful(this)
  }
}
</code></pre>

<p>
You can see that when we get <tt>EOF</tt> or <tt>Empty</tt>, there's nothing for us to do to change our state, so we just return ourselves again.  If we were writing to another stream, we might, when we receive <tt>EOF</tt>, close that stream (or rather, send it an <tt>EOF</tt>).
</p>

<p>
The next thing we're going to do is make it easier for our handler to consume input immediately without having to create a future.  To do this, rather than passing the byte directly, we'll pass a function, that takes a function as a parameter, and that function will take the byte as a parameter.  So, our handler, when it's ready, will create a function to handle the byte, and then invoke the function that was passed to it, with that function.  We'll call the first function the <tt>cont</tt> function, which is short for continue, and means when you're ready to continue receiving input invoke me.   Too many functions?  Let's look at the code:
</p>

<pre class="prettyprint"><code class="language-scala">trait InputStreamHandler[E] {
  def onByte[B](cont: (Input[E] =&gt; InputStreamHandler[E]) =&gt; Future[B]): Future[B]
}
</code></pre>

<p>
Now where did this <tt>Future[B]</tt> come from?  <tt>B</tt> is just the mechanism that the stream uses to pass state back to itself.  As the handler, we don't have to worry about what it is, we just have to make sure that we eventually invoke the <tt>cont</tt> function, and eventually make sure that the <tt>B</tt> it returns makes it back to our caller.  And what does this look like in our <tt>Consume</tt> iteratee?  Let's have a look:
</p>

<pre class="prettyprint"><code class="language-scala">class Consume(data: IndexedSeq[Byte]) extends InputStreamHandler {
  def onByte(cont: (Input[Byte] =&gt; InputStreamHandler) =&gt; Future[B]) = cont {
    case Input.El(byte) =&gt; new Consume(data :+ byte)
    case _ =&gt; this
  }
}
</code></pre>

<p>
You can see in our simple case of being ready to handle input immediately, we just immediately invoke <tt>cont</tt>, we no longer need to worry about creating futures.  If we want to handle the input asynchronously, it is a little more complex, but we'll take a look at that later.
</p>

<p>
Now we have one final step in producing our iteratee API.  How does the handler communicate back to the stream that it is finished receiving data?  There could be two reasons for this, one is that it's finished receiving data.  For example, if our handler is a JSON parser, it might have reached the end of the object it was parsing, and so doesn't want to receive anymore.  The other reason is that it's encountered an error, for a JSON parser, this might be a syntax error, or if it's sending data through to another stream, it might be an IO error on that stream.
</p>

<p>
To allow our iteratee to communicate with the stream, we're going to create a trait that represents its state.  We'll call this trait <tt>Step</tt>, and the three states that the iteratee can be in will be <tt>Cont</tt>, <tt>Done</tt> and <tt>Error</tt>.  Our <tt>Cont</tt> state is going to contain our <tt>Input[Byte] =&gt; InputStreamHandler</tt> function, so that the stream can invoke it.  Our <tt>Done</tt> state will contain our result (in the case of <tt>Consume</tt>, a <tt>Seq[Byte]</tt>) and our <tt>Error</tt> state will contain an error message.
</p>

<p>
In addition to this, both our <tt>Done</tt> and <tt>Error</tt> states need to contain the left over input that they didn't consume.  This will be important for when we are composing iteratees together, so that once one iteratee has finished consuming input from a stream, the next can pick up where the first left off.  This is one reason why we need <tt>Input.Empty</tt>, because if we did consume all the input, then we need some way to indicate that.
</p>

<p>
So, here's our <tt>Step</tt> trait:
</p>

<pre class="prettyprint"><code class="language-scala">sealed trait Step[E, +A]

object Step {
  case class Done[+A, E](a: A, remaining: Input[E]) extends Step[E, A]
  case class Cont[E, +A](k: Input[E] => InputStreamHandler[E, A]) extends Step[E, A]
  case class Error[E](msg: String, input: Input[E]) extends Step[E, Nothing]
}
</code></pre>

<p>
The type parameter <tt>E</tt> is the type of input our iteratee wants to accept, and <tt>A</tt> is what it's producing.  So our handler trait now looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">trait InputStreamHandler[E, A] {
  def onInput[B](step: Step[E, A] =&gt; Future[B]): Future[B]
}
</code></pre>

<p>
And our consumer is implemented like this:
</p>

<pre class="prettyprint"><code class="language-scala">class Consume(data: Seq[Byte]) extends InputStreamHandler[Byte, Seq[Byte]] {
  def onInput(step: Step[Byte, Seq[Byte]] =&gt; Future[B]) = step(Step.Cont({
    case Input.El(byte) =&gt; new Consume(data :+ byte)
    case Input.EOF =&gt; new InputStreamHandler[Byte, Seq[Byte]] {
      def onInput(cont: Step[Byte, Seq[Byte]] =&gt; Future[B]) = step(Step.Done(data, Input.Empty))
    }       
    case Input.Empty =&gt; this
  }))
}
</code></pre>

<p>
One big difference here that you now notice is when we receive <tt>EOF</tt>, we actually pass <tt>Done</tt> into the step function, to say we are done consuming the input.
</p>

<p>
And so now we've built our iteratee interface.  Our naming isn't quite right though, so we'll rename the trait obviously to <tt>Iteratee</tt>, and we'll rename <tt>onInput</tt> to <tt>fold</tt>, since we are folding our state into one result.  And so now we get our interface:
</p>

<pre class="prettyprint"><code class="language-scala">trait Iteratee[E, +A] {
  def fold[B](folder: Step[E, A] =&gt; Future[B]): Future[B]
}
</code></pre>

<h2>Iteratees in practice</h2>

<p>
So far we've started with the requirements of a traditional imperative input stream, and described what an iteratee is in constrast to that.  But looking at the above code, you might think that using them is really difficult.  They seem like they are far more complex than they need to be, at least conceptually, to implement reactive streams.  Well, it turns out that although so far we've shown the basics of the iteratee interface, there is a lot more that a full iteratee API has to offer, and once we start understanding this, and using it, you will start to see how powerful, simple and useful iteratees are.
</p>

<p>
So remember how iteratees are immutable?  And remember how iteratees can be in one of three states, cont, done and error, and depending on which state it's in, it will pass its corresponding step class to the folder function?  Well, if an iteratee is immutable and it can be in one of three states, then it can only ever be in that state that it's in, and therefore it will only ever pass that corresponding step to the folder function.  If an iteratee is done, it's done, it doesn't matter how many times you call its <tt>fold</tt> function, it will never become cont or error, and its done value will never change, it will only ever pass the <tt>Done</tt> step to the folder function with the same <tt>A</tt> value and the same left over input.  Because of this, there is only one implementation of a done iteratee that we'll ever need, it looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">case class Done[E, A](a: A, e: Input[E] = Input.Empty) extends Iteratee[E, A] {
  def fold[B](folder: Step[E, A] =&gt; Future[B]): Future[B] = folder(Step.Done(a, e))
}
</code></pre>

<p>
This is the only done iteratee you'll ever need to indicate that you're done.  In the <tt>Consume</tt> iteratee above, when we reached <tt>EOF</tt>, we created a done iteratee using an anonymous inner class, we didn't need to do this, we could have just used the <tt>Done</tt> iteratee above.  The exact same thing holds for error iteratees:
</p>

<pre class="prettyprint"><code class="language-scala">case class Error[E](msg: String, e: Input[E]) extends Iteratee[E, Nothing] {
  def fold[B](folder: Step[E, Nothing] =&gt; Future[B]): Future[B] = folder(Step.Error(msg, e))
}
</code></pre>

<p>
You may be surprised to find out the exact same thing applies to cont iteratees too - a cont iteratee just passes a function the folder, and that function, because the iteratee is immutable, is never going to change.  So consequently, the following iteratee will usually be good enough for your requirements:
</p>

<pre class="prettyprint"><code class="language-scala">case class Cont[E, A](k: Input[E] =&gt; Iteratee[E, A]) extends Iteratee[E, A] {
  def fold[B](folder: Step[E, A] =&gt; Future[B]): Future[B] = folder(Step.Cont(k))
}
</code></pre>

<p>
So let's rewrite our consume iteratee to use these helper classes:
</p>

<pre class="prettyprint"><code class="language-scala">def consume(data: Array[Byte]): Iteratee[Byte, Array[Byte]] = Cont {
  case Input.El(byte) =&gt; consume(data :+ byte)
  case Input.EOF =&gt; Done(data)
  case Input.Empty =&gt; consume(data)
}
</code></pre>

<h2>A CSV parser</h2>

<p>
Now we're looking a lot simpler, our code is focussed on just handling the different types of input we could receive, and returning the correct result.  So let's start writing some different iteratees.  In fact, let's write an iteratee that parses a CSV file from a stream of characters.  Our CSV parser will support optionally quoting fields, and escaping quotes with a double quote.
</p>

<p>
Our first step will be to write the building blocks of our parser.  First up, we want to write something that skips some kinds of white space.  So let's write a general purpose drop while iteratee:
</p>

<pre class="prettyprint"><code class="language-scala">def dropWhile(p: Char =&gt; Boolean): Iteratee[Char, Unit] = Cont {
  case in @ Input.El(char) if !p(char) =&gt; Done(Unit, in)
  case in @ Input.EOF =&gt; Done(Unit, in)
  case _ =&gt; dropWhile(p)
}
</code></pre>

<p>
Since we're just dropping input, our result is actually <tt>Unit</tt>.  We return <tt>Done</tt> if the predicate doesn't match the current <tt>char</tt>, or if we reach EOF, and otherwise, we return ourselves again.  Note that when we are done, we include the input that was passed into us as the remaining data, because this is going to be needed to be consumed by the next iteratee.  Using this iteratee we can now write an iteratee that drops white space:
</p>

<pre class="prettyprint"><code class="language-scala">def dropSpaces = dropWhile(c =&gt; c == ' ' || c == '\t' || c == '\r')
</code></pre>

<p>
Next up, we're going to write a take while iteratee, it's going to be a mixture between our earlier consume iteratee, carrying state between each invocation, and the drop while iteratee:
</p>

<pre class="prettyprint"><code class="language-scala">def takeWhile(p: Char =&gt; Boolean, data: Seq[Char] = IndexedSeq[Char]()): Iteratee[Char, Seq[Char]] = Cont {
  case in @ Input.El(char) =&gt; if (p(char)) {
    takeWhile(p, data :+ char)
  } else {
    Done(data, in)
  }
  case in @ Input.EOF =&gt; Done(data, in)
  case _ =&gt; takeWhile(p, data)
}
</code></pre>

<p>
We also want to write a peek iteratee, that looks at what the next input is, without actually consuming it:
</p>

<pre class="prettyprint"><code class="language-scala">def peek: Iteratee[Char, Option[Char]] = Cont {
  case in @ Input.El(char) =&gt; Done(Some(char), in)
  case in @ Input.EOF =&gt; Done(None, in)
  case Input.Empty =&gt; peek
}
</code></pre>

<p>
Note that our peek iteratee must return an option, since if it encounters EOF, it can't return anything.
</p>

<p>
And finally, we want a take one iteratee:
</p>

<pre class="prettyprint"><code class="language-scala">def takeOne: Iteratee[Char, Option[Char]] = Cont {
  case in @ Input.El(char) =&gt; Done(Some(char))
  case in @ Input.EOF =&gt; Done(None, in)
  case Input.Empty =&gt; takeOne
}
</code></pre>

<p>
Using the take one iteratee, we'll build an expect iteratee, that mandates that a certain character must appear next otherwise it throws an error:
</p>

<pre class="prettyprint"><code class="language-scala">def expect(char: Char): Iteratee[Char, Unit] = takeOne.flatMap {
  case Some(c) if c == char =&gt; Done(Unit)
  case Some(c) =&gt; Error("Expected " + char + " but got " + c, Input.El(c))
  case None =&gt; Error("Premature end of input, expected: " + char, Input.EOF)
}
</code></pre>

<p>
Notice the use of <tt>flatMap</tt> here.  If you haven't come across it before, in the asynchronous world, <tt>flatMap</tt> basically means "and then".  It applies a function to the result of the iteratee, and returns a new iteratee.  In our case we're using it to convert the result to either a done iteratee, or an error iteratee, depending on whether the result is what we expected.  <tt>flatMap</tt> is one of the fundamental mechanisms that we'll be using to compose our iteratees together.
</p>

<p>
Now with our building blocks, we are ready to start building our CSV parser.  The first part of it that we'll write is an unquoted value parser.  This is very simple, we just want to take all characters that aren't a comma or new line, with one catch.  We want the result to be a String, not a <tt>Seq[Char]</tt> like <tt>takeWhile</tt> produces.  Let's see how we do that:
</p>

<pre class="prettyprint"><code class="language-scala">def unquoted = takeWhile(c =&gt; c != ',' &amp;&amp; c != '\n').map(v =&gt; v.mkString.trim)
</code></pre>

<p>
As you can see, we've used the <tt>map</tt> function to transform the end result from a sequence of characters into a String.  This is another key method on iteratees that you will find useful.
</p>

<p>
Our next task is to parse a quoted value.  Let's start with an implementation that doesn't take into account escaped quotes.  To parse a quoted value, we need to expect a quote, and then we need to take any value that is not a quote, and then we need to expect a quote.  Notice that during that sentence I said "and then" 2 times?  What method can we use to do an "and then"?  That's right, the <tt>flatMap</tt> method that I talked about before.  Let's see what our quoted value parser looks like:
</p>

<pre class="prettyprint"><code class="language-scala">def quoted = expect('"')
  .flatMap(_ =&gt; takeWhile(_ != '"'))
  .flatMap(value =&gt; expect('"')
    .map(_ =&gt; value.mkString))
</code></pre>

<p>
So now you can probably start to see the usefulness of <tt>flatMap</tt>.  In fact it is so useful, not just for iteratees, but many other things, that Scala has a special syntax for it, called for comprehensions.  Let's rewrite the above iteratee using that:
</p>

<pre class="prettyprint"><code class="language-scala">def quoted = for {
  _     &lt;- expect('"')
  value &lt;- takeWhile(_ != '"')
  _     &lt;- expect('"')
} yield value.mkString
</code></pre>

<p>
Now at this point I hope you are getting excited.  What does the above code look like?  It looks like ordinary imperative synchronous code.  Read this value, then read this value, then read this value.  Except it's not synchronous, and it's not imperative.  It's functional and asynchronous.  We've taken our building blocks, and composed them into a piece of very readable code that makes it completely clear exactly what we are doing.
</p>

<p>
Now in case you're not 100% sure about the above syntax, the values to the left of the <tt>&lt;-</tt> signs are the results of the iteratees to the right.  These are able to be used anywhere in any subsequent lines, including in the end <tt>yield</tt> statement.  Underscores are used to say we're not interested in the value, we're using this for the <tt>expect</tt> iteratee since that just returns Unit anyway.  The statement after the <tt>yield</tt> is a map function, which gives us the opportunity to take all the intermediate values and turn them into a single result.
</p>

<p>
So now that we understand that, let's rewrite our <tt>quoted</tt> iteratee to support escaped quotes.  After reading our quote, we want to peek at the next character.  If it's a quote, then we want to append the value we just read, plus a quote to our cumulated value, and recursively invoke the quoted iteratee again.  Otherwise, we've reached the end of the value.
</p>

<pre class="prettyprint"><code class="language-scala">def quoted(value: Seq[Char] = IndexedSeq[Char]()): Iteratee[Char, String] = for {
  _          &lt;- expect('"')
  maybeValue &lt;- takeWhile(_ != '"')
  _          &lt;- expect('"')
  nextChar   &lt;- peek
  value      &lt;- nextChar match {
    case Some('"') =&gt; quoted(value ++ maybeValue :+ '"')
    case _ =&gt; Done[Char, String]((value ++ maybeValue).mkString)
  }
} yield value
</code></pre>

<p>
Now we need to write an iteratee that can parse either a quoted or unquoted value.  We choose which one by peeking at the first character, and then accordingly returning the right iteratee.
</p>

<pre class="prettyprint"><code class="language-scala">def value = for {
  char  &lt;- peek
  value &lt;- char match {
    case Some('"') =&gt; quoted()
    case None =&gt; Error[Char]("Premature end of input, expected a value", Input.EOF)
    case _ =&gt; unquoted
  }
} yield value
</code></pre>

<p>
Let's now parse an entire line, reading until the end of line character.
</p>

<pre class="prettyprint"><code class="language-scala">def values(state: Seq[String] = IndexedSeq[String]()): Iteratee[Char, Seq[String]] = for {
  _        &lt;- dropSpaces
  value    &lt;- value
  _        &lt;- dropSpaces
  nextChar &lt;- takeOne
  values   &lt;- nextChar match {
    case Some('\n') | None =&gt; Done[Char, Seq[String]](state :+ value)
    case Some(',') =&gt; values(state :+ value)
    case Some(other) =&gt; Error("Expected comma, newline or EOF, but found " + other, Input.El(other))
  }
} yield values
</code></pre>

<h2>Enumeratees</h2>

<p>
Now, in a similar way to how we parse the values, we could also parse each line of a CSV file until we reach EOF.  But this time we're going to do something a little different.  We've seen how we can sequence iteratees using <tt>flatMap</tt>, but there are further possibilities for composing iteratees.  Another concept in iteratees is enumeratees.  Enumeratees adapt a stream to be consumed by an iteratee.  The simplest enumeratees simply map the input values of the stream to be something else.  So, for example, here's an enumeratee that converts a stream of strings to a stream of ints:
</p>

<pre class="prettyprint"><code class="language-scala">def toInt: Enumeratee[String,Int] = Enumeratee.map[String](_.toInt)
</code></pre>

<p>
One of the methods on <tt>Enumeratee</tt> is <tt>transform</tt>.  We can use this method to apply an enumeratee to an iteratee:
</p>

<pre class="prettyprint"><code class="language-scala">val someIteratee: Iteratee[Int, X] = ...
val adaptedIteratee: Iteratee[String, X] = toInt.transform(someIteratee)
</code></pre>

<p>
This method is also aliased to an operator, <tt>&amp;&gt;&gt;</tt>, and so this code below is equivalent to the code above:
</p>

<pre class="prettyprint"><code class="language-scala">val adaptedIteratee: Iteratee[String, X] = toInt &amp;&gt;&gt; someIteratee
</code></pre>

<p>
We can also make an enumeratee out of another iteratee, and this is exactly what we're going to do with our <tt>values</tt> iteratee.  The <tt>Enumeratee.grouped</tt> method takes an iteratee and applies it to the stream over and over, the result of each application being an input to feed into the the iteratee that will be transformed.  Let's have a look:
</p>

<pre class="prettyprint"><code class="language-scala">def csv = Enumeratee.grouped(values())
</code></pre>

<p>
Now let's get a little bit more creative with enumeratees.  Let's say that our CSV file is very big, so we don't want to load it into memory.  Each line is a series of 3 integer columns, and we want to sum each column.  So, let's define an enumeratee that converts each set of values to integers:
</p>

<pre class="prettyprint"><code class="language-scala">def toInts = Enumeratee.map[Seq[String]](_.map(_.toInt))
</code></pre>

<p>
And another enumeratee to convert the sequence to a 3-tuple:
</p>

<pre class="prettyprint"><code class="language-scala">def toThreeTuple = Enumeratee.map[Seq[Int]](s =&gt; (s(0), s(1), s(2)))
</code></pre>

<p>
And finally an iteratee to sum the them:
</p>

<pre class="prettyprint"><code class="language-scala">def sumThreeTuple(a: Int = 0, b: Int = 0, c: Int = 0): Iteratee[(Int, Int, Int), (Int, Int, Int)] = Cont {
  case Input.El((x, y, z)) =&gt; sumThreeTuple(a + x, b + y, c + z)
  case Input.Empty =&gt; sumThreeTuple(a, b, c)
  case in @ Input.EOF =&gt; Done((a, b, c), in)
}
</code></pre>

<p>
Now to put them all together.  There is another method on enumeratee called <tt>compose</tt>, which, you guessed it, let's you compose enumeratees.  This has an alias operator, <tt>&gt;&lt;&gt;</tt>.  Let's use it: 
</p>

<pre class="prettyprint"><code class="language-scala">val processCsvFile = csv &gt;&lt;&gt; toInts &gt;&lt;&gt; toThreeTuple &amp;&gt;&gt; sumThreeTuple()
</code></pre>

<h2>Enumerators</h2>

<p>
Finally, if an iteratee consumes a stream, what produces a stream?  The answer is an enumerator.  An enumerator can be applied to an iteratee using its <tt>apply</tt> method, which is also aliased to <tt>&gt;&gt;&gt;</tt>.  This will leave the iteratee in a cont state, ready to receive more input.  If however the enumerator contains the entirety of the stream, then the <tt>run</tt> method can be used instead which will send the iteratee an EOF once it's finished.  This is aliased to <tt>|&gt;&gt;&gt;</tt>.
</p>

<p>
The Play enumerator API makes it easy to create an enumerator by passing a sequence of inputs to the <tt>Enumerator</tt> companion objects <tt>apply</tt> method.  So, we can create an enumerator of characters using the following code:
</p>

<pre class="prettyprint"><code class="language-scala">val csvFile = Enumerator(
  """1,2,3
    |4,5,6""".stripMargin.toCharArray:_*)
</code></pre>

<p>
And we can feed this into our iteratee like so:
</p>

<pre class="prettyprint"><code class="language-scala">val result = csvFile |&gt;&gt;&gt; processCsvFile
</code></pre>

<p>
And our result in this case will be a future that is eventually redeemed with (5, 7, 9).
</p>

<h2>Conclusion</h2>

<p>
Well, it's been a long journey, but hopefully if you're an imperative programmer, you not only understand iteratees, you understand the reasoning behind their design, and how easily they compose.  I also hope you have a better understanding of both functional and asynchronous programming in general.  The functional mindset is quite different to the imperative mindset, and I'm still getting my head around it, but particularly after seeing how nice and simple iteratees can be to work with (once you understand them), I'm becoming convinced that functional programming is the way to go.
</p>

<p>
If you are interested in downloading the code from this blog post, or if you want to see a more complex JSON parsing iteratee/enumeratee, checkout <a href="https://github.com/jroper/json-iteratee-example">this GitHub project</a>, which has a few examples, including parsing byte/character streams in array chunks, rather than one at a time.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-11-06-iteratees_for_imperative_programmers</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-11-06 09:28:48</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352281990890</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>basetta</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>patrick@pupazzo.org</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://basetta.pupazzo.org</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>86.59.9.170</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-07 20:53:10</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Nice intro. Thx</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352574096637</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Dr. Shishir Urdhwareshe</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>shishironline@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>122.175.162.120</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-11 06:01:36</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>real good. thnx&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352879314763</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Frisian</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>no.no@no.no</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://no-url.no</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>194.31.225.222</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-14 18:48:34</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Exceptions may be frowned upon in Scala, but actually reduce complexity here. Here's my Java code, taking advantage of the idioms established by java.util.concurrent:</p>
<p>public class FileWalker {<br />
<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public interface InputStreamHandler {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; void onByte(int b) throws CancellationException, Exception;<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; private static void handleByte(int b, InputStreamHandler handler) throws ExecutionException {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; handler.onByte(b);<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } catch (CancellationException ce) {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throw ce; // handler wants us to stop<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } catch(Exception e) {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throw new ExecutionException(e); // something bad happened<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public static void walkFile(InputStream inputStream, InputStreamHandler handler) throws CancellationException, ExecutionException, IOException {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; int b;<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; while((b = inputStream.read()) != -1) {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; handleByte(b, handler);<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; handleByte(-1, handler); // tell handler about EOF<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; catch (CancellationException ce) {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throw ce; // handler asked to stop<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; catch (ExecutionException ee) {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throw ee; // handler had a problem<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; finally {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; inputStream.close();<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
}<br />
&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1353154448930</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Ivano</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>84.253.158.208</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-17 23:14:08</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi James, really great article.</p>
<p>I just have some trouble following your definitions of <em>quote(...) </em>and <em>value</em>&nbsp;function for Iteratees since you've reused the same name as some of the input parameters.</p>
<p>Could you make it more clear removing some name cluttering? It would be very nice of you, thanks</p>
<p>Good job!</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1355302411870</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>59.164.101.158</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-12-12 19:53:31</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Excellent post! Had been trying my head around them without much headway - finally saw the light after reading this post. Thanks James!</p>
<p>&nbsp;</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1360357799908</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>65.87.105.7</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-02-09 08:09:59</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;it the github code gone ?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1355302411087</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1359321605383</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Nilanjan</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>69.135.173.46</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-01-28 08:20:05</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Great write up. &nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1361874535498</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>bchapuis</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>bchapuis@agimem.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.agimem.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>84.226.136.204</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-02-26 21:28:55</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Great post. The link to the github repository is broken. Did you move your examples somewhere else? Thanks in advance.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1367320763978</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>46.173.36.5</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-04-30 21:19:23</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>James, </p>
<p>The blog is dated few motns ago, so I'm not sure where to feedback. As a resutl have decided to use the Google group, and to place the ref here: https://groups.google.com/forum/#!folder/last/play-framework/2DJ2hk5uV6s</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1368520595811</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Miroslav</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>miroslavmatejovsky@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>153.100.131.12</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-05-14 18:36:35</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hello,</p>
<p>very nice article, but I have problem with flatMap. As I understand in this example we are using</p>
<p>sealed trait Iteratee[E, +A] {<br />
&nbsp; def fold[B](folder: Step[E, A] =&gt; Future[B]): Future[B]<br />
}</p>
<p>but this Iteratee has no flatMap method. Shouldn't be flatMap implemented as a part of this tutorial?</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1381754575400</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>pishen</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>140.112.218.108</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-10-14 23:42:55</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Excellent post! The most clear explanation I have ever found.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Comments complement code</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2012/11/08/comments_complement_code.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
Today I read this quote:
</p>

<blockquote>
Good code is its own best documentation. As you’re about to add a comment, ask yourself, ‘How can I improve the code so that this comment isn’t needed?’
</blockquote>

<p>
I just want to say, it's a load of rubbish.  Take a look at the following code:
</p>

<pre class="prettyprint"><code class="language-scala">def toCharArray(
     decoder: CharsetDecoder = Charset.forName("UTF-8").newDecoder()
  ): Enumeratee[Array[Byte], Array[Char]] = new Enumeratee[Array[Byte],Array[Char]] {

  def step[A](inner: Iteratee[Array[Char], A], partialChar: Option[Array[Byte]] = None)(in: Input[Array[Byte]]): 
      Iteratee[Array[Byte], Iteratee[Array[Char], A]] = {
    in match {
      case EOF =&gt; partialChar.map(_ =&gt; Error[Array[Byte]]("EOF encountered mid character", EOF))
        .getOrElse(Done[Array[Byte],Iteratee[Array[Char],A]](inner, EOF))

      case Empty =&gt; Cont(step(inner, partialChar))

      case El(data) =&gt; {
        val charBuffer = CharBuffer.allocate(data.length + 1)
        val byteBuffer = partialChar.map({ leftOver =&gt;
          val buffer = ByteBuffer.allocate(leftOver.length + data.length)
          buffer.mark()
          buffer.put(leftOver).put(data)
          buffer.reset()
          buffer
        }).getOrElse(ByteBuffer.wrap(data))

        decoder.decode(byteBuffer, charBuffer, false)

        val leftOver = if (byteBuffer.limit() &gt; byteBuffer.position()) {
          Some(byteBuffer.array().drop(byteBuffer.position()))
        } else None

        val decoded = charBuffer.array().take(charBuffer.position())
        val input = if (decoded.length == 0) Empty else El(decoded)

        inner.pureFlatFold {
          case Step.Cont(k) =&gt; Cont(step(k(input), leftOver))
          case _ =&gt; Done(inner, Input.Empty)
        }
      }
    }
  }

  def applyOn[A](inner: Iteratee[Array[Char], A]) = Cont(step(inner))
}
</code></pre>

<p>
If you know iteratees and you know Scala, it's pretty obvious what this does.  It converts a stream of byte arrays into a stream of char arrays, taking into the consideration the possibility that one character may be split across multiple byte arrays.  Structurally it is purely functional, however the actual decoding is not, it uses the high performance Java <tt>CharBuffer</tt> and <tt>ByteBuffer</tt> classes to do the decoding, which are mutable, and arguably this is necessary since this enumeratee is a place where performance matters.  I wrote it, and in my opinion it's not badly written, though if you can see anything that could be improved, please let me know.
</p>

<p>
So, tell me, on line 14, why do I allocate a char buffer of the incoming byte array length plus one?  What is the reason for the plus one?  When I first wrote it, I didn't have the plus one there, I didn't think it was needed.  You see, when converting an array of bytes to an array of UTF-16 Java characters, at most, 8 bytes will become 8 characters, right?  8 bytes could become 4 characters, if those characters were multi byte characters, the number of chars needed might be less than the number of bytes being decoded, but it can never be more, right?  One byte can't become multiple UTF-16 chars, so why would I ever need 9 characters for 8 bytes?
</p>

<p>
Now maybe you might criticise my code because the +1 is actually a magic number, and if I gave it a name, then that would explain everything.  Well, let's give it a name, and reasonable a name (I could give it a two hundred character long name and that might explain everything but you can hardly call two hundred character long variable names good code.  Well, maybe you can in Java, but not in Scala).  So I'll create a <tt>val PotentialMultiCharOffset = 1</tt>.  Does that help you at all?  Do you know what it's for?  Why is it 1?  Why is it added, why don't I multiply by 2?  If you do know the reason behind it, then hats off to you, you are a genius.  But for the rest of us, we don't know.  It as only after I wrote comprehensive unit tests for the code that I found the bug (I've heard other people say that unit tests are not necessary for functional code, another fallacy).
</p>

<p>
Let me show you the comment that is above that line of code:
</p>

<pre class="prettyprint"><code class="language-scala">// The +1 here is very important, it is there for the case when there are
// 3 bytes of a 4 byte character in the partialChar array, and so this data
// should contain the final byte, but that one byte will become 2 Chars.
val charBuffer = CharBuffer.allocate(data.length + 1)
</code></pre>

<p>
Understand it now?  Was there any way that I could have written the code that would have explained that?  Was there any variable name that I could have given it that would have explained it better than that comment?  No, it just needed a simple comment explaining its purpose.  Without the comment, you'd be sitting there wondering why on earth I had added 1, you might have even thought "this is allocating more memory than needed, I'll just optimise this" and you would have injected a bug.  In this case, a comment is aptly suited to making the code understandable.  The comment complements the code.  It is necessary and the best way of describing it.
</p>

<p>
And the fact is that we come across things every day where some really obscure edge case means we have to do some otherwise obscure behaviour.  Maybe in a world of higher order logic this isn't the case, but we work in a world of far less than perfect protocols with edge cases that are impossible to memorise, where optimising an equals comparison to return early when you encounter the first character that isn't equal is a security vulnerability, where bugs in other software that our software has to interface to means we have to do counter intuitive things to work around their issues, and where some things are just plain hard to get your heard around, and sometimes a little plain English (or whatever language you speak) just does that little bit to helping you or the next developer make sense of it all.
</p>

<p>
Comments complement code.  Good code does not negate the need of comments.  Good code includes comments where comments are needed.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2012-11-08-comments_complement_code</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2012-11-08 23:37:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352410816350</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Colin Goudie</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>Colin.Goudie@gmail.com </wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>150.101.119.185</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-09 08:40:16</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;I think you've demonstrated that good code doesn't need comments, and comments are exceptions rather thana rule. So a comment sticks out and that means can be used to highlight exactly what you need in your code above.&nbsp;</p>
<p>However, if everyline in your code was commented then the imported comments are lost in the noise.</p>
<p>so I would still stand by the quote right at the beginning. Good code doesn't require comments. Nasty or exceptional code should</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352419711745</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.206.178.211</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-09 11:08:31</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Well maybe my argument is that exceptional code isn't so exceptional.</p>
<p>Today I wrote a cache that decreased the time certain types of tests in Play framework took to run by 90%. &nbsp;I used a SoftReference for the cache, and I put a comment there explaining why the reference couldn't be a hard reference, and why a weak reference was also unsuitable. &nbsp;Yesterday I wrote a hack for shutting down ebean, because it didn't provide any mechanism to do so for the JVM terminated and was leaking resources. &nbsp;All the code in my hack was completely arbitrary, the only way to know why it was doing what it was doing was to read and fully understand the ebean code and its flow, why should I make the reader do that? &nbsp;So I wrote heaps of comments to explain so the reader didn't have to do that. &nbsp;The day before I upgraded Play to Netty 3.5.9, and there was a change where to set a session cookie, you used to have to set the max age to -1, now you have to set it to Integer.MIN_VALUE. &nbsp;I added a comment to say that Netty semantics for maxAge are that session cookies are to use Integer.MIN_VALUE, so the reader didn't have to dig into the Netty source code to find out why this was.</p>
<p>You can hardly call something that you need to use every day an exception.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352410816350</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352419942431</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Colin Goudie</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>colin.goudie@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>150.101.119.185</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-09 11:12:22</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;I guess I wouldn't measure exception by frequency in a day, rather frequency as compared to the bulk of other code. I just couldn't help but think your original example is a bit of a red herring as it's NOT what most people mean when they say commented code isn't needed. e.g. the examples in Clean Code book.&nbsp;</p>
<p>Or another way maybe would be to ask, would it be easy for someone to adjust this code WITHOUT adjusting the comment, and if so then the comments ARE BAD. (or a lazy programmer?? But who isn't). When comments become like novels they end up telling lies over time and then you have to revert to reading the code anyway.&nbsp;</p>
<p>There are no black/white answers here though so they should be judged on a case by case basis, I would just say that for the bulk of code written everyday, most of those cases can be written without needing to add comments.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352419711745</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352423822455</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Graham Lea</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>graham@grahamlea.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.grahamlea.com/</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>115.70.44.79</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-09 12:17:02</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Looking at the three examples you give above, and the one in your code, I would have encoded each of these using a test case, not a comment.</p>
<p>Comments don't stop the next guy from deleting the +1, or from completely replacing the code and comment with something they think works better but which also breaks. Executable tests would stop them from doing the wrong thing or prove to them their refactor works.</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352419711745</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352426574475</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.206.178.211</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-09 13:02:54</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I absolutely agree that in the above example, a test is absolutely necessary. &nbsp;But tests don't help readability of code, you shouldn't have to delete the +1 to find out what it's there for.</p>
<p>In the case where I used a SoftReference, this is basically next to impossible to test, since triggering soft references to be garbage collected is almost impossible to do without accidentally triggering an OOME, and when you do trigger an OOME, there is no guarantee that it will be your code that gets it, it could be another thread in your tests, so you absolutely do not want to do that.</p>
<p>The ebean clean up, you can test for it, but the tests mean nothing, they can only test that it does what I thought it should do, not that they are doing the right thing. &nbsp;They are also a pain to write and maintain, people are more likely to remove them because they don't understand them then try and maintain them, and so they don't achieve anything. &nbsp;Comments are much easier to maintain in this case.</p>
<p>Another example where I've put comments is above an equals implementation that compares two strings in constant time, not breaking early if a wrong character is found. &nbsp;This is impossible to test for, as there is no way to guarantee that a context switch or garbage collection won't happen during the test. &nbsp;And why is the equals comparison implemented in this way? &nbsp;Because if it doesn't run in constant time, it's vulnerable to timing attacks. &nbsp;Another place where a comment is the only sensible thing to use.</p>
<p>Also, tests can be deleted too. &nbsp;If you delete or ignore arbitrary comments, that's just as bad as deleting tests.</p>
<p>At the end of the day, it's use the right tool for the job. &nbsp;If tests are the right tool, go for it. &nbsp;But sometimes comments can go a long way to helping readability, and can describe things that tests can't.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352423822455</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352439689560</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Graham Lea</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>graham@grahamlea.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.grahamlea.com/</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>115.70.44.79</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-09 16:41:29</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I think a comment on the +1 is good, though I would make it briefer: &quot;// +1 in case partialChar adds an extra character&quot; at the end of the line and leave it to the reader to inspect the relevant tests if they need to know more.</p>
<p>It's fairly trivial to write code to clear SoftRefereces in a test. I concede the OOME&nbsp;may, in the rare case, not be thrown where you want it, but there are ways to deal with that.</p>
<p>I think referring to comments as a &quot;tool&quot; is misleading. Comments prove nothing and provide no feedback if they go out of date - they only state your hypothesis about the problem and how to solve it, which if you haven't got a test could be wrong. In your SoftReferences case, you've obviously used them because you perceive a problem and think the SoftReference avoids it - and you're <em>probably</em> right - but without a test you haven't proved either that the problem exists (failing test)&nbsp;or that your solution fixes it (passing test). You're just relying on your own thoughts on the day and your comment just says to other people &quot;Trust me, I kno</p>
<p>In brief: Comments are a terrible substitute for tests. If you haven't proved it's broken, why are you writing code to fix it?&nbsp; :D</p>
<p>[Disclaimer: I've used comments as a substitue for tests perhaps three times in the last 6 years. In retrospect, I did it because I was lazy and wish I hadn't.]</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352426574475</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352445667105</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>203.206.178.211</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-09 18:21:07</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Right. &nbsp;Should I remove every volatile keyword from my code, just because I've never proved that there will be memory visibility issues if it's not there?</p>
<p>And I'd argue that an OOME, in the common case, will not be thrown where I want it. &nbsp;Most testing frameworks run tests in parallel these days, it's russian roullette as to which threads (yes multiple could, or rather will) get an OOME if you try and trigger one in a test.</p>
<p>I'm not trying to say comments should substitute tests. &nbsp;Some things are impossible to test, some things are impractical to test, and still other things are useless to test because they prove nothing other than that the code does what it does. &nbsp;And my reason for making this point is that you said that comments should be replaced with tests. &nbsp;If you can't test it, you can't replace a comment with a test.</p>
<p>And still, the tests don't help me read the code. &nbsp;I read hundreds of lines of code of other open source libraries every day. &nbsp;I'm not reading their tests, I don't even have their tests at hand. &nbsp;I'm understanding how they work so I can understand how my code should interact with them. &nbsp;The tests of those frameworks do nothing for me. &nbsp;They can't help me understand why the framework is doing what it's doing. &nbsp;But comments do. &nbsp;My job is made far easier if the source code is well commented. &nbsp;I can skip over large chunks of code just by reading one comment.</p>
<p>And the argument that comments go out of date is ridiculous. &nbsp;All documentation goes out of date if it's not kept updated. &nbsp;Good developers don't let that happen. &nbsp;Just like good developers make sure they write tests for their code. &nbsp;It's called discipline.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352439689056</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352458335581</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Graham Lea</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>graham@grahamlea.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.grahamlea.com/</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>115.70.44.79</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-09 21:52:15</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&gt; Should I remove every volatile keyword from my code, just because I've  never proved that there will be memory visibility issues if it's not  there?</p>
<p>&gt; Just like good developers make sure they write tests for their code. &nbsp;It's called discipline.</p>
<p>Where I work, if I typed 'volatile' in front of a field, I would expect my pair to ask, &quot;Why did you make that volatile?&quot; and no matter how good an explanation I gave, I would expect them to then ask &quot;Can we write a test to prove it?&quot; And we'd do our darndest to write a failing test. Yep, some tests are really, really hard to write. But that's what we do: we write tested code.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352445667105</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352449629988</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Colin Goudie</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>150.101.119.185</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-09 19:27:09</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>The argument that comments go out of date isn't ridiculous at all, it's just a fact of life. The average programmer... is average. Another fact. So an industry is var better off building up practises that mean that the knowlege is in ONE place only rather than spread out over 3 (code, comments, doc). Of course, this doesn't mean we don't have ANY comments or ANY doc but for the vast majority of code this should be the case.</p>
<p>And again, remember the idea that code should be self commenting, is a practise that lets you ask a question first. e.g. With that code I wrote, I just added a comment. Can extracting a method or a condition to a method remove the need for a comment? yes, then remove the comment. That is what the practise is about, not removing 100% of comments</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352985935768</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>MK</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>kaymanmesut@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>193.254.229.151</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-16 00:25:35</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>You are right about that comments complement code. But the quote is not rubbish. It&nbsp;encourages developers to write good, readable code.</p>
<p>Good blog, keep up the good work :)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1352986168288</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.168.22</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-16 00:29:28</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>You might be right, I may have been a little over zealous in my criticism there :) &nbsp;But I think people often use that quote as an excuse for having no comments, and this is what I object to.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1352985935768</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1353453751845</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Ed Dawson</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>edwin.dawson@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>125.7.121.253</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2012-11-21 10:22:31</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Great post. There is definitely a case for &quot;always providing the minimul level of human communications&quot; to make something useful to others. You, as the originator, should save your users time by providing that material.&nbsp;</p>
<p>The old RTFM is being subverted by WTFM &quot;Write The Frigging Manual&quot;, used by developers, especially authors of libraries or popular APIs.&nbsp;</p>
<p>http://www.floopsy.com/post/32453280184/w-t-f-m-write-the-freaking-manual</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1361596468595</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>nospam@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>74.101.6.124</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-02-23 16:14:28</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I totally agree with you and people that say that test should document that are living on another planet.</p>
<p>When one use a thirdparty dependency or even an internal library, one relies on code that supposedly works and where documentation is available on top of the class as well as in the code... When debugging code and stepping down in a library's code, one certainly does not have the test available at end and decipher them. Generally unit tests and functional tests are fairly ugly with time by an order of magnitude compared to the code itself.</p>
<p>Documentation in the test is additional to the one in the code, sometimes expressing a different thing, the documentation in code is there to express some intents for the reader.</p>
<p>It is even more important in Scala. Scala purists seems to often bring the excuse that because it is functional the logic is more apparent. I call BS. Scala code is an order of magnitude less readable due to the complexity of the type system as well as the tendency to chain and compose calls.</p>
<p>
<div>&lt;code class=&quot;scala plain&quot; style=&quot;border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: auto !important;&quot;&gt;partialChar.map(&lt;/code&gt;&lt;code class=&quot;scala keyword&quot; style=&quot;border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-weight: bold !important; font-size: 1em !important; min-height: auto !important; color: rgb(0, 102, 153) !important;&quot;&gt;_&lt;/code&gt; &lt;code class=&quot;scala keyword&quot; style=&quot;border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-weight: bold !important; font-size: 1em !important; min-height: auto !important; color: rgb(0, 102, 153) !important;&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;scala plain&quot; style=&quot;border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: auto !important;&quot;&gt;&gt; Error[Array[Byte]](&lt;/code&gt;&lt;code class=&quot;scala string&quot; style=&quot;border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: auto !important; color: blue !important;&quot;&gt;&quot;EOF encountered mid character&quot;&lt;/code&gt;&lt;code class=&quot;scala plain&quot; style=&quot;border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: auto !important;&quot;&gt;, EOF))&lt;/code&gt;</div>
<div>&lt;code class=&quot;scala spaces&quot; style=&quot;border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: auto !important;&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/code&gt;&lt;code class=&quot;scala plain&quot; style=&quot;border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; font-size: 1em !important; min-height: auto !important;&quot;&gt;.getOrElse(Done[Array[Byte],Iteratee[Array[Char],A]](inner, EOF))&lt;/code&gt;</div>
</p>
<p>is certainly a mouthful in term of types.</p>
<p>As for</p>
<p><span>Cont(step(inner, partialChar))</span></p>
<p>it is hard to know what is the intent of it...</p>
<p>Then the case El(data) is many lines long...and it is hard to figure the intent... if it were in Java there would be an effort to factor that at least in one or 2 methods of its own as it would be a few lines longer, here as I mentioned above we take the excuse that Scala allows to write more concise code and we pretend it is more readable, while nothing is further from the truth... just like a diarrhea of documentation does not make documentation, concise code dot not make readable code.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1365478069550</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>168.140.181.4</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-04-09 13:27:49</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Well, got to this blog cause I wanted to see Peelbe at work ... but this blog entry is really good to see. &nbsp; First heard this &nbsp;'code should be self documenting' BS &nbsp;from Thougthworks consutant. &nbsp;</p>
<p>The fact that even a single line of Java (and most more recent languages are far worse), &nbsp;can take a massive effort to unravel doesn't seem to occur to many. &nbsp; I don't know how often I've seen dudes sweat on a chunk of code, during my unfortunate 'pair programming' experience,that could of been explaned with a simple comment ... then rage against leaving a comment themselves. &nbsp;</p>
<p>Another little point .. you can't use code to document what's NOT there. &nbsp;I regulaly notice this; you find yourself in a situation where to DON'T need to perform an action, yet it may not be ovbious why that is the case ... how else other thatn a comment are you going to make that clear?</p>
<p>Keep up the good work&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Understanding the Play Filter API</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2013/02/16/understanding_the_play_filter_api.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
With Play 2.1 hot off the press, there have been a lot of people asking about the new Play filter API.  In actual fact, the API is incredibly simple:
</p>

<pre class="prettyprint"><code class="language-scala">trait EssentialFilter {
  def apply(next: EssentialAction): EssentialAction
}
</code></pre>

<p>
Essentially, a filter is just a function that takes an action and returns another action.  The usual thing that would be done by the filter is wrap the action, invoking it as a delegate.  To then add a filter to your application, you just add it to your Global <code>doFilter</code> method.  We provide a helper class to do that for you:
</p>

<pre class="prettyprint"><code class="language-scala">object Global extends WithFilters(MyFilter) {
  ...
}
</code></pre>

<p>
Easy right?  Wrap the action, register it in global.  Well, it is easy, but only if you understand Plays architecture.  This is very important, because once you understand Play's architecture, you will be able to do far more with Play.  We have some documentation <a href="http://www.playframework.com/documentation/2.1.0/HttpApi">here</a> that explains Plays architecture at a high level.  In this blog post, I'm going to explain Play's architecture in the context of filters, with code snippets and use cases along the way.
</p>

<h2>A short introduction to Plays architecture</h2>

<p>
I don't need to go in depth here because I've already provided a link to our architecture documentation, but in short Play's architecture matches the flow of an HTTP request very well.
</p>

<p>
The first thing that arrives when an HTTP request is made is the request header.  So an action in Play therefore must be a function that accepts a request header.
</p>

<p>
What happens next in an HTTP request?  The body is received.  So, the function that receives the request must return something that consumes the body.  This is an iteratee, which is a reactive stream handler, that eventually produces a single result after consuming the stream.  You don't necessarily need to understand the details about how iteratees work in order to understand filters, the important thing to understand is that iteratees eventually produce a result that you can map, just like a future, using their <code>map</code> function.  For details on writing iteratees, read <a href="http://jazzy.id.au/default/2012/11/06/iteratees_for_imperative_programmers.html">my blog post</a>.
</p>

<p>
The next thing that happens in an HTTP request is that the http response must be sent.  So what is the result that of the iteratee?  An HTTP response.  And an HTTP response is a set of response headers, followed by a response body.  The response body is an enumerator, which is a reactive stream producer.
</p>

<p>
All of this is captured in Plays <code>EssentialAction</code> trait:
</p>

<pre class="prettyprint"><code class="language-scala">trait EssentialAction extends (RequestHeader =&gt; Iteratee[Array[Byte], Result])
</code></pre>

<p>
This reads that an essential action is a function that takes a request header and returns an iteratee that consumes the byte array body chunks and eventually produces a result.
</p>

<h2>The simpler way</h2>

<p>
Before I go on, I'd like to point out that Play provides a helper trait called <code>Filter</code> that makes writing filters easier than when using <code>EssentialFilter</code>.  This is similar to the <code>Action</code> trait, in that <code>Action</code> simplifies writing <code>EssentialAction</code>'s by not needing to worry about iteratees and how the body is parsed, rather you just provide a function that takes a request with a parsed body, and return a result.  The <code>Filter</code> trait simplifies things in a similar way, however I'm going to leave talking about that until the end, because I think it is better to understand how filters work from the bottom up before you start using the helper class.
</p>

<h2>The noop filter</h2>

<p>
To demonstrate what a filter looks like, the first thing I will show is a noop filter:
</p>

<pre class="prettyprint"><code class="language-scala">class NoopFilter extends EssentialFilter {
  def apply(next: EssentialAction) = new EssentialAction {
    def apply(request: RequestHeader) = {
      next(request)
    }
  }
}
</code></pre>

<p>
Each time the filter is executed, we create a new <code>EssentialAction</code> that wraps it.  Since <code>EssentialAction</code> is just a function, we can just invoke it, passing the passed in request.  So the above is our basic pattern for implementing an <code>EssentialFilter</code>.
</p>

<h2>Handling the request header</h2>

<p>
Let's say we want to look at the request header, and conditionally invoke the wrapped action based on what we inspect.  An example of a filter that would do that might be a blanket security policy for the <code>/admin</code> area of your website.  This might look like this:
</p>

<pre class="prettyprint"><code class="language-scala">class AdminFilter extends EssentialFilter {
  def apply(next: EssentialAction) = new EssentialAction {
    def apply(request: RequestHeader) = {
      if (request.path.startsWith("/admin") && request.session.get("user").isEmpty) {
        Iteratee.ignore[Array[Byte]].map(_ => Results.Forbidden())
      } else {
        next(request)
      }
    }
  }
}
</code></pre>

<p>
You can see here that since we are intercepting the action before the body has been parsed, we still need to provide a body parser when we block the action.  In this case we are returning a body parser that will simply ignore the whole body, and mapping it to have a result of forbidden.
</p>

<h2>Handling the body</h2>

<p>
In some cases, you might want to do something with the body in your filter.  In some cases, you might want to parse the body.  If this is the case, consider using <a href="http://www.playframework.com/documentation/2.1.0/ScalaActionsComposition">action composition</a> instead, because that makes it possible to hook in to the action processing after the action has parsed the body.  If you want to parse the body at the filter level, then you'll have to buffer it, parse it, and then stream it again for the action to parse again.
</p>

<p>
However there are some things that can be easily be done at the filter level.  One example is gzip decompression.  Play framework already provides gzip decompression out of the box, but if it didn't this is what it might look like (using the gunzip enumeratee from my <a href="https://github.com/jroper/play-iteratees-extras">play extra iteratees project</a>):
</p>

<pre class="prettyprint"><code class="language-scala">class GunzipFilter extends EssentialFilter {
  def apply(next: EssentialAction) = new EssentialAction {
    def apply(request: RequestHeader) = {
      if (request.headers.get("Content-Encoding").exists(_ == "gzip")) {
        Gzip.gunzip() &amp;&gt;&gt; next(request)
      } else {
        next(request)
      }
    }
  }
}
</code></pre>

<p>Here using iteratee composition we are wrapping the body parser iteratee in a gunzip enumeratee.</p>

<h2>Handling the response headers</h2>

<p>
When you're filtering you will often want to do something to the response that is being sent.  If you just want to add a header, or add something to the session, or do any write operation on the response, without actually reading it, then this is quite simple.  For example, let's say you wanted to add a custom header to every response:
</p>

<pre class="prettyprint"><code class="language-scala">class SosFilter extends EssentialFilter {
  def apply(next: EssentialAction) = new EssentialAction {
    def apply(request: RequestHeader) = {
      next(request).map(result =&gt; 
        result.withHeaders("X-Sos-Message" -&gt; "I'm trapped inside Play Framework please send help"))
    }
  }
}
</code></pre>

<p>
Using the <code>map</code> function on the iteratee that handles the body, we are given access to the result produced by the action, which we can then modify as demonstrated.
</p>

<p>
If however you want to read the result, then you'll need to unwrap it.  Play results are either <code>AsyncResult</code> or <code>PlainResult</code>.  An <code>AsyncResult</code> is a <code>Result</code> that contains a <code>Future[Result]</code>.  It has a <code>transform</code> method that allows the eventual <code>PlainResult</code> to be transformed.  A <code>PlainResult</code> has a header and a body.
</p>

<p>
So let's say you want to add a timestamp to every newly created session to record when it was created.  This could be done like this:
</p>

<pre class="prettyprint"><code class="language-scala">class SessionTimestampFilter extends EssentialFilter {
  def apply(next: EssentialAction) = new EssentialAction {
    def apply(request: RequestHeader) = {

      def addTimestamp(result: PlainResult): Result = {
        val session = Session.decodeFromCookie(Cookies(result.header.headers.get(HeaderNames.COOKIE)).get(Session.COOKIE_NAME))
        if (!session.isEmpty) {
          result.withSession(session + ("timestamp" -&gt; System.currentTimeMillis.toString))
        } else {
          result
        }
      }

      next(request).map {
        case plain: PlainResult =&gt; addTimestamp(plain)
        case async: AsyncResult =&gt; async.transform(addTimestamp)
      }
    }
  }
}
</code></pre>

<h2>Handling the response body</h2>

<p>
The final thing you might want to do is transform the response body.  <code>PlainResult</code> has two implementations, <code>SimpleResult</code>, which is for bodies with no transfer encoding, and <code>ChunkedResult</code>, for bodies with chunked transfer encoding.  <code>SimpleResult</code> contains an enumerator, and <code>ChunkedResult</code> contains a function that accepts an iteratee to write the result out to.
</p>

<p>
An example of something you might want to do is implement a gzip filter.  A very naive implementation (as in, do not use this, instead use my complete implementation from my <a href="https://github.com/jroper/play-iteratees-extras">play extra iteratees project</a>) might look like this:
</p>

<pre class="prettyprint"><code class="language-scala">class GzipFilter extends EssentialFilter {
  def apply(next: EssentialAction) = new EssentialAction {
    def apply(request: RequestHeader) = {

      def gzipResult(result: PlainResult): Result = result match {
        case simple @ SimpleResult(header, content) =&gt; SimpleResult(header.copy(
          headers = (header.headers - "Content-Length") + ("Content-Encoding" -&gt; "gzip")
        ), content &amp;&gt; Enumeratee.map(a =&gt; simple.writeable.transform(a)) &amp;&gt; Gzip.gzip())
      }

      next(request).map {
        case plain: PlainResult =&gt; gzipResult(plain)
        case async: AsyncResult =&gt; async.transform(gzipResult)
      }
    }
  }
}
</code></pre>

<h2>Using the simpler API</h2>

<p>
Now you've seen how you can achieve everything using the base <code>EssentialFilter</code> API, and hopefully therefore you understand how filters fit into Play's architecture and how you can utilise them to achieve your requirements.  Let's now have a look at the simpler API:
</p>

<pre class="prettyprint"><code class="language-scala">trait Filter extends EssentialFilter {
  def apply(f: RequestHeader =&gt; Result)(rh: RequestHeader): Result
  def apply(next: EssentialAction): EssentialAction = {
    ...
  }
}

object Filter {
  def apply(filter: (RequestHeader =&gt; Result, RequestHeader) =&gt; Result): Filter = new Filter {
    def apply(f: RequestHeader =&gt; Result)(rh: RequestHeader): Result = filter(f,rh)
  }
}
</code></pre>

<p>
Simply put, this API allows you to write filters without having to worry about body parsers.  It makes it look like actions are just functions of request headers to results.  This limits the full power of what you can do with filters, but for many use cases, you simply don't need this power, so using this API provides a simple alternative.
</p>

<p>
To demonstrate, a noop filter class looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">class NoopFilter extends Filter {
  def apply(f: (RequestHeader) =&gt; Result)(rh: RequestHeader) = {
    f(rh)
  }
}
</code></pre>

<p>
Or, using the <code>Filter</code> companion object:
</p>

<pre class="prettyprint"><code class="language-scala">val noopFilter = Filter { (next, req) =&gt;
  next(req)
}
</code></pre>

<p>
And a request timing filter might look like this:
</p>

<pre class="prettyprint"><code class="language-scala">val timingFilter = Filter { (next, req) =&gt;
  val start = System.currentTimeMillis

  def logTime(result: PlainResult): Result = {
    Logger.info("Request took " + (System.currentTimeMillis - start))
    result
  }

  next(req) match {
    case plain: PlainResult =&gt; logTime(plain)
    case async: AsyncResult =&gt; async.transform(logTime)
  }
}
</code></pre>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2013-02-16-understanding_the_play_filter_api</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2013-02-16 02:30:41</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1361507944502</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>205.250.101.244</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-02-22 15:39:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Would greatly appreciate some instructions/code in JAVA explaining how to use/implement filters. Thanks.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1374260584807</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>71.56.151.212</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-20 05:03:04</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;If I'm understanding this correctly, the filters are only applied before the action is triggered, is there a way to write an after/onComplete filter?&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Java 8 Lambdas - The missing link to moving away from Java</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2013/03/28/java_8_lambdas_the_missing_link_to_moving_away_from_java.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<blockquote>
I learnt functional programming, but then I decided I liked imperative programming better so I switched back.
<div style="text-align: right">&mdash; Nobody, ever</div>
</blockquote>

<p>
Moving from imperative programming to functional programming is a very common thing to do today.  Blog posts on the internet abound with testimonies about it.  Everything I've read and every person I've talked to, including myself, has the same story.  Once they started functional programming, there was no looking back.  They loved it, and in the early days, even the small amount they learnt gave them a thirst to learn more.
</p>

<p>
To me it seems clear, going from imperative programming to functional programming is a one way street under heavy traffic.  It's a diode with a million volts sitting across it.  It's a check valve on a mains water pipe.  Not only can you not go back, but it comes with an irresistible desire to explore and learn more that pushes you further into functional programming.
</p>

<h2>Java 8 Lambdas</h2>

<p>
With Java 8 lambdas on the way, this poses an interesting turning point for one of the largest groups of developers on the planet.  Lambdas in themselves don't necessarily equate to functional programming.  But they do enable it.  And as a developer here starts dabbling in functional programming, a library maintainer there, we'll start to see some new things in Java source code.  Methods that previously might have returned <tt>null</tt> will start returning <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Optional.html"><tt>Optional</tt></a>.  Libraries that do IO, for example HTTP client libraries, will start returning <a href="http://gee.cs.oswego.edu/dl/jsr166/dist/docs/java/util/concurrent/CompletableFuture.html"><tt>CompletableFuture</tt></a>.  More and more functional concepts will start creeping into Java interfaces, there will be methods called fold, map, reduce, collect.  And so will start the one way street of the Java masses moving from imperative programming to functional programming.
</p>

<p>
But will Java satisfy their thirst?  Looking at the Lambda spec, I suspect not.  I see an essence of genius in the Lambda spec, it makes many, many existing libraries instantly usable, with no changes, with Lambdas.  The reason for this is that a Lambda is just syntactic sugar for implementing a single-abstract-method (SAM) interface.  In Java you'll find SAM's everywhere, from <tt>Runnable</tt> and <tt>Callable</tt> in the concurrency package, to <tt>ActionListener</tt> in Swing, to <tt>Function</tt> and <tt>Supplier</tt> in Guava, and the list goes on.  All of these libraries are Lambda ready today.
</p>

<p>
However, this also presents a problem.  Functional programming gets interesting when you start composing things.  The ability to pass functions around and compose them together gives a lot of power - but the Java 8 Lambdas are not composable.  Java 8 does provide a <a href="http://download.java.net/jdk8/docs/api/java/util/function/Function.html"><tt>Future</tt></a> SAM, but so does Guava, and many other libraries.  To compose these together, you'd need all permutations of composition methods.  Two SAM's of the same type aren't even very simple to compose, at least, not in a traditional Java way, since you can't add any methods to the SAM, such as a map or transform method, to do the composing.
</p>

<p>
So, without the ability to do one of the most basic functional concepts, composing functions, can Java ever become a functional language?  Maybe there are some creative ways to solve this that I haven't thought of.  And maybe it doesn't need to, I don't think the designers of Java 8 Lambdas had any intention of making Java a functional language, so you can't call this a fault of the Lambda spec.  But the problem is the developers, having got a taste for functional programming, as I pointed out earlier, are going to want more, and going to want more fast.  Even if Java could become a functional language, I don't think it will keep up with the movement of Java developers to functional programming.
</p>

<p>
So I'm going to make a prediction.  Java 8 Lambdas will be eagerly adopted.  So eagerly that Java itself will be left behind, and the majority of Java developers will move on to a language that meets their needs as eager budding new functional programmers.
</p>

<h2>Which language?</h2>

<p>
Before I speculate on which language Java developers will move to, let me first just qualify that I am both biased and ignorant.  I work for Typesafe, and so am obviously biased towards Scala.  And apart from playing with Haskell and ML at university, I have never used any other functional language in anger.  So take my words with a grain of salt, and if you disagree, write your own blog post about it.
</p>

<h2>Scala as a transitionary language</h2>

<p>
So firstly, I think Scala makes a great transitionary language for imperative programmers to switch to functional programming.  Having got a taste for functional programming with Java 8 Lambdas, a Java developer will find themselves very comfortable in Scala.  They can still do everything in the same way they used to, they have vars and mutable collections, they have all the standard Java libraries at their finger tips.  And of course, they can start deepening their knowledge in functional programming.  So Scala provides a smooth transition from imperative programming to functional programming, you can adopt functional programming as quickly or as slowly as you like.
</p>

<h2>Scala as the destination language</h2>

<p>
Having transitioned to functional programming, will developers stay at Scala, or will they move on, like they moved on from Java, in search of a more pure language?  My opinion here is no.  Broadly speaking, I see two camps in the functional programming community.  The first camp sees functional programming as a set of laws that must be followed.  For this camp, Scala has a lot of things that are not necessary and/or dangerous, and they would probably not see Scala as the end destination.
</p>

<p>
The second camp sees functional programming as a powerful tool that should be widely exploited, but not a set of laws that must be followed.  This is where I stand, and Scala fills the needs of this camp very well.  Functional programming has first class support in Scala, but you can always fall back to imperative when it makes sense.  I suspect that the majority of the Java community would be inclined to join this camp, otherwise, they would already be shunning Java and writing Haskell.
</p>

<p>
So I think Java 8 Lambdas are going to be very good for Scala, in that they give Java developers a taste for what Scala will do for them, and thus funnel the masses into Scala development.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2013-03-28-java_8_lambdas_the_missing_link_to_moving_away_from_java</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2013-03-28 10:11:49</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1364493528197</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Basu</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>basavarajkalloli@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>1.38.25.33</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-03-29 04:58:48</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Great read loved it :) another Scala enthusiast here !!</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1366234397921</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>198.147.192.8</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-04-18 07:33:17</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Or it could be good for Java to get people that could go to scala since it has already those things like lamba.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1368525335853</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Chris</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>42.3.81.104</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-05-14 19:55:35</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Hi James,</p>
<p>Allow me to disagree with you :)</p>
<p>Dont get me wrong, FP is really nice and refreshing way to think and solve a given problem and scala is a wondeful language but I bet that once Java 8 comes, the FP bags it carries will be enough for most of java programmers to not move away. It will solve many boilerplate issues, introduce many handy methodes on collection (all the map filter flatmap utilities) and more and overall Java programmer will not feel being left behing when coding simple things while their FP friends laught at them saying how in FP those 20 lines is a one liner.</p>
<p>The issue i see with FP is that it's very simple to get it wrong very quickly and being based on recursion, it's also very simple to forget or not understand the overall complexity(big O notation) of the solution proposed. The other pitfall would also be the syntax that can become very cryptic very quickly as well. One of my mantra when programming is &quot;Clarity over cleverness&quot;, FP people seems to always prefer cleverness, leaving code that they themself dont understand right away a week after.</p>
<p>Cedric Beust (Otaku) recently blogged on the FP vs imperative and I somewhat share his opinion:&nbsp;<a href="http://beust.com/weblog/2013/01/02/no-silver-bullet-reloaded/">http://beust.com/weblog/2013/01/02/no-silver-bullet-reloaded/</a></p>
<p>Out of the box, it's true that&nbsp;<span>Java 8 Lambdas are not composable but if I</span>&nbsp;am not wrong that is exactly what Reactor (&nbsp;<a href="http://blog.springsource.org/2013/05/13/reactor-a-foundation-for-asynchronous-applications-on-the-jvm/">http://blog.springsource.org/2013/05/13/reactor-a-foundation-for-asynchronous-applications-on-the-jvm/</a>&nbsp;) or RxJava (&nbsp;<a href="https://github.com/Netflix/RxJava">https://github.com/Netflix/RxJava</a>&nbsp;) are for. Sure having that in the language is handy and better but it's not like it's impossible to compose SAM if it's not in the language to begin with. You might not be able to do exactly everything you could do like in a pure FP language but I am sure that 95% of what most people use can be done.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1369460194969</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>60.225.171.36</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-05-25 15:36:34</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>In my experience, FP (combined with a decent type system) makes it easier to get it right. &nbsp;If the code doesn't compile, it's often wrong. &nbsp;Yes, it is simple to not understand the complexity, but FP make no difference to that, it's just as easy to make complexity mistakes in Java as well (for example, prepend to an ArrayList, that's O(n). &nbsp;What FP does do is favour data structures and idioms for using them that out of the box perform well, while still being immutable and so much easier to reason about.</p>
<p>Syntax can become cryptic in any language, including Java. &nbsp;A perfect example that I came across just the other day was Doug Lea's implementation of the Java 8 CompletableFuture. &nbsp;Impossible to read, I doubt he can even read it. &nbsp;Compare that to the Future/Promise implementations in Scala, far less code, far better variable names, and I can read it with no problems, in spite of the fact that I didn't write it. &nbsp;Someone that favours cleverness over clarity will do so regardless of what language they are programming in, and so their code will be cryptic. &nbsp;That's not the fault of the language or the programming paradigm. &nbsp;So I definitely take issue to you saying &quot;FP people seems to always prefer cleverness&quot;, because I certainly don't, and would far rather something readable in 5 lines of code than something cryptic in 1 line of code.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1368525335853</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1372033929478</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Patrick</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>pat@heypatty.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-24 10:32:09</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p><strong><em>I learnt functional programming, but then I decided I liked imperative programming better so I switched back. (said nobody every)</em></strong></p>
<p>&nbsp;</p>
<p>I think the decision to choose FP over an imperitive style is contextual to the problem and any conclusion to choose outside of *some* context kind of reads as an elitetist choice.</p>
<p>Take the scenario where a project is well underway and by and large uses an imperitive style that all the developers are familiar with. To choose FP in this context (even though 1 individual may prefer it) would be a quick trip to failure.</p>
<p>FP must be adopted early on in the project and it (like any technical change) comes with a cost.</p>
<p>IMHO, FP and Imperitive are simply different styles to tackle problems and the pro's and con's of each must be looked at for the problem at hand.</p>
<p>This is a bit of tangent to your Java 8 subject but I just wanted to respond to the first quote :)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1372637407541</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>James Roper</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>jroper2@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://jazzy.id.au</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>110.33.239.116</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-01 10:10:07</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;I don't think we're in disagreement here.</p>
<p>The quote wasn't &quot;but then I decided imperative programming was better for every project&quot;, it was &quot;but then I decided I liked imperative programming better&quot;. &nbsp;You don't make decisions based soley on what you like and don't like in a project, I still do plenty of imperative programming, just as I still do plenty of Java. &nbsp;I don't like it, but the best thing for a project isn't just what I do or don't like.</p>
<p>The point of the quote was that I've never encountered anyone who, after learning functional programming, has decided that they prefer imperative programming. &nbsp;They might switch back to imperative programming, but it won't be because they like it.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1372033929478</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1378875388763</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>gantamk@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>105.208.241.171</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-09-11 14:56:28</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>How about disappointingly slowest complier. It may become a biggest nightmare if one chose to build large enterprise applications in scala.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      <wp:comment_parent>1372637407541</wp:comment_parent>
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1374601853599</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Ricky Clarkson</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>ricky.clarkson@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>66.102.14.32</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-24 03:50:53</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&quot;&nbsp;<span>Two SAM's of the same type aren't even very simple to compose, at least, not in a traditional Java way, since you can't add any methods to the SAM, such as a map or transform method, to do the composing.&quot;</span></p>
<p>Sure you can, that's what default methods are for.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Advanced routing in Play Framework</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2013/05/08/advanced_routing_in_play_framework.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
We frequently get questions about how to meet all sorts of different routing needs in Play Framework.  While the built in router is enough for most users, sometimes you may encounter use cases where it's not enough.  Or, maybe you want a more convenient way to implement some routing pattern.  Whatever it is, Play will allow you to do pretty much anything.  This blog post is going to describe some common use cases.
</p>

<h2>Hooking into Plays routing mechanism</h2>

<p>
If for some reason you don't like Plays router, or if you want to use a modified router, then Play allows you to do this easily.  <tt>Global.onRouteRequest</tt> is the method that is invoked to do routing.  By default, this delegates to the Play router, but you can override it to do whatever you want.  For example:
</p>

<pre class="prettyprint"><code class="language-scala">override def onRouteRequest(req: RequestHeader): Option[Handler] = {
  (req.method, req.path) match {
    case ("GET", "/") =&gt; Some(controllers.Application.index)
    case ("POST", "/submit") =&gt; Some(controllers.Application.submit)
    case _ =&gt; None
  }
}
</code></pre>

<p>
As you can see, I've practically implemented my own little routing DSL here.  I could also delegate back to the default router by invoking <tt>super.onRouteRequest(req)</tt>.
</p>

<p>
An interesting thing that could also be done is to delegate to different routers based on something in the request.  A play router compiles to an instance of <tt>Router.Routes</tt>, and it will be an object called <tt>Routes</tt> itself.  By default, any file with the <tt>.routes</tt> extension in the <tt>conf</tt> directory will by compiled, and will go in the package with the same name as the filename, minus the <tt>.routes</tt>.  So if I had two routers, <tt>foo.routes</tt> and <tt>bar.routes</tt>, I could implemented a crude form of virtual hosting like so:
</p>

<pre class="prettyprint"><code class="language-scala">override def onRouteRequest(req: RequestHeader): Option[Handler] = {
  if (req.host == "foo.example.com") {
    foo.Routes.routes.lift(req)
  } else if (req.host == "bar.example.com") {
    bar.Routes.routes.lift(req)
  } else {
    super.onRouteRequest(req)
  }
}
</code></pre>

<p>
So here are some use cases that overriding <tt>onRouteRequest</tt> may be useful for:
</p>

<ul>
<li>Modifying the request in some way before routing is done</li>
<li>Plugging in a completely different router (eg, jaxrs)</li>
<li>Delegating to different routes files based on some aspect of the request</li>
</ul>

<h2>Implementing a custom router</h2>

<p>
We saw in the previous example how to use Plays <tt>Router.Routes</tt> interface, another option is to implement it.  Now, there's no real reason to implement it if you're just going to delegate to it directly from <tt>onRouteRequest</tt>.  However, by implementing this interface, you can include it in another routes file, using the sub routes include syntax, which in case you haven't come across this before, typically looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">-&gt;    /foo         foo.Routes
</code></pre>

<p>
Now something that people often criticise Play for is that it doesn't support rails style resource routing, where a convention is used to route commonly needed REST endpoints to particular methods on a controller.  Although Play comes with nothing out of the box that does this, it is not hard to implement this today for your project, Play 2.1 has everything you need to support it, by using the routes includes syntax, and implementing your own router.  And I have some good news too, we will be introducing a feature like this into Play soon.  But until then, and also if you have your own custom conventions that you want to implement, you will probably find these instructions very helpful.
</p>

<p>
So let's start off with an interface that our controllers can implement:
</p>

<pre class="prettyprint"><code class="language-scala">trait ResourceController[T] extends Controller {
  def index: EssentialAction
  def newScreen: EssentialAction
  def create: EssentialAction
  def show(id: T): EssentialAction
  def edit(id: T): EssentialAction
  def update(id: T): EssentialAction
  def destroy(id: T): EssentialAction
}
</code></pre>

<p>
I could provide default implementations that return not implemented, but then implementing it would require using <tt>override</tt> keywords.  I think it's a matter of preference here.
</p>

<p>
Now I'm going to write a router.  The router interface looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">trait Routes {
  def routes: PartialFunction[RequestHeader, Handler]
  def documentation: Seq[(String, String, String)]
  def setPrefix(prefix: String)
  def prefix: String
}
</code></pre>

<p>
The <tt>routes</tt> method is pretty self explanatory, it is the function that looks up the handler for a request.  <tt>documentation</tt> is used to document the router, it is not mandatory, but it used by at least one REST API documenting tool to discover what routes are available and what they look like.  For brevity in this post, we won't worry about implementing it.  The <tt>prefix</tt> and <tt>setPrefix</tt> methods are used by Play to inject the path of the router.  In the routes includes syntax that I showed above, you could see that we declared the router to be on the path <tt>/foo</tt>.  This path is injected using this mechanism.
</p>

<p>
So we'll write an abstract class that implements the routes interface and the <tt>ResourceController</tt> interface:
</p>

<pre class="prettyprint"><code class="language-scala">abstract class ResourceRouter[T](implicit idBindable: PathBindable[T]) 
    extends Router.Routes with ResourceController[T] {
  private var path: String = ""
  def setPrefix(prefix: String) {
    path = prefix
  }
  def prefix = path
  def documentation = Nil
  def routes = ...
}
</code></pre>

<p>
I've given it a <tt>PathBindable</tt>, this is so that we have a way to convert the <tt>id</tt> from a <tt>String</tt> extracted from the path to the type accepted by the methods.  <tt>PathBindable</tt> is the same interface that's used under the covers when in a normal routes file to convert types.
</p>

<p>
Now for the implementation of <tt>routes</tt>.  First I'm going to create some regular expressions for matching the different paths:
</p>

<pre class="prettyprint"><code class="language-scala">  private val MaybeSlash = "/?".r
  private val NewScreen = "/new/?".r
  private val Id = "/([^/]+)/?".r
  private val Edit = "/([^/]+)/edit/?".r
</code></pre>

<p>
I'm also going to create a helper function for the routes that require the id to be bound:
</p>

<pre class="prettyprint"><code class="language-scala">def withId(id: String, action: T =&gt; EssentialAction) = 
  idBindable.bind("id", id).fold(badRequest, action)
</code></pre>

<p>
<tt>badRequest</tt> is actually a method on <tt>Router.Routes</tt> that takes the error message and turns it into an action that returns that as a result.  Now I'm ready to implement the partial function:
</p>

<pre class="prettyprint"><code class="language-scala">def routes = new AbstractPartialFunction[RequestHeader, Handler] {
  override def applyOrElse[A &lt;: RequestHeader, B &gt;: Handler](rh: A, default: A =&gt; B) = {
    if (rh.path.startsWith(path)) {
      (rh.method, rh.path.drop(path.length)) match {
        case ("GET", MaybeSlash()) =&gt; index
        case ("GET", NewScreen()) =&gt; newScreen
        case ("POST", MaybeSlash()) =&gt; create
        case ("GET", Id(id)) =&gt; withId(id, show)
        case ("GET", Edit(id)) =&gt; withId(id, edit)
        case ("PUT", Id(id)) =&gt; withId(id, update)
        case ("DELETE", Id(id)) =&gt; withId(id, destroy)
        case _ =&gt; default(rh)
      }
    } else {
      default(rh)
    }
  }

  def isDefinedAt(rh: RequestHeader) = ...
}
</code></pre>

<p>
I've implemented <tt>AbstractPartialFunction</tt>, and the main method to implement then is <tt>applyOrElse</tt>.  The match statement doesn't look much unlike the mini DSL I showed in the first code sample.  I'm using regular expressions as extractor objects to extract the ids out of the path.  Note that I haven't shown the implementation of <tt>isDefinedAt</tt>.  Play actually won't call this, but it's good to implement it anyway, it's basically the same implementation as <tt>applyOrElse</tt>, except instead of invoking the corresponding methods, it returns <tt>true</tt>, or for when nothing matches, it returns <tt>false</tt>.
</p>

<p>
And now we're done.  So what does using this look like?  My controller looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">package controllers

object MyResource extends ResourceRouter[Long] {
  def index = Action {...}
  def create(id: Long) = Action {...}
  ...
  def custom(id: Long) = Action {...}
}
</code></pre>

<p>
And in my routes file I have this:
</p>

<pre class="prettyprint"><code class="language-scala">-&gt;     /myresource              controllers.MyResource
POST   /myresource/:id/custom   controllers.MyResource.custom(id: Long)
</code></pre>

<p>
You can see I've also shown an example of adding a custom action to the controller, obviously the standard crud actions are not going to be enough, and the nice thing about this is that you can add as many arbitrary routes as you want.
</p>

<p>
But what if we want to have a managed controller, that is, one whose instantiation is managed by a DI framework?  Well let's created another router that does this:
</p>

<pre class="prettyprint"><code class="language-scala">class ManagedResourceRouter[T, R &gt;: ResourceController[T]]
    (implicit idBindable: PathBindable[T], ct: ClassTag[R]) 
    extends ResourceRouter[T] {

  private def invoke(action: R =&gt; EssentialAction) = {
    Play.maybeApplication.map { app =&gt;
      action(app.global.getControllerInstance(ct.runtimeClass.asInstanceOf[Class[R]]))
    } getOrElse {
      Action(Results.InternalServerError("No application"))
    }
  }

  def index = invoke(_.index)
  def newScreen = invoke(_.newScreen)
  def create = invoke(_.create)
  def show(id: T) = invoke(_.show(id))
  def edit(id: T) = invoke(_.edit(id))
  def update(id: T) = invoke(_.update(id))
  def destroy(id: T) = invoke(_.destroy(id))
}
</code></pre>

<p>
This uses the same <tt>Global.getControllerInstance</tt> method that managed controllers in the regular router use.  Now to use this is very simple:
</p>

<pre class="prettyprint"><code class="language-scala">package controllers

class MyResource(dbService: DbService) extends ResourceController[Long] {
  def index = Action {...}
  def create(id: Long) = Action {...}
  ...
  def custom(id: Long) = Action {...}
}
object MyResource extends ManagedResourceRouter[Long, MyResource]
</code></pre>

<p>
And in the routes file:
</p>

<pre class="prettyprint"><code class="language-scala">-&gt;     /myresource              controllers.MyResource
POST   /myresource/:id/custom   @controllers.MyResource.custom(id: Long)
</code></pre>

<p>
The final thing we need to consider is reverse routing and the Javascript router.  Again this is very simple, but I'm not going to go into any details here.  Instead, you can check out the final product, which has a few more features, <a href="https://gist.github.com/jroper/5533633">here</a>.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2013-05-08-advanced_routing_in_play_framework</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2013-05-08 01:51:42</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1367966498337</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Alejandro</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>alejandro.pedraza@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://macondoventures.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>190.159.192.78</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-05-08 08:41:38</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;This is pretty neat, thanks.</p>
<p>Is it possible to tap into the routing mechanism from within a Plugin? I'm wanting to implement virtual hosting through a plugin that would trigger a different app module depending on the request's host header.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1368229659430</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>98.171.163.20</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-05-11 09:47:39</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Is there any way to do this in Java?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>SBT per version global plugins</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2013/05/29/sbt_per_version_global_plugins.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
I'm an IntelliJ user, so I have the SBT idea plugin permanently in my global SBT plugins.  This is fine, until I start working across versions of SBT, and particularly with milestone builds of unreleased SBT versions, because in that case, the version of the idea plugin that I usually use with other versions of SBT may not be available.  Hence I need to have per SBT version global plugins.  I think this might be easier to do in future, but for now, here's a way to do it:
</p>

<pre class="prettyprint"><code class="language-scala">libraryDependencies &lt;++= (sbtBinaryVersion in update, scalaBinaryVersion in update) { (sbtV, scalaV) =&gt;
  sbtV match {
    case sbt013 if sbt013.startsWith("0.13.") =&gt; Seq(
      Defaults.sbtPluginExtra("com.github.mpeltonen" % "sbt-idea" % "1.5.0-SNAPSHOT", sbtV, scalaV)
    )
    case _ =&gt; Seq(
      Defaults.sbtPluginExtra("com.github.mpeltonen" % "sbt-idea" % "1.4.0", sbtV, scalaV)
    )
  }
}
</code></pre>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2013-05-29-sbt_per_version_global_plugins</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2013-05-29 15:50:33</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1372359829922</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>John</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>olds9288@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-28 05:03:49</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>James, I was trying to ask a question on the RNG page and had no luck.&nbsp; What do I need to do?&nbsp; Thanks.&nbsp; -John</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>What is wrong with Monads?</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2013/06/05/what_is_wrong_with_monads.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
Nothing is wrong with Monads.  What is wrong is how people communicate them.
</p>

<p>
There are people out there that learn abstract concepts first, and then work out how to apply them to solving their every day problems.  Then there are people that learn how to solve their every day problems, and then they can understand how these solutions can be generalised into abstract concepts for solving problems.  I am firmly in the second camp, explain an abstract concept to me that I've never come across before, and it'll go in one ear and out the other.  Explain a solution to a problem that I have at hand, and I'll understand.  Tell me that the solution can be generalised into an abstract concept, and you won't need to tell me anything more about that abstract concept, I'll understand it immediately.
</p>

<p>
I envy the people that can understand the abstract concepts first before applying them to real problems.  I really wish I had that ability.  But I don't.  And I don't think I'm alone.  I suspect many, maybe even most developers learn the same way that I do.
</p>

<p>
So this is the problem with monads, the problem is too abstract.  I tried to read up about monads quite a number of times, and I always got stuck.  I even read about "burritos" and "semicolons", these simplifications just made me more confused.  None of the stuff I was reading made any sense to me.
</p>

<p>
Then one day I started using Play 2.  Play 2 is an asynchronous web framework.  It heavily uses futures as a means to implement asynchronous code.  I had been writing some asynchronous code for a while before I had started using Play 2, and I knew how painful it could be.  When I saw futures in Play, it solved a problem that I had perfectly.  The ability to return a result that could then be mapped/flatMapped was exactly what I needed.
</p>

<p>
I was so excited about this new discovery that I prepared and gave a presentation on Play's futures at the Berlin Play User Group.  I put forward a real world problem, and explained how Future, map and flatMap could solve it.  I got great feedback from everyone at the user group, it really helped a lot of people to understand asynchronous programming and futures.  At that point, I still had no idea what a monad was, yet somehow I was teaching others about monads.
</p>

<p>
A while later I was at the Berlin Play User Group again, and a conversation about monads came up.  I admitted to everyone there that I didn't know what a monad was.  Someone looked at me funny, and said "it's basically just flatMap".  Suddenly it all made sense to me.  I went back and read the same papers and blog posts that I had tried to read before, and they all made perfect sense, I now had no problems understanding monads.
</p>

<p>
So why didn't I understand monads before that?  What was missing was an explanation that was given within the context of a concrete problem that I could relate to.  Why was it missing?  Because monads are simply too abstract.  Each specific different monad solves a different concrete problem.  The option monad solves a problem involving values that might not exist.  The future monad solves a problem involving values that don't exist yet.  The sequence monad solves a problem involving a sequence of values.  And so on.  To explain the general concept of monads, you need to abstract it away from any of the specific concrete problems that each monad solves, into a general abstract problem.  And so if, to explain monads, you start with monads, you are at an abstraction level that is twice removed from real world problems.  That means if you try to explain them starting with the abstract concepts to someone such as myself, at best you'll just make my head explode.
</p>

<p>
This is why I say, if you want to explain monads to a developer who is anything like me, don't start with monads.  Don't even use the word monad, the moment you do that you are throwing down a concrete wall in front of them 30 foot high that they will not be able to climb.  Start with a real world problem - asynchronous programming with futures is an excellent one, and talk about how to solve that.  Then maybe later talk about monads.  But by that stage, does it matter if they know what a monad is?  They've learnt the concepts already, probably well enough to give a presentation at a user group about them.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2013-06-05-what_is_wrong_with_monads</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2013-06-05 17:46:46</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1370442115735</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Luis Angel Vicente Sanchez</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>109.231.196.202</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-06 00:21:55</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I agree with you... learning just the concept of what a monad is without a real example makes everything complicate. But names are really important... they allow to discuss about things sharing a commong &quot;language&quot; (i.e. &quot;singleton&quot; is way better than &quot;object that only can be instantiated once&quot;)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1370442219335</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Luis Angel Vicente Sanchez</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>109.231.196.202</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-06 00:23:39</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Btw... I don't mind to be exposed to the concept of monads without a real example... if they do it this way:</p>
<p>http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1370452700850</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Vincent</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>vincent.marquez@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>98.189.26.19</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-06 03:18:20</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;Well said. &nbsp; I'm with you, I learned about 'monads' the same way, as in I didn't understand any of the crazy burrito tutorials, but thought scala was *amazing* cause of how you could nest Futures and Options using this cool for comprehension thing.&nbsp;I struggle with learning concepts in the abstract, and much prefer seeing concrete implementations and recognizing the pattern. &nbsp; And then one day the whole nesting but not looking like nesting for comprehension pattern hit me...(wow monads are cool!)</p>
<p>So, I agree, when teaching monads, it may be better to end with the word monad than start. &nbsp;I liked this when I was learning basic GoF stuff too (Strategy pattern is a uleless name, but helpful vocabulary once the concept is understood). &nbsp;Typelcasses are similar in that they are patterns, but also can have concrete implementations that can be useful. &nbsp;So while not useful for teaching, it's a nice way to communicate. &nbsp;If I say my API is monadic, it imparts some useful information.&nbsp;</p>
<p>A simple example of the usefulness of the actual monad typeclass (in scalaz) &nbsp;would be Transformers, which all take the generic monad typeclass. &nbsp;If you've ever wanted to return a Future[Option[A]], but didn't want to deal with&nbsp;</p>
<p>val f2 =&nbsp;<br />
for {<br />
&nbsp; optA &lt;- Future{ Some(&quot;a) }<br />
&nbsp;} yield {<br />
&nbsp; for {&nbsp;<br />
&nbsp; &nbsp; &nbsp;concreteA &lt;- optA&nbsp;<br />
&nbsp;} yield {<br />
&nbsp; &nbsp;concreteA.toUpperCase<br />
}<br />
&nbsp;&nbsp;&nbsp;<br />
&nbsp;instead, you can use Transformers! &nbsp;Which have the type signature of Transformer[Monad[_], A...]<br />
val f2 =&nbsp;<br />
&nbsp;for {<br />
&nbsp; &nbsp; concreteA &lt;- OptionT[Future, String](Future { Some(&quot;a&quot;) } )<br />
} yield&nbsp;<br />
&nbsp; &nbsp;concreteA.toUpperCase<br />
<br />
Now you may know all this, but in case someone comes to the blog I thought i'd just point out that it IS useful to work with generic 'monads' at times, though looking at the typeclass itself might also scare away some of the newer folk. &nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>Call response WebSockets in Play Framework</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2013/06/12/call_response_websockets_in_play_framework.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
I got a question from a Play user about implementing call/response WebSockets in Play Framework.  This is not something that comes up that often, since it means using WebSockets to do basically what AJAX does for you, so what's the point?  But here are some use cases that I've thought of:
</p>

<ul>
<li>You have some transformation of a stream that can only be done on the server side.  For example, perhaps the transformation requires some heavy database work, or is too computationally expensive for a mobile client, or perhaps you want to encrypt the stream with a key that is private to the server.</li>
<li>You are already processing a stream of events from the server using WebSockets, and the responses to the calls are just more events in this stream, so you'd like to share the same transport mechanism for these events.</li>
<li>Your application is particularly chatty, and you don't want the overhead of the HTTP protocol on each call/response.</li>
</ul>

<p>
There are possibly more use cases - WebSockets is quite a new technology and as an industry we haven't really settled on what it's best use cases are.
</p>

<h2>A simple echo implementation</h2>

<p>
A Play WebSocket is implemented by providing an iteratee that consumes messages from the client, and an enumerator that produces messages for the client.  If we simply wanted to echo every message that the client sent us, then we would want to return an iteratee whose input becomes the output of the enumerator that we return.  Play doesn't come with anything out of the box to do this, but we will probably add something out of the box that does this in a future release.  For now, I'm going to write a method called <tt>joined</tt>, that returns a joined iteratee/enumerator pair:
</p>

<pre class="prettyprint"><code class="language-scala">/**
 * Create a joined iteratee enumerator pair.
 *
 * When the enumerator is applied to an iteratee, the iteratee subsequently consumes whatever the iteratee in the pair
 * is applied to.  Consequently the enumerator is "one shot", applying it to subsequent iteratees will throw an
 * exception.
 */
def joined[A]: (Iteratee[A, Unit], Enumerator[A]) = {
  val promisedIteratee = Promise[Iteratee[A, Unit]]()
  val enumerator = new Enumerator[A] {
    def apply[B](i: Iteratee[A, B]) = {
      val doneIteratee = Promise[Iteratee[A, B]]()

      // Equivalent to map, but allows us to handle failures
      def wrap(delegate: Iteratee[A, B]): Iteratee[A, B] = new Iteratee[A, B] {
        def fold[C](folder: (Step[A, B]) =&gt; Future[C]) = {
          val toReturn = delegate.fold {
            case done @ Step.Done(a, in) =&gt; {
              doneIteratee.success(done.it)
              folder(done)
            }
            case Step.Cont(k) =&gt; {
              folder(Step.Cont(k.andThen(wrap)))
            }
            case err =&gt; folder(err)
          }
          toReturn.onFailure {
            case e =&gt; doneIteratee.failure(e)
          }
          toReturn
        }
      }

      if (promisedIteratee.trySuccess(wrap(i).map(_ =&gt; ()))) {
        doneIteratee.future
      } else {
        throw new IllegalStateException(&quot;Joined enumerator may only be applied once&quot;)
      }
    }
  }
  (Iteratee.flatten(promisedIteratee.future), enumerator)
}
</code></pre>

<p>
This code might be a little scary if you don't understand iteratees, but as I said we will probably add this to Play itself in future.  The rest of the code in this blog post will be simple.
</p>

<p>
Now that we have our joined iteratee/enumerator, let's implement an echo WebSocket.  For the rest of this post we'll be assuming that all our WebSockets are sending/receiving JSON messages.
</p>

<pre class="prettyprint"><code class="language-scala">def echo = WebSocket.using[JsValue] { req =&gt;
  joined[JsValue]
}
</code></pre>

<p>
So now we have an echo call/response WebSocket.  But this is not very useful, we want to do something with the incoming messages, and producing new outgoing messages as responses.
</p>

<h2>Processing messages</h2>

<p>
So now that we've expressed our call/response in terms of a joined iteratee/enumerator, how can we transform the call messages to be different response messages?  The answer is enumeratees.  Enumeratees can be used to transform iteratees and enumerators.  We return both an enumerator and an iteratee, so which one do we transform?  The answer is it doesn't matter, I'm going to use it to transform the iteratee.  The enumeratee that we're going to use is the map enumeratee:
</p>

<pre class="prettyprint"><code class="language-scala">def process = WebSocket.using[JsValue] { req =&gt;
  val (iter, enum) = joined[JsValue]

  (Enumeratee.map[JsValue] { json =&gt;
    Json.obj(
      "status" -&gt; "received",
      "msg" -&gt; json
    )
  } &amp;&gt; iter, enum)
}
</code></pre>

<p>
Enumeratees are one of the most powerful features of iteratees for end users.  You could use any enumeratee here, but let's look at some examples of other common use cases.
</p>

<p>
What if we don't want to return a response to every message?  There are numerous ways to do this, but the simplest is to use the <tt>collect</tt> enumeratee, which takes a partial function:
</p>

<pre class="prettyprint"><code class="language-scala">def process = WebSocket.using[JsValue] { req =&gt;
  val (iter, enum) = joined[JsValue]

  (Enumeratee.collect[JsValue] { 
    case json if (json \ "foo").asOpt[JsValue].isDefined =&gt;
      Json.obj(
        "status" -&gt; "received",
        "msg" -&gt; json
      )
  } &amp;&gt; iter, enum)
}
</code></pre>

<p>
Perhaps we want to produce many responses for a single input.  The <tt>mapConcat</tt> enumeratee can be used in this case, with our map function returning a sequence of <tt>JsValue</tt> messages to return:
</p>

<pre class="prettyprint"><code class="language-scala">def process = WebSocket.using[JsValue] { req =&gt;
  val (iter, enum) = joined[JsValue]

  (Enumeratee.mapConcat[JsValue] { json =&gt;
    Seq(
      Json.obj(
        "status" -&gt; "received",
        "msg" -&gt; json
      ),
      Json.obj("foo" -&gt; "bar")
    )
  } &amp;&gt; iter, enum)
}
</code></pre>

<p>
What if we want to do some blocking operations?  In Play 2.2, this will be able to be done simply by providing an execution context suitable for blocking calls to whichever enumeratee you decide to use, but Play 2.1 does not yet support this, so we have to dispatch the callback to another execution context ourselves.  This can be done using the <tt>mapM</tt> enumeratee:
</p>

<pre class="prettyprint"><code class="language-scala">val ec: ExecutionContext = ...

def process = WebSocket.using[JsValue] { req =&gt;
  val (iter, enum) = joined[JsValue]

  (Enumeratee.mapM[JsValue] { json =&gt;
    Future {
      // Some expensive computation, eg a database call, that returns JsValue
    }(ec)
  } &amp;&gt; iter, enum)
}
</code></pre>

<h2>Pushing from an external enumerator</h2>

<p>
You may want to combine your call/response messages with messages from some other enumerator that spontaneously pushes messages to the client, for example a broadcasting enumerator for all clients.  This can be done by interleaving your joined enumerator with the external enumerator:
</p>

<pre class="prettyprint"><code class="language-scala">val globalEvents: Enumerator[JsValue] = ...

def process = WebSocket.using[JsValue] { req =&gt;
  val (iter, enum) = joined[JsValue]

  (Enumeratee.map[JsValue] { json =&gt;
    ...
  } &amp;&gt; iter, Enumerator.interleave(enum, globalEvents))
}
</code></pre>

<h2>Conclusion</h2>

<p>
Using WebSockets in a call response style may be something that your application needs.  If so, using enumeratees to map the stream of messages coming in to messages going out is the most natural and idiomatic way of doing this in Play.  It allows you to call on the large number of composable enumeratees that Play provides out of the box, and makes your code simple and easy to reason about.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2013-06-12-call_response_websockets_in_play_framework</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2013-06-12 03:09:12</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1374257623470</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Henry Story</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>henry.story@bblfish.net</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://bblfish.net</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>83.114.185.234</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-20 04:13:43</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I tried using this to write a CORS Proxy. It nearly seems to work, but I can't get a response from the Web server, it just seems to block.</p>
<p>See the code here:&nbsp;https://gist.github.com/bblfish/6041149</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>How to write a REST API in Play Framework</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2013/06/14/how_to_write_a_rest_api_in_play_framework.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
A very common question that we get on the Play mailing list is how do you write a REST API using Play Framework?  There's no explicit documentation on it, you won't find a page in the Play documentation titled "Writing REST APIs".  The question is often met with confusion, to those that try to answer it, the question for them is "how can you not write a REST API with Play?  Play is all about REST."
</p>

<p>
So let me explain why we don't have a page on writing REST APIs.  Play is fundamentally a framework for writing REST APIs, just like a fridge is a tool that is fundamentally for keeping food cold.  When you buy a fridge, and you get the manual for a fridge, do you find a page titled "How to keep food cold using the fridge"?  Probably not.  You'll find instructions for installing the frige, turning it on, setting the temperature, adjusting the shelves, but you won't find instructions that explicitly say how to keep the food cold.  Why not?  Because it's assumed that you understand, when you buy the fridge, that the way to keep food cool in it is by putting food in and closing the door.  The whole manual is about how to keep food cold, since that's the fridges fundamental function.
</p>

<p>
It's the same with Play.  We assume first of all that you know what a REST API is.  There's plenty of documentation out there on the web on what a REST API is, there's no reason for us to repeat this in our documentation, a good place to start might be <a href="http://stackoverflow.com/questions/671118/what-exactly-is-restful-programming">this StackOverflow question</a>.  As the first answer to that question says, "Really, what it's about is using the true potential of HTTP", Play also provides everything you need to use the true potential of HTTP.
</p>

<p>
So we have documentation on writing routes in <a href="http://www.playframework.com/documentation/2.1.1/ScalaRouting">Scala</a> and <a href="http://www.playframework.com/documentation/2.1.1/JavaRouting">Java</a>, we have documentation on sending results in <a href="http://www.playframework.com/documentation/2.1.1/ScalaResults">Scala</a> and <a href="http://www.playframework.com/documentation/2.1.1/JavaResults">Java</a>, we have documentation on handling JSON in <a href="http://www.playframework.com/documentation/2.1.1/ScalaJson">Scala</a> and <a href="http://www.playframework.com/documentation/2.1.1/JavaJson">Java</a>, and so on and so on.  All this documentation is giving you the tools you need to implement what Play fundamentally about, that is, HTTP, which when realised to its true potential, will be REST.  There's nothing special about a REST API in Play, writing a REST API in Play means writing a web application in the way that Play is designed to be used.  We could probably rename the Play documentation <a href="http://www.playframework.com/documentation/2.1.1/Home">home page</a> to be "Writing a REST API in Play", that would accurately describe what most of the Play documentation is about.
</p>

<p>
Let me repeat again, Play is all about realising the full potential of HTTP, which means Play is all about REST.  You want to read about how to write a REST API in Play?  Read the Play documentation, it's all about writing a REST API in Play.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2013-06-14-how_to_write_a_rest_api_in_play_framework</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2013-06-14 04:18:00</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1371280040529</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-15 17:07:20</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi james,</p>
<p>I agree with you're fridge exemple BUT you should check for exemple Symfony2's documentation. I was impressed by the way they explain how the framework works always by explaining the fundamental concepts you assume the user should know.</p>
<p>For exemple take a look to the chapter on caching : http://symfony.com/doc/current/book/http_cache.html</p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1371579777771</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Caoilte</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>caoilte@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-06-19 04:22:57</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hi James,</p>
<p>When I imagine a page telling me how to write a REST API in Play! it talks about pulling out all of the dependencies on templating engines and clientside libraries and such like. It describes how to strip a modular Play! back to the bare essentials needed for building just a REST API micro-service and nothing else. It's a fond imagining based on a Google Document roadmap eight months old. Might that be what people on the mailing list are asking about?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1373486812822</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>65.113.37.1</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-11 06:06:52</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I hear your point but still there are instructions (or at least suggestions) on where to put the different &nbsp;foods in which fridge shelf. Telling the people that want to use Play that 'you know what you are talking about' and therefore you are not willing to help, doesn't really get you users' support. I think it would have taken you the same amount of time to write a very small example than to write the article above. There are other web frameworks out there that are offering examples.... perhaps your should consider that many potential new users may go elsewhere only because of your lack of examples.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1373530576318</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Anonymous</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>82.123.166.67</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-11 18:16:16</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Thanks James.&nbsp;This cleared a lot up.</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1382741191722</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Michel</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>178.85.83.56</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-10-26 09:46:31</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>I don't get it. If there is a lot of demand for this kind of information why don't you just put together a page with some best practices, example code and maybe pointers to routing libraries (like restly) that are available?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>100 Continue support in Play</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2013/07/16/100_continue_support_in_play.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
The <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.1.1">100 Continue</a> status code in the HTTP spec is one that most people know very little about.  You kind of read it, don't really understand what it's talking about, and then just skip over it.  I didn't know what it was about until I became a developer of a web framework.  It turns out to be very useful in certain situations.
</p>

<p>
Let's say a client needs to make a very large upload, for example 1GB.  What happens if the server can't satisfy the clients request?  For example, what if the client submitted invalid authentication credentials?  Or the request content was too long?  Or the wrong media type?  HTTP is a half duplex protocol, the client and server take it in turns to speak.  This means that even though the server may know immediately after receiving the request header that it can't process the request, it still has to read the entire request body before it can tell the client that, even if that request body is a 1GB long and takes an hour to upload.  And if you've ever done any large HTTP uploads before, you'll know there's nothing more frustrating than getting to the end of a large upload, only get an error back from the server.
</p>

<p>
HTTP has a solution to this, in the form of the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.20"><tt>Expect</tt></a> request header.  The <tt>Expect</tt> header is used to tell the server that the client expects a certain behaviour of it.  There is one defined value for it in the HTTP spec, and that is <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.2.3"><tt>100-continue</tt></a>.  This tells the server that after sending the request headers, the client will not send the body of the request until it has received a 100 continue response.  Otherwise, the server can immediately return with any other response code.  After receiving a 100 continue response, the client will continue to send the body, and once the server has consumed that, the server will send a second response.
</p>

<p>
This can be used whenever the server wants to do validation of just the request headers.  Here are some examples:
</p>

<ul>
<li>Authentication - if the client is not authenticated, the server can respond with 401 Unauthorized.</li>
<li>Authorisation - if the client is not authorised to make the request, the server can respond with 403 Forbidden.</li>
<li>Resource existence - if the client has attempted to put a resource at a location that doesn't exist, the server can respond with 404 Not Found</li>
<li>Content length limits - if the client hasn't sent a content length, the server can respond with 411 Length Required, or if the content length is larger than the server is willing to accept, the server can respond with 413 Request Entity Too Large</li>
<li>Content type validation - if the client is sending a content type that the server doesn't support, the server can respond with 415 Unsupported Media Type</li>
</ul>

<h2>100 continue support in Play Framework</h2>

<p>
So with all this in mind, how can this be implemented in Play framework?  As you may be aware, at the lowest level, a Play action looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">trait EssentialAction extends (RequestHeader =&gt; Iteratee[Array[Byte], Result])
</code></pre>

<p>
The iteratee that the essential action function returns is what consumes the body.  An iteratee can be in one of three states, done, cont (ready to receive more input), or error.  When Play invokes an action to get the iteratee for the body, and a client has specified the <tt>Expect: 100-continue</tt> header, Play is able to check if that iteratee is ready to receive input, or if it's in a done or error state.  If it's in a done or error state, Play will send the result immediately without consuming the body.  If it's in the cont state, then Play will send a 100 continue response, and then feeds the body into the iteratee.
</p>

<p>
So for an action to take advantage of this, it just needs to ensure that it returns a done iteratee if the validation fails.  Plays built in authentication action does just this:
</p>

<pre class="prettyprint"><code class="language-scala">def Authenticated[A](
  userinfo: RequestHeader =&gt; Option[A],
  onUnauthorized: RequestHeader =&gt; Result)(action: A =&gt; EssentialAction): EssentialAction = {

  EssentialAction { request =&gt;
    userinfo(request).map { user =&gt;
      action(user)(request)
    }.getOrElse {
      Done(onUnauthorized(request), Input.Empty)
    }
  }
}
</code></pre>

<p>
In addition, all of Plays body parsers, when they check the content type, will return a done iteratee if the content type is wrong.  So if I have an action that looks like this:
</p>

<pre class="prettyprint"><code class="language-scala">def upload = Authenticated(
    rh =&gt; rh.headers.get("Authentication-Token").filter(_ == "secret-token"), 
    rh =&gt; Forbidden("Authentication required")
) { token =&gt; Action(parse.text) { request =>
  Ok("Got body that was " + request.body.length + " characters long")
}}
</code></pre>

<p>
And then I submit the following request header:
</p>

<pre>
POST /upload HTTP/1.1
Host: localhost
Authentication-Token: secret-token
Content-Type: text/plain
Content-Length: 12
Expect: 100-continue
</pre>

<p>
Play will immediately respond with:
</p>

<pre>
100 Continue HTTP/1.1
</pre>

<p>
At which point, I can then send my body, and Play will send the response.  The whole transaction will look like this:
</p>

<pre>
<span style="color: blue">C: POST /upload HTTP/1.1
C: Host: localhost
C: Authentication-Token: secret-token
C: Content-Type: text/plain
C: Content-Length: 12
C: Expect: 100-continue
C: </span>
S: HTTP/1.1 100 Continue
S:
<span style="color: blue">C: Hello world!</span>
S: HTTP/1.1 200 OK
S: Content-Type: text/plain;charset=utf-8
S: Content-Length: 37
S:
S: Got body that was 12 characters long
</pre>

<p>
However, if I don't send an authentication token, or if my content type is wrong, this is what will happen:
</p>

<pre>
<span style="color: blue">C: POST /upload HTTP/1.1
C: Host: localhost
C: Content-Type: text/plain
C: Content-Length: 12
C: Expect: 100-continue
C: </span>
S: HTTP/1.1 403 Forbidden
S: Content-Type: text/plain;charset=utf-8
S: Content-Length: 23
S:
S: Authentication required
</pre>

<p>
And so even though in the request header I said that the content length was 12, I didn't have to upload it, because I sent the expect header, and Play didn't send a 100 continue response back, instead it was able to immediately tell me that the request would fail.  Obviously with such a small body, this doesn't make a lot of sense, but with a body gigabytes in length, it means I don't have to spend however many hours uploading it before I finally find out that I wasn't allowed to upload it.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2013-07-16-100_continue_support_in_play</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2013-07-16 16:34:12</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1373978804481</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Mathieu</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>mathieu.chataigner@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>83.167.37.146</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-16 22:46:44</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>thank you for this article, but do you know how to use this with nginx?</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1374935472871</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>Roman</wp:comment_author>
      <!-- author email address -->
      
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>80.72.152.158</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-07-28 00:31:12</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>First time I have enountered the 100 was when working with AWS S3 :)</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item><item>
      <!-- title of article -->
      <title>A practical solution to the BREACH vulnerability</title>
      <!-- absolute URI to article -->
      <link>http://jazzy.id.au/2013/08/14/a_practical_solution_to_the_breach_vulnerability.html</link>
      <!-- body of the page or post; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <content:encoded><![CDATA[<p>
Two weeks ago CERT released an advisory for a new vulnerability called <a href="http://www.kb.cert.org/vuls/id/987798">BREACH</a>.  In the advisory they say there is no practical solution to this vulnerability.  I believe that I've come up with a practical solution that we'll probably implement in Play Frameworks CSRF protection.
</p>

<h2>Some background</h2>

<p>
First of all, what is the BREACH vulnerability?  I recommend you read the advisory, there's no point in me repeating it here, but for those that are lazy, here are is a summary.  The prerequisites for exploiting this vulnerability are:
</p>

<ol>
<li>The target page must be using HTTPS, preferably with a stream cipher (eg RC4) though it is possible to exploit when block ciphers with padding are used (eg AES)</li>
<li>The target page must be using HTTP level compression, eg gzip or deflate</li>
<li>The target page must produce responses with a static secret in them.  A typical example would be a CSRF token in a form.</li>
<li>The target page must also reflect a request parameter in the response.  It may also be possible to exploit if it reflected POSTED form body values in the response.</li>
<li>Responses must be otherwise reasonably static.  Dynamic responses, particularly ones that vary the length of the response, are much more expensive to exploit.</li>
<li>The attacker must be able to eavesdrop on the connection, and specifically, measure the length of the encrypted responses.</li>
<li>The attacker must be able to coerce the victims browser to request the target web page many times.</li>
</ol>

<p>
To exploit, the attacker gets the victims browser to submit specially crafted requests.  These requests will contain repeat patterns that the compression algorithm will compress.  If the pattern matches the first part of the secret, then the response will be shorter than if it doesn't, since that part of the secret will also be compressed along with the repeat patterns.  Then character by character, the attacker can determine the secret.
</p>

<h2>Some work arounds</h2>

<p>
The advisory mentions some work arounds.  Whether these work arounds are effective depend greatly on the specific application, none of them can be effectively done by a framework, without potentially breaking the application.
</p>

<p>
Probably the most effective of the work arounds is randomising the secret on each request.  In the case of CSRF protection tokens, which is often provided by many frameworks, this would prevent a user from using the application from multiple tabs at the same time.  It would also cause issues when a user uses the back button.
</p>

<p>
I would like to propose a variant of using randomised tokens, that should work for most framework provided CSRF protection mechanisms, and that, pending feedback from the internet on whether my approach will be effective, we will probably implement in Play Framework.
</p>

<h2>Signed nonces</h2>

<p>
The idea is to use a static secret, but combine it with a nonce, sign the secret and the nonce, and do this for every response that the secret is sent in.  The signature will effectively create a token that is random in each response, thus violating the third prerequisite above, that the secret be static.
</p>

<p>
 The nonce does not need to be generated in a cryptographically secure way, it may be a predictable value such as a timestamp.  The important thing is that the nonce should change sufficiently frequently, and should repeat old values sufficiently infrequently, that it should not be possible to get many responses back that use the same nonce.  The signature is the unpredictable part of the token.
</p>

<p>
Application servers will need to have a mechanism for signing the nonce and the secret using a shared secret.  For applications served from many nodes, the secret will need to be shared between all nodes.
</p>

<p>
The application will represent secrets using two types of tokens, one being "raw tokens", which is just the raw secret, the other being "signed tokens". Signed tokens are tokens for which a nonce has been generated on each use.  This nonce is concatenated with the raw token, and then signed.  An algorithm to do this in Scala might look like this:
</p>

<pre class="prettyprint"><code class="language-scala">def createSignedToken(rawToken: String) = {
  val nonce = System.currentTimeMillis
  val joined = rawToken + "-" + nonce
  joined + "-" + hmacSign(joined)
}
</code></pre>

<p>
where <code>hmacSign</code> is a function that signs the input String using the applications shared secret using the HMAC algorithm.  HMAC is not the only signing algorithm that could be used, but it is a very common choice for these types of use cases.
</p>

<p>
Each time a token is sent in a response, it must be a newly generated signed token.  While it is ok to publish the raw token in HTTP response headers, to avoid confusion on which incoming tokens must be signed and which can be raw, I recommend to always publish and only accept signed tokens.  When comparing tokens, the signature should be verified on each token, and if that passes then only the raw part of the tokens need to be compared.  An algorithm to extract the raw token from the signed token created using the above algorithm might look like this:
</p>

<pre class="prettyprint"><code class="language-scala">def extractRawToken(signedToken: String): Option[String] = {
  val splitted = signedToken.split("-", 3)
  val (rawToken, nonce, signature) = (splitted(0), splitted(1), splitted(2))
  if (thetaNTimeEquals(signature, hmacSign(rawToken + "-" + nonce))) {
    Some(rawToken)
  } else {
    None
  }
}
</code></pre>

<p>
where <code>thetaNTimeEquals</code> does a String comparison with Θ(n) time when the lengths of the Strings are equal, to prevent timing attacks.  Verifying that two tokens match might look like this:
</p>

<pre class="prettyprint"><code class="language-scala">def compareSignedTokens(tokenA: String, tokenB: String) = {
  val maybeEqual = for {
    rawTokenA &lt;- extractRawToken(tokenA)
    rawTokenB &lt;- extractRawToken(tokenB)
  } yield thetaNTimeEquals(rawTokenA, rawTokenB)
  maybeTrue.getOrElse(false)
}
</code></pre>

<h2>Why this works</h2>

<p>
When using a signed token, the attacker can still work out what the raw token is using the BREACH vulnerability, however since the application doesn't accept raw tokens, this is not useful to the attacker.  Because the attacker doesn't have the secret used to sign the signed token, they cannot generate a signed token themselves from the raw token.  Hence, they need to determine not just the raw token, but an entire signed token.  But since signed tokens are random for each response, this breaks the 3rd prerequisite above, that secrets in the response must be static, hence they cannot do a character by character evaluation using the BREACH vulnerability.
</p>

<h2>Encrypted tokens</h2>

<p>
Another option is to encrypt the concatenated nonce and raw token.  This may result in shorter tokens, and I am not aware of any major performance differences between HMAC and AES for this purpose.  APIs for HMAC signing do tend to be a little easier to use safely than APIs for AES encryption, this is why I've used HMAC signing as my primary example.
</p>

<h2>Framework considerations</h2>

<p>
The main issue that might prevent a framework from implementing this is that they might not readily have a secret available to them to use to do the signing or encrypting.  When an application runs on a single node, it may be acceptable to generate a new secret at startup, though this would mean the secret changes on every restart.
</p>

<p>
Some frameworks, like Play Framework, do have an application wide secret available to them, and so this solution is practical to implement in application provided token based protection mechanisms such as CSRF protection.
</p>]]></content:encoded>
      <!-- value used within disqus_identifier; usually internal identifier of article -->
      <dsq:thread_identifier>2013-08-14-a_practical_solution_to_the_breach_vulnerability</dsq:thread_identifier>
      <!-- creation date of thread (article), in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:post_date_gmt>2013-08-14 14:15:33</wp:post_date_gmt>
      <!-- open/closed values are acceptable -->
      <wp:comment_status>open</wp:comment_status>

      <wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1376467964280</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>David</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>dblack@atlassian.com</wp:comment_author_email>
      <!-- author url, optional -->
      
      <!-- author ip address -->
      <wp:comment_author_IP>173.230.154.90</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-08-14 18:12:44</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>&nbsp;There is another pratical and already used solution for HTTPS csrf handing. You see all the cool kids kids for years now have had csrf enforced by default in their frameworks (well django does ;) ) that protects them against MITM csrf cookie clobbering and cookie tossing (mostly). What they do is that they check that the&nbsp;<span>REFERRER </span>is in the javascript 'same origin' as the incoming request host for mutative HTTP verbs[0]. While you should / cannot really use this kind of protection for http: alone it works very well for https: .</p>
<p>[0]&nbsp;<a href="https://github.com/django/django/blob/master/django/middleware/csrf.py#L154">https://github.com/django/django/blob/master/django/middleware/csrf.py#L154</a></p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>1</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1381165365994</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>B4tsc4r</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>b4tsc4r@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.b4tsc4r.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>123.181.69.127</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-10-08 04:02:45</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hey, you manage the site(http://cocoapetition.org.au) and your blog are safe now !!</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment><wp:comment>
      <!-- internal id of comment -->
      <wp:comment_id>1381165400589</wp:comment_id>
      <!-- author display name -->
      <wp:comment_author>B4tsc4r</wp:comment_author>
      <!-- author email address -->
      <wp:comment_author_email>b4tsc4r@gmail.com</wp:comment_author_email>
      <!-- author url, optional -->
      <wp:comment_author_url>http://www.b4tsc4r.com</wp:comment_author_url>
      <!-- author ip address -->
      <wp:comment_author_IP>123.181.69.127</wp:comment_author_IP>
      <!-- comment datetime, in GMT. Must be YYYY-MM-DD HH:MM:SS 24-hour format. -->
      <wp:comment_date_gmt>2013-10-08 04:03:20</wp:comment_date_gmt>
      <!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) -->
      <wp:comment_content><![CDATA[<p>Hey, you manage the site(http://cocoapetition.org.au) and your blog are safe now !! </p>
<p>&nbsp;</p>]]></wp:comment_content>
      <!-- is this comment approved? 0/1 -->
      <wp:comment_approved>0</wp:comment_approved>
      <!-- parent id (match up with wp:comment_id) -->
      
    </wp:comment>
    </item>
      </channel>
    </rss>